{
  "address": "0x2CBb4B9E98928B278475f7E9C07EB34DA42a53bC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAccountManagerToken",
          "name": "_accountManagerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract IOrderBook",
          "name": "_orderBook",
          "type": "address"
        },
        {
          "internalType": "contract IPositionRouter",
          "name": "_positionRouter",
          "type": "address"
        },
        {
          "internalType": "address[8]",
          "name": "_indexTokenArr",
          "type": "address[8]"
        },
        {
          "internalType": "address[4]",
          "name": "_stablecoinsArray",
          "type": "address[4]"
        },
        {
          "internalType": "bool[8]",
          "name": "_permissions",
          "type": "bool[8]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accountManagerToken",
      "outputs": [
        {
          "internalType": "contract IAccountManagerToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        }
      ],
      "name": "createDecreaseOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_acceptablePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawETH",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_callbackTarget",
          "type": "address"
        }
      ],
      "name": "createDecreasePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createDoppelgangerGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_shouldWrap",
          "type": "bool"
        }
      ],
      "name": "createIncreaseOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_acceptablePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_referralCode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_callbackTarget",
          "type": "address"
        }
      ],
      "name": "createIncreasePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_acceptablePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_referralCode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_callbackTarget",
          "type": "address"
        }
      ],
      "name": "createIncreasePositionETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ddl_gmx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "doppelgangerMap",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFundingRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "realisedPnl",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isProfit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPositionDelta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isProfit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "indexTokenArr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "indexTokenBySymbol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLong",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "keyData",
      "outputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "symbol",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "doppelgangerContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "contract IOrderBook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionRouter",
      "outputs": [
        {
          "internalType": "contract IPositionRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setDDL_GMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "symbol",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stablecoinsArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "symbolByIndexToken",
      "outputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        }
      ],
      "name": "updateDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        }
      ],
      "name": "updateIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "withdrawLiquidityETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf83d7c304b9c661bfcec9978a6431905d023d235b32bc9ae7aea08cb573ec193",
  "receipt": {
    "to": null,
    "from": "0x0641bc55DDAb3b9636e82CbF87EDE3c3c533039d",
    "contractAddress": "0x2CBb4B9E98928B278475f7E9C07EB34DA42a53bC",
    "transactionIndex": 1,
    "gasUsed": "13553787",
    "logsBloom": "0x
    "blockHash": "0x93867d38bee52c1e178ad0700992cd0967d3a220463f9be80712bed495dd0490",
    "transactionHash": "0xf83d7c304b9c661bfcec9978a6431905d023d235b32bc9ae7aea08cb573ec193",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 40990274,
        "transactionHash": "0xf83d7c304b9c661bfcec9978a6431905d023d235b32bc9ae7aea08cb573ec193",
        "address": "0x2CBb4B9E98928B278475f7E9C07EB34DA42a53bC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000641bc55ddab3b9636e82cbf87ede3c3c533039d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x93867d38bee52c1e178ad0700992cd0967d3a220463f9be80712bed495dd0490"
      }
    ],
    "blockNumber": 40990274,
    "cumulativeGasUsed": "13553787",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9efA34A3C8978A2FA768FE17AAC9FcC56642d0Ab",
    "0xaBBc5F99639c9B6bCb58544ddf04EFA6802F4064",
    "0x489ee077994B6658eAfA855C308275EAd8097C4A",
    "0x09f77e8a13de9a35a7231028187e9fd5db8a2acb",
    "0xb87a436B93fFE9D75c5cFA7bAcFff96430b09868",
    [
      "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
      "0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",
      "0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0",
      "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
      "0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",
      "0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0"
    ],
    [
      "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
      "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
      "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
      "0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F"
    ],
    [
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "9739e05bcb8aa80dd0020067fbe1fe18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAccountManagerToken\",\"name\":\"_accountManagerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IOrderBook\",\"name\":\"_orderBook\",\"type\":\"address\"},{\"internalType\":\"contract IPositionRouter\",\"name\":\"_positionRouter\",\"type\":\"address\"},{\"internalType\":\"address[8]\",\"name\":\"_indexTokenArr\",\"type\":\"address[8]\"},{\"internalType\":\"address[4]\",\"name\":\"_stablecoinsArray\",\"type\":\"address[4]\"},{\"internalType\":\"bool[8]\",\"name\":\"_permissions\",\"type\":\"bool[8]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountManagerToken\",\"outputs\":[{\"internalType\":\"contract IAccountManagerToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"}],\"name\":\"createDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawETH\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_callbackTarget\",\"type\":\"address\"}],\"name\":\"createDecreasePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createDoppelgangerGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldWrap\",\"type\":\"bool\"}],\"name\":\"createIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_referralCode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackTarget\",\"type\":\"address\"}],\"name\":\"createIncreasePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_referralCode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackTarget\",\"type\":\"address\"}],\"name\":\"createIncreasePositionETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ddl_gmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"doppelgangerMap\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realisedPnl\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProfit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastIncreasedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPositionDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isProfit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexTokenArr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"indexTokenBySymbol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLong\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keyData\",\"outputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"symbol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"doppelgangerContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"contract IOrderBook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionRouter\",\"outputs\":[{\"internalType\":\"contract IPositionRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setDDL_GMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"symbol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stablecoinsArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"symbolByIndexToken\",\"outputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"updateDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"updateIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidityETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"currentPrice(uint256)\":{\"params\":{\"id\":\"position ID\"}},\"getPosition(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"getPositionDelta(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDDL_GMX(address)\":{\"params\":{\"value\":\"the address of DDL_GMX*\"}},\"setPermission(uint8,bool)\":{\"params\":{\"symbol\":\"trough name\",\"value\":\"true or false *\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDecreasePosition(address[],address,uint256,uint256,bool,uint256,uint256,uint256,bool,address)\":{\"notice\":\"used to decrease position on GMX*\"},\"createDoppelgangerGMX()\":{\"notice\":\"creates Doppelganger account for the user*\"},\"createIncreasePosition(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32,address)\":{\"notice\":\"used to increase position on GMX*\"},\"createIncreasePositionETH(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32,address)\":{\"notice\":\"used to increase position on GMX (only ETH)*\"},\"currentPrice(uint256)\":{\"notice\":\"return currentPrice for the asset*\"},\"getPosition(uint256)\":{\"notice\":\"returns getPosition by the collateral\"},\"getPositionDelta(uint256)\":{\"notice\":\"returns getPositionDelta from GMX by the collateral ID\"},\"setDDL_GMX(address)\":{\"notice\":\"set new DDL_GMX address\"},\"setPermission(uint8,bool)\":{\"notice\":\"set permissions for trading pairs\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AccountManager.sol\":\"AccountManager\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AccountManager.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAccountManagerToken.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./Doppelganger.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract AccountManager is\\n    Ownable,\\n    IAccountManager\\n{\\n    IAccountManagerToken public immutable accountManagerToken;\\n    address public ddl_gmx;\\n    address public immutable router;\\n    IVault public immutable vault;\\n    IOrderBook public immutable orderBook;\\n    IPositionRouter public immutable positionRouter;\\n    mapping(address => address payable) public doppelgangerMap;\\n    struct KeyInformation {\\n        Symbols symbol;\\n        address doppelgangerContract;\\n        bool isLong;\\n        address indexToken;\\n        address user;\\n    }\\n    mapping(uint256 => KeyInformation) public override keyData;\\n    mapping(address => mapping(bool => Symbols)) public symbolByIndexToken;\\n    mapping(Symbols => address) public override indexTokenBySymbol;\\n    mapping(Symbols => bool) public permissions;\\n\\n    address[8] public indexTokenArr;\\n    address[4] public stablecoinsArray;\\n\\n    constructor(\\n        IAccountManagerToken _accountManagerToken,\\n        address _router, \\n        IVault _vault,\\n        IOrderBook _orderBook,\\n        IPositionRouter _positionRouter,\\n        address[8] memory _indexTokenArr,\\n        address[4] memory _stablecoinsArray,\\n        bool[8] memory _permissions\\n    ) {\\n        accountManagerToken = _accountManagerToken;\\n        router = _router;\\n        vault = _vault;\\n        orderBook = _orderBook;\\n        positionRouter = _positionRouter;\\n        indexTokenArr = _indexTokenArr;\\n        stablecoinsArray = _stablecoinsArray;\\n        for (uint256 i = 0; i < 8; i++) {\\n            symbolByIndexToken[_indexTokenArr[i]][i < 4 ? true: false] = Symbols(i);\\n            indexTokenBySymbol[Symbols(i)] = _indexTokenArr[i];\\n            permissions[Symbols(i)] = _permissions[i]; \\n        }\\n    }\\n\\n    modifier checkDoppelganger() {\\n        require(address(0) != doppelgangerMap[msg.sender], \\\"you don't have Doppelganger\\\");\\n        _;\\n    }\\n\\n    function checkPermissions(address _indexToken, bool _isLong) private {\\n        require(permissions[symbolByIndexToken[_indexToken][_isLong]], \\\"trading on this pair is stopped\\\");\\n    }\\n\\n    /**\\n     * @notice set new DDL_GMX address\\n     * @param value the address of DDL_GMX\\n     **/\\n    function setDDL_GMX(address value) external onlyOwner {\\n        ddl_gmx = value;\\n    }\\n\\n    /**\\n     * @notice set permissions for trading pairs\\n     * @param symbol trough name\\n     * @param value true or false \\n     **/\\n     function setPermission(Symbols symbol, bool value) external onlyOwner {\\n        permissions[symbol] = value;\\n    }\\n\\n    /**\\n     * @notice creates Doppelganger account for the user\\n     **/\\n    function createDoppelgangerGMX() public {\\n        require(\\n            doppelgangerMap[msg.sender] == address(0),\\n            \\\"DoppelGanger for this address already exist\\\"\\n        );\\n        uint256 id = accountManagerToken.tokenId();\\n        accountManagerToken.addTokenId(8);\\n        uint256[8] memory keys;\\n        for (uint256 key = 0; key < 8; key++) {\\n            keys[key] = (id + key);\\n        }\\n        Doppelganger newContract = new Doppelganger(\\n            positionRouter,\\n            router,\\n            orderBook,\\n            keys,\\n            indexTokenArr,\\n            stablecoinsArray,\\n            address(this),\\n            address(accountManagerToken),\\n            ddl_gmx\\n        );\\n        doppelgangerMap[msg.sender] =  payable(address(newContract));\\n        for (uint256 i = 0; i < 8; i++) {\\n            keyData[id + i] = KeyInformation(\\n                Symbols(i),\\n                address(newContract),\\n                i < 4 ? true : false,\\n                indexTokenArr[i],\\n                msg.sender\\n            );\\n            accountManagerToken.mint(msg.sender, id + i);\\n        }\\n    }\\n\\n    /**\\n     * @notice returns getPositionDelta from GMX by the collateral ID\\n     * @param id collateral ID\\n     **/\\n    function getPositionDelta(uint256 id)\\n        public\\n        view\\n        override\\n        returns (bool isProfit, uint256 profit)\\n    {\\n        return\\n            vault.getPositionDelta(\\n                keyData[id].doppelgangerContract,\\n                keyData[id].isLong\\n                    ? keyData[id].indexToken\\n                    : stablecoinsArray[0],\\n                keyData[id].indexToken,\\n                keyData[id].isLong\\n            );\\n    }\\n\\n    /**\\n     * @notice returns getPosition by the collateral\\n     * @param id collateral ID\\n     **/\\n    function getPosition(uint256 id)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 size,\\n            uint256 collateral,\\n            uint256 averagePrice,\\n            uint256 entryFundingRate,\\n            uint256 reserveAmount,\\n            uint256 realisedPnl,\\n            bool isProfit,\\n            uint256 lastIncreasedTime\\n        )\\n    {\\n        (\\n            size,\\n            collateral,\\n            averagePrice,\\n            entryFundingRate,\\n            reserveAmount,\\n            realisedPnl,\\n            isProfit,\\n            lastIncreasedTime\\n        ) = vault.getPosition(\\n            keyData[id].doppelgangerContract,\\n            keyData[id].isLong\\n                ? keyData[id].indexToken\\n                : stablecoinsArray[0],\\n            keyData[id].indexToken,\\n            keyData[id].isLong\\n        );\\n    }\\n\\n    function isLong(uint256 id) public view override returns (bool) {\\n        return keyData[id].isLong;\\n    }\\n\\n    /**\\n     * @param id position ID\\n     * @notice return currentPrice for the asset\\n     **/\\n    function currentPrice(uint256 id) public view override returns (uint256) {\\n        if (isLong(id)) {\\n            return vault.getMaxPrice(keyData[id].indexToken);\\n        }\\n        return vault.getMinPrice(keyData[id].indexToken);\\n    }\\n\\n    /**\\n     * @notice used to increase position on GMX\\n     **/\\n    function createIncreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable checkDoppelganger {\\n        checkPermissions(_indexToken, _isLong);\\n        ERC20(_path[0]).transferFrom(\\n            msg.sender,\\n            doppelgangerMap[msg.sender],\\n            _amountIn\\n        );\\n        Doppelganger(doppelgangerMap[msg.sender]).createIncreasePosition{value: msg.value}(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    /**\\n     * @notice used to increase position on GMX (only ETH)\\n     **/\\n    function createIncreasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable checkDoppelganger {\\n        checkPermissions(_indexToken, _isLong);\\n        Doppelganger(doppelgangerMap[msg.sender]).createIncreasePositionETH{value: msg.value}(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    /**\\n     * @notice used to decrease position on GMX\\n     **/\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable override checkDoppelganger {\\n        Doppelganger(doppelgangerMap[msg.sender]).createDecreasePosition{value: msg.value}(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            _withdrawETH,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createIncreaseOrder(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap\\n    ) external payable checkDoppelganger {\\n        checkPermissions(_indexToken, _isLong);\\n        if (!_shouldWrap) {\\n            ERC20(_path[0]).transferFrom(\\n                msg.sender,\\n                doppelgangerMap[msg.sender],\\n                _amountIn\\n            );\\n        }\\n        Doppelganger(doppelgangerMap[msg.sender]).createIncreaseOrder{value: msg.value}(\\n            msg.sender,\\n            _path,\\n            _amountIn,\\n            _indexToken,\\n            _minOut,\\n            _sizeDelta,\\n            _collateralToken,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee,\\n            _shouldWrap\\n        );\\n    }\\n\\n    function updateIncreaseOrder(\\n        uint256 _orderIndex, \\n        uint256 _sizeDelta, \\n        uint256 _triggerPrice, \\n        bool _triggerAboveThreshold\\n    ) external checkDoppelganger {\\n        (,,,address indexToken,,bool isLong,,,) = orderBook.getIncreaseOrder(doppelgangerMap[msg.sender], _orderIndex);\\n        checkPermissions(indexToken, isLong);\\n        Doppelganger(doppelgangerMap[msg.sender]).updateIncreaseOrder(\\n            msg.sender,\\n            indexToken,\\n            isLong,\\n            _orderIndex, \\n            _sizeDelta, \\n            _triggerPrice, \\n            _triggerAboveThreshold\\n        );\\n    }\\n\\n    function cancelIncreaseOrder(uint256 _orderIndex) external checkDoppelganger {\\n        (,,,address indexToken,,bool isLong,,,) = orderBook.getIncreaseOrder(doppelgangerMap[msg.sender], _orderIndex);\\n        Doppelganger(doppelgangerMap[msg.sender]).cancelIncreaseOrder(msg.sender, indexToken, isLong, _orderIndex);\\n    }\\n \\n    function createDecreaseOrder(\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee\\n    ) external payable checkDoppelganger {\\n        Doppelganger(doppelgangerMap[msg.sender]).createDecreaseOrder{value: msg.value}(\\n            msg.sender,\\n            _indexToken,\\n            _sizeDelta,\\n            _collateralToken,\\n            _collateralDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee\\n        );\\n    }\\n\\n    function updateDecreaseOrder(\\n        uint256 _orderIndex, \\n        uint256 _collateralDelta, \\n        uint256 _sizeDelta, \\n        uint256 _triggerPrice, \\n        bool _triggerAboveThreshold\\n    ) external checkDoppelganger {\\n        (,,address indexToken,,bool isLong,,,) = orderBook.getDecreaseOrder(doppelgangerMap[msg.sender], _orderIndex);\\n        Doppelganger(doppelgangerMap[msg.sender]).updateDecreaseOrder(\\n            msg.sender,\\n            indexToken,\\n            isLong,\\n            _orderIndex,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n\\n    function cancelDecreaseOrder(uint256 _orderIndex) external checkDoppelganger {\\n        (,,address indexToken,,bool isLong,,,) = orderBook.getDecreaseOrder(doppelgangerMap[msg.sender], _orderIndex);\\n        Doppelganger(doppelgangerMap[msg.sender]).cancelDecreaseOrder(msg.sender, indexToken, isLong, _orderIndex);\\n    }\\n\\n    function withdrawLiquidity(uint256 id, address tokenAddress) public checkDoppelganger {\\n        Doppelganger(doppelgangerMap[msg.sender]).withdrawLiquidity(msg.sender, keyData[id].indexToken, keyData[id].isLong, tokenAddress);\\n    }\\n\\n    function withdrawLiquidityETH(uint256 id) public checkDoppelganger {\\n        Doppelganger(doppelgangerMap[msg.sender]).withdrawLiquidityETH(msg.sender, keyData[id].indexToken, keyData[id].isLong);\\n    }\\n}\\n\",\"keccak256\":\"0x5ce776ea5b8f30f2d67ac459634ec2fed016c2df96faba658b72e297f5dbb2fb\"},\"contracts/Doppelganger.sol\":{\"content\":\"pragma solidity 0.8.6||0.6.12;\\n\\nimport \\\"./interfaces/IPositionRouter.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"./interfaces/IAccountManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Doppelganger {\\n    using SafeERC20 for IERC20;\\n\\n    receive() external payable{}\\n\\n    IPositionRouter public positionRouter;\\n    IOrderBook public orderBook;\\n    mapping(address => mapping(bool => uint256)) public keyByIndexToken;\\n    mapping(uint256  => bool) public keys;\\n    ERC721 public GMXPT;\\n    address public immutable router;\\n    address[4] public indexTokenArray;\\n    address[4] public stablecoinsArray;\\n    address public accountManager;\\n    address public ddl_gmx;\\n    bool public isApproved = false;\\n\\n    constructor(\\n        IPositionRouter _positionRouter,\\n        address _router,\\n        IOrderBook _orderBook,\\n        uint256[8] memory keyArray,\\n        address[8] memory _indexTokenArray,\\n        address[4] memory _stablecoinsArray,\\n        address _accountManager,\\n        address _accountManagerToken,\\n        address _ddl_gmx\\n    ) {\\n        positionRouter = _positionRouter;\\n        router = _router;\\n        orderBook = _orderBook;\\n        for (uint256 i = 0; i < 8; i++) {\\n            if (i < 4) {\\n                indexTokenArray[i] = _indexTokenArray[i];\\n                stablecoinsArray[i] = _stablecoinsArray[i];\\n            }\\n            keyByIndexToken[_indexTokenArray[i]][\\n                i < 4 ? true : false\\n            ] = keyArray[i];\\n            keys[keyArray[i]] = true; \\n        }\\n        GMXPT = ERC721(_accountManagerToken);\\n        accountManager = _accountManager;\\n        ddl_gmx = _ddl_gmx;\\n    }\\n\\n    function _checkKeyAndMsgSender(address user, address _indexToken, bool _isLong) private {\\n        require(\\n            GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]) == user,\\n            \\\"you don't have a key\\\"\\n        );\\n        require(keys[keyByIndexToken[_indexToken][_isLong]], \\\"invalid key\\\");\\n        if (msg.sender != ddl_gmx) {\\n            require(msg.sender == accountManager, \\\"invalid msg.sender\\\");\\n        }\\n    }\\n\\n    function createIncreasePosition(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        positionRouter.createIncreasePosition{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createIncreasePositionETH(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        positionRouter.createIncreasePositionETH{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createDecreasePosition(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable {\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        require(keyOwner == user, \\\"you don't have a key\\\");\\n        if (msg.sender != ddl_gmx) {\\n            require(msg.sender == accountManager, \\\"invalid msg.sender\\\");\\n        }\\n        positionRouter.createDecreasePosition{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            keyOwner,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            _withdrawETH,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createIncreaseOrder(\\n        address user,\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        orderBook.createIncreaseOrder{value: msg.value}(\\n            _path,\\n            _amountIn,\\n            _indexToken,\\n            _minOut,\\n            _sizeDelta,\\n            _collateralToken,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee,\\n            _shouldWrap\\n        );\\n    }\\n\\n    function updateIncreaseOrder(\\n        address user, \\n        address _indexToken, \\n        bool _isLong, \\n        uint256 _orderIndex, \\n        uint256 _sizeDelta, \\n        uint256 _triggerPrice, \\n        bool _triggerAboveThreshold\\n    ) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        orderBook.updateIncreaseOrder(_orderIndex, _sizeDelta, _triggerPrice, _triggerAboveThreshold);\\n    }\\n\\n    function cancelIncreaseOrder(address user, address _indexToken, bool _isLong, uint256 _orderIndex) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        (\\n            address purchaseToken, \\n            uint256 purchaseTokenAmount,\\n            ,\\n            ,\\n            ,\\n            bool isLong,\\n            ,\\n            ,\\n            uint256 executionFee\\n        ) = orderBook.getIncreaseOrder(address(this), _orderIndex);\\n        orderBook.cancelIncreaseOrder(_orderIndex);\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        ERC20(purchaseToken).transfer(\\n            keyOwner,\\n            purchaseTokenAmount\\n        );\\n        ERC20(indexTokenArray[0]).transfer(\\n            keyOwner,\\n            executionFee\\n        );\\n    }\\n\\n    function createDecreaseOrder(\\n        address user,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        orderBook.createDecreaseOrder{value: msg.value}(\\n            _indexToken,\\n            _sizeDelta,\\n            _collateralToken,\\n            _collateralDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n\\n    function withdrawLiquidity(address user, address _indexToken, bool _isLong, address tokenAddress) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        ERC20(tokenAddress).transfer(\\n            keyOwner,\\n            ERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    function withdrawLiquidityETH(address user, address _indexToken, bool _isLong) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        payable(keyOwner).transfer(address(this).balance);\\n    }\\n\\n    function cancelDecreaseOrder(address user, address _indexToken, bool _isLong, uint256 _orderIndex) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        (\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint256 executionFee\\n        ) = orderBook.getDecreaseOrder(address(this), _orderIndex);\\n        orderBook.cancelDecreaseOrder(_orderIndex);\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        ERC20(indexTokenArray[0]).transfer(\\n            keyOwner,\\n            executionFee\\n        );\\n    }\\n\\n    function updateDecreaseOrder(\\n        address user, \\n        address _indexToken, \\n        bool _isLong, \\n        uint256 _orderIndex,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        orderBook.updateDecreaseOrder(\\n            _orderIndex,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n\\n    /**\\n     * @param value maxUnit256\\n     **/\\n    function approveAll(uint256 value) public {\\n        IRouter(router).approvePlugin(address(positionRouter));\\n        IRouter(router).approvePlugin(address(orderBook));\\n        for (uint256 i = 0; i < 4; i++) {\\n            ERC20(indexTokenArray[i]).approve(address(positionRouter), value);\\n            ERC20(indexTokenArray[i]).approve(router, value);\\n            ERC20(stablecoinsArray[i]).approve(address(positionRouter), value);\\n            ERC20(stablecoinsArray[i]).approve(router, value);\\n        }\\n        isApproved = true;\\n    }\\n}\\n\",\"keccak256\":\"0xcc684c2770b30b9c72d0f64235fd946bfb95c029479cc52ddb7ae1109afe65ed\"},\"contracts/interfaces/IAccountManager.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IAccountManager {\\n    enum Symbols {\\n        ETH_USD_LONG,\\n        BTC_USD_LONG,\\n        LINK_USD_LONG,\\n        UNI_USD_LONG,\\n        ETH_USD_SHORT,\\n        BTC_USD_SHORT,\\n        LINK_USD_SHORT,\\n        UNI_USD_SHORT\\n    }\\n    function keyData(uint256 id) external returns (\\n        Symbols symbol, \\n        address doppelgangerContract, \\n        bool isLong,\\n        address indexToken,\\n        address user\\n    );\\n    function indexTokenBySymbol(Symbols symbol) external returns (address indexToken);\\n    function getPositionDelta(uint256 id) external view returns (bool isProfit, uint256 profit);\\n    function getPosition(uint256 id) external view returns (\\n        uint256 size, \\n        uint256 collateral, \\n        uint256 averagePrice, \\n        uint256 entryFundingRate, \\n        uint256 reserveAmount, \\n        uint256 realisedPnl,\\n        bool isProfit, \\n        uint256 lastIncreasedTime\\n    );\\n    function currentPrice(uint256 id) external view returns (uint256 price);\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable;\\n\\n    function isLong(uint256 id) external view returns (bool);\\n}\",\"keccak256\":\"0x23d7f1ca73ab5ee05f121c70722ef40a9330c25ef9d193de24e9da32a3b32559\"},\"contracts/interfaces/IAccountManagerToken.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IAccountManagerToken {\\n    function mint(address to, uint256 id) external;\\n    function addTokenId(uint256 value) external;\\n    function tokenId() external returns (uint256);\\n}\",\"keccak256\":\"0x09315b038d6ecc380c256ce8d241e367882cdeb86ea48fb3eafcc451eb926d3b\"},\"contracts/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IOrderBook {\\n\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\\n        address path0, \\n        address path1,\\n        address path2,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken, \\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function createIncreaseOrder(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap\\n    ) external payable;\\n    function cancelIncreaseOrder(uint256 _orderIndex) external;\\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\\n    function updateIncreaseOrder(uint256 _orderIndex, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external;\\n\\n    function createDecreaseOrder(\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external payable;\\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\\n    function cancelDecreaseOrder(uint256 _orderIndex) external;\\n    function updateDecreaseOrder(\\n        uint256 _orderIndex,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external;\\n\\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\\n}\\n\",\"keccak256\":\"0x00c439d23a66e4e44ec7e16dc8d46e2fe041c3ae2bbd72ce70172dd8d781c766\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IPositionRouter {\\n    function increasePositionRequestKeysStart() external returns (uint256);\\n    function decreasePositionRequestKeysStart() external returns (uint256);\\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function executeIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function cancelIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function executeDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function cancelDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function createIncreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable;\\n    function createIncreasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable;\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable;\\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\\n    function getRequestKey(address _account, uint256 _index) external pure returns (bytes32);\\n    function decreasePositionsIndex(address _account) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x70910123732b5068f4c441f9f65aef17ee660bbf8ad17ac94f5170398dc6b826\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n    function approvePlugin(address _plugin) external;\\n}\\n\",\"keccak256\":\"0x8496939c59721c4414a6825788f56df0479e491374a8459c8a4d731577f07fae\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12 || 0.8.6;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function getPositionDelta(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0xcbc0ac4af00aa8e19477deae52816a379849b934f3c53421a2df6aafa14034b0\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12 || 0.8.6;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfe7570540294503e8fca49c9f0c78731fb495b59dc1b88ef8396482cebbbba94\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162005a0f38038062005a0f83398101604081905262000035916200047a565b620000403362000268565b6001600160601b0319606089811b821660805288811b821660a05287811b821660c05286811b821660e05285901b1661010052620000826007846008620002b8565b5062000092600f83600462000315565b5060005b60088110156200025957806007811115620000b557620000b5620005ec565b60046000868460088110620000ce57620000ce62000602565b60200201516001600160a01b03166001600160a01b031681526020019081526020016000206000600484106200010657600062000109565b60015b151581526020810191909152604001600020805460ff19166001836007811115620001385762000138620005ec565b021790555083816008811062000152576200015262000602565b602002015160056000836007811115620001705762000170620005ec565b6007811115620001845762000184620005ec565b6007811115620001985762000198620005ec565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550818160088110620001df57620001df62000602565b602002015160066000836007811115620001fd57620001fd620005ec565b6007811115620002115762000211620005ec565b6007811115620002255762000225620005ec565b81526020810191909152604001600020805460ff1916911515919091179055806200025081620005c2565b91505062000096565b50505050505050505062000631565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b826008810192821562000303579160200282015b828111156200030357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002cc565b50620003119291506200035f565b5090565b82600481019282156200030357916020028201828111156200030357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002cc565b5b8082111562000311576000815560010162000360565b600082601f8301126200038857600080fd5b604051608081016001600160401b0381118282101715620003b957634e487b7160e01b600052604160045260246000fd5b604052808360808101861015620003cf57600080fd5b60005b6004811015620003ff578151620003e98162000618565b83526020928301929190910190600101620003d2565b509195945050505050565b600082601f8301126200041c57600080fd5b620004266200058a565b808385610100860111156200043a57600080fd5b6000805b60088110156200046e578251801515811462000458578283fd5b855260209485019492909201916001016200043e565b50919695505050505050565b600080600080600080600080610320898b0312156200049857600080fd5b8851620004a58162000618565b809850506020808a0151620004ba8162000618565b60408b0151909850620004cd8162000618565b60608b0151909750620004e08162000618565b60808b0151909650620004f38162000618565b945060bf8a018b136200050557600080fd5b6200050f6200058a565b8060a08c016101a08d018e8111156200052757600080fd5b60005b600881101562000554578251620005418162000618565b855293850193918501916001016200052a565b50829750620005648f8262000376565b965050505050506200057b8a6102208b016200040a565b90509295985092959890939650565b60405161010081016001600160401b0381118282101715620005bc57634e487b7160e01b600052604160045260246000fd5b60405290565b6000600019821415620005e557634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146200062e57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c615321620006ee600039600081816103930152610d830152600081816104b001528181610dc5015281816111000152818161164c0152818161184f01526119a601526000818161083a015281816109a3015281816114f1015281816115aa0152611cfe0152600081816108040152610da401526000818161069401528181610c1801528181610cc601528181610dec0152610fe201526153216000f3fe608060405260043610620002225760003560e01c80638da5cb5b1162000123578063b7d3211011620000ad578063eb02c3011162000078578063eb02c3011462000751578063f2ae372f14620007b4578063f2fde38b14620007cb578063f887ea4014620007f0578063fbfa77cf146200082657600080fd5b8063b7d321101462000646578063be1528611462000680578063c7960d3514620006b6578063e6e6dd2f14620006db57600080fd5b8063a226b48311620000ee578063a226b4831462000595578063a397ea5414620005d0578063a4cf54a214620005f5578063b142a4b0146200062f57600080fd5b80638da5cb5b14620005065780639983ee1b14620005265780639e71527d146200054b5780639e71b0f0146200057057600080fd5b806355c32a3c11620001b157806368fc0c9a116200017c57806368fc0c9a14620004115780636c5e2fd91462000436578063715018a61462000484578063776af5ba146200049c5780637a3c4c1714620004d257600080fd5b806355c32a3c146200036857806361ef161f146200037f5780636476b83714620003b557806367e92f9114620003fa57600080fd5b806332d53b1711620001f257806332d53b1714620002d757806335180f5f1462000314578063449bd2cc146200032b57806347e0bbd0146200034357600080fd5b806230e1b514620002275780630cd790f714620002695780632d6a9923146200028b5780633264fee514620002b2575b600080fd5b3480156200023457600080fd5b506200024c620002463660046200279c565b6200085c565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200027657600080fd5b506001546200024c906001600160a01b031681565b3480156200029857600080fd5b50620002b0620002aa3660046200279c565b6200087d565b005b348015620002bf57600080fd5b50620002b0620002d13660046200229b565b6200095c565b348015620002e457600080fd5b50620002fc620002f63660046200279c565b62000988565b60408051921515835260208301919091520162000260565b620002b062000325366004620024c6565b62000acc565b3480156200033857600080fd5b50620002b062000b98565b3480156200035057600080fd5b50620002b0620003623660046200279c565b62001090565b620002b062000379366004620023a7565b62001222565b3480156200038c57600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b348015620003c257600080fd5b50620003e9620003d43660046200275f565b60066020526000908152604090205460ff1681565b604051901515815260200162000260565b620002b06200040b3660046200258e565b62001311565b3480156200041e57600080fd5b50620002b062000430366004620027d0565b620013a9565b3480156200044357600080fd5b506200047562000455366004620022c2565b600460209081526000928352604080842090915290825290205460ff1681565b60405162000260919062002bc5565b3480156200049157600080fd5b50620002b062001488565b348015620004a957600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b348015620004df57600080fd5b50620004f7620004f13660046200279c565b620014a0565b60405190815260200162000260565b3480156200051357600080fd5b506000546001600160a01b03166200024c565b3480156200053357600080fd5b50620002b062000545366004620027f8565b620015dc565b3480156200055857600080fd5b50620002b06200056a3660046200277d565b62001784565b3480156200057d57600080fd5b50620002b06200058f3660046200279c565b620017df565b348015620005a257600080fd5b50620003e9620005b43660046200279c565b600090815260036020526040902054600160a81b900460ff1690565b348015620005dd57600080fd5b50620002b0620005ef3660046200283c565b62001936565b3480156200060257600080fd5b506200024c620006143660046200229b565b6002602052600090815260409020546001600160a01b031681565b620002b06200064036600462002638565b62001afb565b3480156200065357600080fd5b506200024c620006653660046200275f565b6005602052600090815260409020546001600160a01b031681565b3480156200068d57600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b348015620006c357600080fd5b506200024c620006d53660046200279c565b62001cc6565b348015620006e857600080fd5b506200073e620006fa3660046200279c565b60036020526000908152604090208054600182015460029092015460ff808316936001600160a01b036101008504811694600160a81b900490921692908216911685565b6040516200026095949392919062002bd5565b3480156200075e57600080fd5b5062000776620007703660046200279c565b62001cd7565b604080519889526020890197909752958701949094526060860192909252608085015260a0840152151560c083015260e08201526101000162000260565b620002b0620007c53660046200258e565b62001e4b565b348015620007d857600080fd5b50620002b0620007ea3660046200229b565b62001fa5565b348015620007fd57600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156200083357600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b600f81600481106200086d57600080fd5b01546001600160a01b0316905081565b336000908152600260205260409020546001600160a01b0316620008be5760405162461bcd60e51b8152600401620008b59062002c16565b60405180910390fd5b33600081815260026020908152604080832054858452600390925291829020600181015490549251632583ee6f60e01b815260048101949094526001600160a01b039081166024850152600160a81b90920460ff16151560448401521690632583ee6f90606401600060405180830381600087803b1580156200094057600080fd5b505af115801562000955573d6000803e3d6000fd5b5050505050565b6200096662002024565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526003602052604081205481906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916345a6f370916101008204169060ff600160a81b90910416620009f457600f546001600160a01b031662000a10565b6000868152600360205260409020600101546001600160a01b03165b6000878152600360205260409081902060018101549054915160e086901b6001600160e01b03191681526001600160a01b0394851660048201529284166024840152929092166044820152600160a81b90910460ff1615156064820152608401604080518083038186803b15801562000a8857600080fd5b505afa15801562000a9d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ac391906200272e565b91509150915091565b336000908152600260205260409020546001600160a01b031662000b045760405162461bcd60e51b8152600401620008b59062002c16565b3360008181526002602052604090819020549051636f7e879960e01b81526001600160a01b0390911691636f7e879991349162000b58918f908f908f908f908f908f908f908f908f908f90600401620029a6565b6000604051808303818588803b15801562000b7257600080fd5b505af115801562000b87573d6000803e3d6000fd5b505050505050505050505050505050565b336000908152600260205260409020546001600160a01b03161562000c145760405162461bcd60e51b815260206004820152602b60248201527f446f7070656c47616e67657220666f722074686973206164647265737320616c60448201526a1c9958591e48195e1a5cdd60aa1b6064820152608401620008b5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317d70f7c6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562000c7257600080fd5b505af115801562000c87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cad9190620027b6565b60405163fd0d101f60e01b8152600860048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fd0d101f90602401600060405180830381600087803b15801562000d1357600080fd5b505af115801562000d28573d6000803e3d6000fd5b5050505062000d366200218b565b60005b600881101562000d7e5762000d4f818462002c4d565b82826008811062000d645762000d6462002cb2565b60200201528062000d758162002c68565b91505062000d39565b5060007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846007600f307f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a90046001600160a01b031660405162000e2f90620021aa565b62000e439998979695949392919062002b14565b604051809103906000f08015801562000e60573d6000803e3d6000fd5b5033600090815260026020526040812080546001600160a01b0319166001600160a01b0384161790559091505b60088110156200108a576040518060a0016040528082600781111562000eb75762000eb762002c9c565b600781111562000ecb5762000ecb62002c9c565b8152602001836001600160a01b031681526020016004831062000ef057600062000ef3565b60015b151581526020016007836008811062000f105762000f1062002cb2565b01546001600160a01b03168152336020909101526003600062000f34848862002c4d565b8152602081019190915260400160002081518154829060ff1916600183600781111562000f655762000f6562002c9c565b02179055506020820151815460408401511515600160a81b0260ff60a81b196001600160a01b039384166101000216610100600160b01b03199092169190911717825560608301516001830180549183166001600160a01b03199283161790556080909301516002909201805492821692909316919091179091557f0000000000000000000000000000000000000000000000000000000000000000166340c10f193362001014848862002c4d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156200105b57600080fd5b505af115801562001070573d6000803e3d6000fd5b505050508080620010819062002c68565b91505062000e8d565b50505050565b336000908152600260205260409020546001600160a01b0316620010c85760405162461bcd60e51b8152600401620008b59062002c16565b3360009081526002602052604080822054905163d3bab1d160e01b81526001600160a01b0391821660048201526024810184905282917f0000000000000000000000000000000000000000000000000000000000000000169063d3bab1d1906044016101206040518083038186803b1580156200114457600080fd5b505afa15801562001159573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200117f919062002300565b50503360008181526002602052604090819020549051635997465b60e11b815260048101929092526001600160a01b0380871660248401528415156044840152606483018d9052959a5092985093909116955063b32e8cb694505060849091019150620011e99050565b600060405180830381600087803b1580156200120457600080fd5b505af115801562001219573d6000803e3d6000fd5b50505050505050565b336000908152600260205260409020546001600160a01b03166200125a5760405162461bcd60e51b8152600401620008b59062002c16565b336000818152600260205260409081902054905163c8fddadb60e01b815260048101929092526001600160a01b038a81166024840152604483018a905288811660648401526084830188905286151560a484015260c4830186905284151560e48401526101048301849052169063c8fddadb903490610124016000604051808303818588803b158015620012ed57600080fd5b505af115801562001302573d6000803e3d6000fd5b50505050505050505050505050565b336000908152600260205260409020546001600160a01b0316620013495760405162461bcd60e51b8152600401620008b59062002c16565b62001355898662002080565b336000818152600260205260409081902054905163da91dfd560e01b81526001600160a01b039091169163da91dfd591349162000b58918f908f908f908f908f908f908f908f908f908f9060040162002a1e565b336000908152600260205260409020546001600160a01b0316620013e15760405162461bcd60e51b8152600401620008b59062002c16565b33600081815260026020908152604080832054868452600390925291829020600181015490549251633436f13960e21b815260048101949094526001600160a01b039081166024850152600160a81b90920460ff16151560448401528382166064840152169063d0dbc4e490608401600060405180830381600087803b1580156200146b57600080fd5b505af115801562001480573d6000803e3d6000fd5b505050505050565b6200149262002024565b6200149e60006200213b565b565b600081815260036020526040812054600160a81b900460ff1615620015785760008281526003602052604090819020600101549051637092736960e11b81526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063e124e6d2906024015b60206040518083038186803b1580156200153757600080fd5b505afa1580156200154c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015729190620027b6565b92915050565b600082815260036020526040908190206001015490516340d3096b60e11b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000909116906381a612d6906024016200151e565b336000908152600260205260409020546001600160a01b0316620016145760405162461bcd60e51b8152600401620008b59062002c16565b3360009081526002602052604080822054905163d3bab1d160e01b81526001600160a01b0391821660048201526024810187905282917f0000000000000000000000000000000000000000000000000000000000000000169063d3bab1d1906044016101206040518083038186803b1580156200169057600080fd5b505afa158015620016a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016cb919062002300565b5050509550509450505050620016e2828262002080565b336000818152600260205260409081902054905163fc86da8960e01b815260048101929092526001600160a01b0384811660248401528315156044840152606483018990526084830188905260a4830187905285151560c4840152169063fc86da899060e401600060405180830381600087803b1580156200176357600080fd5b505af115801562001778573d6000803e3d6000fd5b50505050505050505050565b6200178e62002024565b8060066000846007811115620017a857620017a862002c9c565b6007811115620017bc57620017bc62002c9c565b81526020810191909152604001600020805460ff19169115159190911790555050565b336000908152600260205260409020546001600160a01b0316620018175760405162461bcd60e51b8152600401620008b59062002c16565b33600090815260026020526040808220549051630130197760e11b81526001600160a01b0391821660048201526024810184905282917f0000000000000000000000000000000000000000000000000000000000000000169063026032ee906044016101006040518083038186803b1580156200189357600080fd5b505afa158015620018a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018ce919062002435565b50503360008181526002602052604090819020549051633d5cab3b60e21b815260048101929092526001600160a01b0380871660248401528415156044840152606483018c905295995092975093909116945063f572acec93505060849091019050620011e9565b336000908152600260205260409020546001600160a01b03166200196e5760405162461bcd60e51b8152600401620008b59062002c16565b33600090815260026020526040808220549051630130197760e11b81526001600160a01b0391821660048201526024810188905282917f0000000000000000000000000000000000000000000000000000000000000000169063026032ee906044016101006040518083038186803b158015620019ea57600080fd5b505afa158015620019ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a25919062002435565b505033600081815260026020526040908190205490516345b5f94f60e01b81529599509297506001600160a01b039290921695506345b5f94f945062001abe9391925087918791508d908d908d908d908d906004016001600160a01b03988916815296909716602087015293151560408601526060850192909252608084015260a083015260c082015290151560e08201526101000190565b600060405180830381600087803b15801562001ad957600080fd5b505af115801562001aee573d6000803e3d6000fd5b5050505050505050505050565b336000908152600260205260409020546001600160a01b031662001b335760405162461bcd60e51b8152600401620008b59062002c16565b62001b3f898662002080565b8062001c08578a60008151811062001b5b5762001b5b62002cb2565b60209081029190910181015133600081815260029093526040928390205492516323b872dd60e01b815260048101919091526001600160a01b039283166024820152604481018d90529116906323b872dd90606401602060405180830381600087803b15801562001bcb57600080fd5b505af115801562001be0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c0691906200270e565b505b60026000336001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031663de26fdcd34338e8e8e8e8e8e8e8e8e8e8e6040518e63ffffffff1660e01b815260040162001c859c9b9a9998979695949392919062002a94565b6000604051808303818588803b15801562001c9f57600080fd5b505af115801562001cb4573d6000803e3d6000fd5b50505050505050505050505050505050565b600781600881106200086d57600080fd5b60008181526003602052604081205481908190819081908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691634a3f088d916101008204169060ff600160a81b9091041662001d4f57600f546001600160a01b031662001d6b565b60008c8152600360205260409020600101546001600160a01b03165b60008d8152600360205260409081902060018101549054915160e086901b6001600160e01b03191681526001600160a01b0394851660048201529284166024840152929092166044820152600160a81b90910460ff16151560648201526084016101006040518083038186803b15801562001de557600080fd5b505afa15801562001dfa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e2091906200288c565b809850819950829a50839b50849c50859d50869e50879f505050505050505050919395975091939597565b336000908152600260205260409020546001600160a01b031662001e835760405162461bcd60e51b8152600401620008b59062002c16565b62001e8f898662002080565b8960008151811062001ea55762001ea562002cb2565b60209081029190910181015133600081815260029093526040928390205492516323b872dd60e01b815260048101919091526001600160a01b039283166024820152604481018b90529116906323b872dd90606401602060405180830381600087803b15801562001f1557600080fd5b505af115801562001f2a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f5091906200270e565b503360008181526002602052604090819020549051634fbb66c360e01b81526001600160a01b0390911691634fbb66c391349162000b58918f908f908f908f908f908f908f908f908f908f9060040162002a1e565b62001faf62002024565b6001600160a01b038116620020165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620008b5565b62002021816200213b565b50565b6000546001600160a01b031633146200149e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620008b5565b6001600160a01b038216600090815260046020908152604080832084151584529091528120546006919060ff166007811115620020c157620020c162002c9c565b6007811115620020d557620020d562002c9c565b815260208101919091526040016000205460ff16620021375760405162461bcd60e51b815260206004820152601f60248201527f74726164696e67206f6e207468697320706169722069732073746f70706564006044820152606401620008b5565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061010001604052806008906020820280368337509192915050565b6125e88062002d0483390190565b8035620021c58162002cde565b919050565b600082601f830112620021dc57600080fd5b8135602067ffffffffffffffff80831115620021fc57620021fc62002cc8565b8260051b604051601f19603f8301168101818110848211171562002224576200222462002cc8565b604052848152838101925086840182880185018910156200224457600080fd5b600092505b8583101562002272576200225d81620021b8565b84529284019260019290920191840162002249565b50979650505050505050565b8035620021c58162002cf4565b803560088110620021c557600080fd5b600060208284031215620022ae57600080fd5b8135620022bb8162002cde565b9392505050565b60008060408385031215620022d657600080fd5b8235620022e38162002cde565b91506020830135620022f58162002cf4565b809150509250929050565b60008060008060008060008060006101208a8c0312156200232057600080fd5b89516200232d8162002cde565b60208b015160408c0151919a509850620023478162002cde565b60608b01519097506200235a8162002cde565b60808b015160a08c01519197509550620023748162002cf4565b60c08b015160e08c015191955093506200238e8162002cf4565b809250506101008a015190509295985092959850929598565b600080600080600080600080610100898b031215620023c557600080fd5b8835620023d28162002cde565b9750602089013596506040890135620023eb8162002cde565b9550606089013594506080890135620024048162002cf4565b935060a0890135925060c08901356200241d8162002cf4565b8092505060e089013590509295985092959890939650565b600080600080600080600080610100898b0312156200245357600080fd5b8851620024608162002cde565b60208a015160408b015191995097506200247a8162002cde565b60608a015160808b01519197509550620024948162002cf4565b60a08a015160c08b01519195509350620024ae8162002cf4565b8092505060e089015190509295985092959890939650565b6000806000806000806000806000806101408b8d031215620024e757600080fd5b8a3567ffffffffffffffff811115620024ff57600080fd5b6200250d8d828e01620021ca565b9a505060208b0135620025208162002cde565b985060408b0135975060608b0135965060808b0135620025408162002cf4565b955060a08b0135945060c08b0135935060e08b013592506101008b0135620025688162002cf4565b91506101208b01356200257b8162002cde565b809150509295989b9194979a5092959850565b6000806000806000806000806000806101408b8d031215620025af57600080fd5b8a3567ffffffffffffffff811115620025c757600080fd5b620025d58d828e01620021ca565b9a505060208b0135620025e88162002cde565b985060408b0135975060608b0135965060808b0135955060a08b01356200260f8162002cf4565b945060c08b0135935060e08b013592506101008b013591506101208b01356200257b8162002cde565b60008060008060008060008060008060006101608c8e0312156200265b57600080fd5b8b3567ffffffffffffffff8111156200267357600080fd5b620026818e828f01620021ca565b9b505060208c0135995060408c01356200269b8162002cde565b985060608c0135975060808c0135965060a08c0135620026bb8162002cde565b9550620026cb60c08d016200227e565b945060e08c01359350620026e36101008d016200227e565b92506101208c01359150620026fc6101408d016200227e565b90509295989b509295989b9093969950565b6000602082840312156200272157600080fd5b8151620022bb8162002cf4565b600080604083850312156200274257600080fd5b82516200274f8162002cf4565b6020939093015192949293505050565b6000602082840312156200277257600080fd5b620022bb826200228b565b600080604083850312156200279157600080fd5b620022e3836200228b565b600060208284031215620027af57600080fd5b5035919050565b600060208284031215620027c957600080fd5b5051919050565b60008060408385031215620027e457600080fd5b823591506020830135620022f58162002cde565b600080600080608085870312156200280f57600080fd5b8435935060208501359250604085013591506060850135620028318162002cf4565b939692955090935050565b600080600080600060a086880312156200285557600080fd5b8535945060208601359350604086013592506060860135915060808601356200287e8162002cf4565b809150509295509295909350565b600080600080600080600080610100898b031215620028aa57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151620024ae8162002cf4565b8060005b60048110156200108a5781546001600160a01b0316845260209093019260019182019101620028e5565b8060005b60088110156200108a5781546001600160a01b031684526020909301926001918201910162002913565b600081518084526020808501945080840160005b83811015620029785781516001600160a01b03168752958201959082019060010162002951565b509495945050505050565b60088110620029a257634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038c8116825261016060208301819052600091620029ce8483018f6200293d565b9c81166040850152606084019b909b525050608081019790975294151560a087015260c086019390935260e085019190915261010084015215156101208301529091166101409091015292915050565b6001600160a01b038c811682526101606020830181905260009162002a468483018f6200293d565b9c81166040850152606084019b909b525050608081019790975260a087019590955292151560c086015260e08501919091526101008401526101208301529091166101409091015292915050565b600060018060a01b03808f168352610180602084015262002aba61018084018f6200293d565b604084019d909d529a8b16606083015250608081019890985260a08801969096529390961660c086015290151560e08501526101008401529215156101208301526101408201929092529015156101609091015292915050565b6001600160a01b038a81168252898116602080840191909152908916604083015261034082019060608301908960005b600881101562002b635781518452928201929082019060010162002b44565b5050505062002b776101608301886200290f565b62002b87610260830187620028e1565b6001600160a01b0385166102e08301526001600160a01b0384166103008301526001600160a01b0383166103208301529a9950505050505050505050565b6020810162001572828462002983565b60a0810162002be5828862002983565b6001600160a01b03958616602083015293151560408201529184166060830152909216608090920191909152919050565b6020808252601b908201527f796f7520646f6e2774206861766520446f7070656c67616e6765720000000000604082015260600190565b6000821982111562002c635762002c6362002c86565b500190565b600060001982141562002c7f5762002c7f62002c86565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200202157600080fd5b80151581146200202157600080fdfe60a0604052600e805460ff60a01b191690553480156200001e57600080fd5b50604051620025e8380380620025e883398101604081905262000041916200036c565b600080546001600160a01b03808c166001600160a01b03199283161783556001600160601b031960608c901b1660805260018054918b16919092161790555b6008811015620002125760048110156200013357858160088110620000a957620000a9620004e1565b602002015160058260048110620000c457620000c4620004e1565b0180546001600160a01b0319166001600160a01b0392909216919091179055848160048110620000f857620000f8620004e1565b602002015160098260048110620001135762000113620004e1565b0180546001600160a01b0319166001600160a01b03929092169190911790555b868160088110620001485762000148620004e1565b602002015160026000888460088110620001665762000166620004e1565b60200201516001600160a01b03166001600160a01b031681526020019081526020016000206000600484106200019e576000620001a1565b60015b15151515815260200190815260200160002081905550600160036000898460088110620001d257620001d2620004e1565b6020020151815260200190815260200160002060006101000a81548160ff02191690831515021790555080806200020990620004b7565b91505062000080565b50600480546001600160a01b03199081166001600160a01b0394851617909155600d8054821694841694909417909355600e805490931691161790555062000510945050505050565b80516200026881620004f7565b919050565b600082601f8301126200027f57600080fd5b604051608081016001600160401b0381118282101715620002b057634e487b7160e01b600052604160045260246000fd5b604052808360808101861015620002c657600080fd5b60005b6004811015620002f6578151620002e081620004f7565b83526020928301929190910190600101620002c9565b509195945050505050565b600082601f8301126200031357600080fd5b6200031d6200047f565b808385610100860111156200033157600080fd5b60005b6008811015620003615781516200034b81620004f7565b8452602093840193919091019060010162000334565b509095945050505050565b60008060008060008060008060006103408a8c0312156200038c57600080fd5b89516200039981620004f7565b60208b0151909950620003ac81620004f7565b60408b0151909850620003bf81620004f7565b9650607f8a018b13620003d157600080fd5b620003db6200047f565b8060608c016101608d018e811115620003f357600080fd5b60005b600881101562000417578251855260209485019490920191600101620003f6565b50829950620004278f8262000301565b9850505050506200043d8b6102608c016200026d565b93506200044e6102e08b016200025b565b92506200045f6103008b016200025b565b9150620004706103208b016200025b565b90509295985092959850929598565b60405161010081016001600160401b0381118282101715620004b157634e487b7160e01b600052604160045260246000fd5b60405290565b6000600019821415620004da57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146200050d57600080fd5b50565b60805160601c61209d6200054b6000396000818161042601528181610b5301528181610bd101528181610d120152610e64015261209d6000f3fe6080604052600436106101435760003560e01c8063776af5ba116100b6578063d6ef60131161006f578063d6ef6013146103ae578063da91dfd5146103ce578063de26fdcd146103e1578063f572acec146103f4578063f887ea4014610414578063fc86da891461044857600080fd5b8063776af5ba146102fb57806391c2c4691461031b578063b32e8cb61461033b578063b7511c5b1461035b578063c8fddadb1461037b578063d0dbc4e41461038e57600080fd5b80632583ee6f116101085780632583ee6f1461025257806328f371aa1461027457806345b5f94f146102955780634fbb66c3146102b557806361ef161f146102c85780636f7e8799146102e857600080fd5b806230e1b51461014f57806306b278cb1461018c5780630cb6aaf1146101ac5780630cd790f7146101ec57806313a51b2e1461020c57600080fd5b3661014a57005b600080fd5b34801561015b57600080fd5b5061016f61016a366004611d9f565b610468565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019857600080fd5b5060045461016f906001600160a01b031681565b3480156101b857600080fd5b506101dc6101c7366004611d9f565b60036020526000908152604090205460ff1681565b6040519015158152602001610183565b3480156101f857600080fd5b50600e5461016f906001600160a01b031681565b34801561021857600080fd5b50610244610227366004611c25565b600260209081526000928352604080842090915290825290205481565b604051908152602001610183565b34801561025e57600080fd5b5061027261026d366004611748565b610488565b005b34801561028057600080fd5b50600e546101dc90600160a01b900460ff1681565b3480156102a157600080fd5b506102726102b03660046118bb565b61056b565b6102726102c3366004611aa0565b6105fb565b3480156102d457600080fd5b5060005461016f906001600160a01b031681565b6102726102f63660046119d8565b610689565b34801561030757600080fd5b5060015461016f906001600160a01b031681565b34801561032757600080fd5b50600d5461016f906001600160a01b031681565b34801561034757600080fd5b506102726103563660046117ef565b610876565b34801561036757600080fd5b50610272610376366004611d9f565b610b31565b610272610389366004611940565b610f0a565b34801561039a57600080fd5b506102726103a9366004611793565b610fae565b3480156103ba57600080fd5b5061016f6103c9366004611d9f565b61114d565b6102726103dc366004611aa0565b61115d565b6102726103ef366004611b4f565b6111aa565b34801561040057600080fd5b5061027261040f3660046117ef565b6111fb565b34801561042057600080fd5b5061016f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045457600080fd5b50610272610463366004611840565b61141c565b6009816004811061047857600080fd5b01546001600160a01b0316905081565b6104938383836114a4565b600480546001600160a01b03848116600090815260026020908152604080832087151584529091528082205490516331a9108f60e11b81529485015292911690636352211e9060240160206040518083038186803b1580156104f457600080fd5b505afa158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190611724565b6040519091506001600160a01b038216904780156108fc02916000818181858888f19350505050158015610564573d6000803e3d6000fd5b5050505050565b6105768888886114a4565b6001546040516328e5fa9560e21b81526004810187905260248101869052604481018590526064810184905282151560848201526001600160a01b039091169063a397ea549060a401600060405180830381600087803b1580156105d957600080fd5b505af11580156105ed573d6000803e3d6000fd5b505050505050505050505050565b6106068b8a876114a4565b60005460405163f2ae372f60e01b81526001600160a01b039091169063f2ae372f90349061064a908e908e908e908e908e908e908e908e908e908e90600401611f03565b6000604051808303818588803b15801561066357600080fd5b505af1158015610677573d6000803e3d6000fd5b50505050505050505050505050505050565b600480546001600160a01b038b811660009081526002602090815260408083208c151584529091528082205490516331a9108f60e11b81529485015292911690636352211e9060240160206040518083038186803b1580156106ea57600080fd5b505afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107229190611724565b90508b6001600160a01b0316816001600160a01b0316146107815760405162461bcd60e51b8152602060048201526014602482015273796f7520646f6e277420686176652061206b657960601b60448201526064015b60405180910390fd5b600e546001600160a01b031633146107e257600d546001600160a01b031633146107e25760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b21036b9b39739b2b73232b960711b6044820152606401610778565b60008054906101000a90046001600160a01b03166001600160a01b0316637be7d141348d8d8d8d8d888e8e8e8e8e6040518d63ffffffff1660e01b81526004016108369b9a99989796959493929190611e2e565b6000604051808303818588803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b5050505050505050505050505050505050565b6108818484846114a4565b60015460405163d3bab1d160e01b81526000918291829182916001600160a01b039091169063d3bab1d1906108bc9030908990600401611e15565b6101206040518083038186803b1580156108d557600080fd5b505afa1580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190611c5e565b60015460405163047e0bbd60e41b8152999d50979b50929950919750506001600160a01b03909416946347e0bbd0945061095393508a9250600401905090815260200190565b600060405180830381600087803b15801561096d57600080fd5b505af1158015610981573d6000803e3d6000fd5b5050600480546001600160a01b038b811660009081526002602090815260408083208e151584529091528082205490516331a9108f60e11b8152948501529450169150636352211e9060240160206040518083038186803b1580156109e557600080fd5b505afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190611724565b60405163a9059cbb60e01b81529091506001600160a01b0386169063a9059cbb90610a4e9084908890600401611e15565b602060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190611d82565b5060055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610ad39084908690600401611e15565b602060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b259190611d82565b50505050505050505050565b6000546040516338c74dd960e01b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000909116906338c74dd990602401600060405180830381600087803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b50506001546040516338c74dd960e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000090911692506338c74dd99150602401600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b5050505060005b6004811015610ef35760058160048110610c5057610c50612015565b015460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610c85929116908690600401611e15565b602060405180830381600087803b158015610c9f57600080fd5b505af1158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd79190611d82565b5060058160048110610ceb57610ceb612015565b015460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610d3c907f0000000000000000000000000000000000000000000000000000000000000000908690600401611e15565b602060405180830381600087803b158015610d5657600080fd5b505af1158015610d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e9190611d82565b5060098160048110610da257610da2612015565b015460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610dd7929116908690600401611e15565b602060405180830381600087803b158015610df157600080fd5b505af1158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e299190611d82565b5060098160048110610e3d57610e3d612015565b015460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610e8e907f0000000000000000000000000000000000000000000000000000000000000000908690600401611e15565b602060405180830381600087803b158015610ea857600080fd5b505af1158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee09190611d82565b5080610eeb81611fec565b915050610c34565b5050600e805460ff60a01b1916600160a01b179055565b610f158989866114a4565b6001546040516360b66f4560e11b81526001600160a01b038a81166004830152602482018a9052888116604483015260648201889052861515608483015260a4820186905284151560c48301529091169063c16cde8a90349060e4016000604051808303818588803b158015610f8a57600080fd5b505af1158015610f9e573d6000803e3d6000fd5b5050505050505050505050505050565b610fb98484846114a4565b600480546001600160a01b03858116600090815260026020908152604080832088151584529091528082205490516331a9108f60e11b81529485015292911690636352211e9060240160206040518083038186803b15801561101a57600080fd5b505afa15801561102e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110529190611724565b6040516370a0823160e01b81523060048201529091506001600160a01b0383169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561109e57600080fd5b505afa1580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190611db8565b6040518363ffffffff1660e01b81526004016110f3929190611e15565b602060405180830381600087803b15801561110d57600080fd5b505af1158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190611d82565b505050505050565b6005816004811061047857600080fd5b6111688b8a876114a4565b600054604051632dc4746360e11b81526001600160a01b0390911690635b88e8c690349061064a908e908e908d908d908d908d908d908d908d90600401611ea1565b6111b58c8a876114a4565b600154604051630b142a4b60e41b81526001600160a01b039091169063b142a4b0903490610836908f908f908f908f908f908f908f908f908f908f908f90600401611f6e565b6112068484846114a4565b600154604051630130197760e11b81526000916001600160a01b03169063026032ee906112399030908690600401611e15565b6101006040518083038186803b15801561125257600080fd5b505afa158015611266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128a9190611cfa565b6001546040516309e71b0f60e41b81529199506001600160a01b03169750639e71b0f096506112c495508994506004019250611fe3915050565b600060405180830381600087803b1580156112de57600080fd5b505af11580156112f2573d6000803e3d6000fd5b5050600480546001600160a01b0388811660009081526002602090815260408083208b151584529091528082205490516331a9108f60e11b8152948501529450169150636352211e9060240160206040518083038186803b15801561135657600080fd5b505afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190611724565b60055460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906113c19084908690600401611e15565b602060405180830381600087803b1580156113db57600080fd5b505af11580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190611d82565b50505050505050565b6114278787876114a4565b600154604051639983ee1b60e01b815260048101869052602481018590526044810184905282151560648201526001600160a01b0390911690639983ee1b90608401600060405180830381600087803b15801561148357600080fd5b505af1158015611497573d6000803e3d6000fd5b5050505050505050505050565b600480546001600160a01b0384811660009081526002602090815260408083208715158452909152908190205490516331a9108f60e11b81529384015285811692911690636352211e9060240160206040518083038186803b15801561150957600080fd5b505afa15801561151d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115419190611724565b6001600160a01b03161461158e5760405162461bcd60e51b8152602060048201526014602482015273796f7520646f6e277420686176652061206b657960601b6044820152606401610778565b6001600160a01b038216600090815260026020908152604080832084151584528252808320548352600390915290205460ff166115fb5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b6044820152606401610778565b600e546001600160a01b0316331461165c57600d546001600160a01b0316331461165c5760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b21036b9b39739b2b73232b960711b6044820152606401610778565b505050565b803561166c81612041565b919050565b600082601f83011261168257600080fd5b8135602067ffffffffffffffff8083111561169f5761169f61202b565b8260051b604051601f19603f830116810181811084821117156116c4576116c461202b565b604052848152838101925086840182880185018910156116e357600080fd5b600092505b8583101561170d576116f981611661565b8452928401926001929092019184016116e8565b50979650505050505050565b803561166c81612059565b60006020828403121561173657600080fd5b815161174181612041565b9392505050565b60008060006060848603121561175d57600080fd5b833561176881612041565b9250602084013561177881612041565b9150604084013561178881612059565b809150509250925092565b600080600080608085870312156117a957600080fd5b84356117b481612041565b935060208501356117c481612041565b925060408501356117d481612059565b915060608501356117e481612041565b939692955090935050565b6000806000806080858703121561180557600080fd5b843561181081612041565b9350602085013561182081612041565b9250604085013561183081612059565b9396929550929360600135925050565b600080600080600080600060e0888a03121561185b57600080fd5b873561186681612041565b9650602088013561187681612041565b9550604088013561188681612059565b9450606088013593506080880135925060a0880135915060c08801356118ab81612059565b8091505092959891949750929550565b600080600080600080600080610100898b0312156118d857600080fd5b88356118e381612041565b975060208901356118f381612041565b9650604089013561190381612059565b9550606089013594506080890135935060a0890135925060c0890135915060e089013561192f81612059565b809150509295985092959890939650565b60008060008060008060008060006101208a8c03121561195f57600080fd5b893561196a81612041565b985060208a013561197a81612041565b975060408a0135965060608a013561199181612041565b955060808a0135945060a08a01356119a881612059565b935060c08a0135925060e08a01356119bf81612059565b809250506101008a013590509295985092959850929598565b60008060008060008060008060008060006101608c8e0312156119fa57600080fd5b8b35611a0581612041565b9a5060208c013567ffffffffffffffff811115611a2157600080fd5b611a2d8e828f01611671565b9a505060408c0135611a3e81612041565b985060608c0135975060808c01359650611a5a60a08d01611719565b955060c08c0135945060e08c013593506101008c01359250611a7f6101208d01611719565b9150611a8e6101408d01611661565b90509295989b509295989b9093969950565b60008060008060008060008060008060006101608c8e031215611ac257600080fd5b8b35611acd81612041565b9a5060208c013567ffffffffffffffff811115611ae957600080fd5b611af58e828f01611671565b9a505060408c0135611b0681612041565b985060608c0135975060808c0135965060a08c01359550611b2960c08d01611719565b945060e08c013593506101008c013592506101208c01359150611a8e6101408d01611661565b6000806000806000806000806000806000806101808d8f031215611b7257600080fd5b611b7b8d611661565b9b5067ffffffffffffffff60208e01351115611b9657600080fd5b611ba68e60208f01358f01611671565b9a5060408d01359950611bbb60608e01611661565b985060808d0135975060a08d01359650611bd760c08e01611661565b9550611be560e08e01611719565b94506101008d01359350611bfc6101208e01611719565b92506101408d01359150611c136101608e01611719565b90509295989b509295989b509295989b565b60008060408385031215611c3857600080fd5b8235611c4381612041565b91506020830135611c5381612059565b809150509250929050565b60008060008060008060008060006101208a8c031215611c7d57600080fd5b8951611c8881612041565b60208b015160408c0151919a509850611ca081612041565b60608b0151909750611cb181612041565b60808b015160a08c01519197509550611cc981612059565b60c08b015160e08c01519195509350611ce181612059565b809250506101008a015190509295985092959850929598565b600080600080600080600080610100898b031215611d1757600080fd5b8851611d2281612041565b60208a015160408b01519199509750611d3a81612041565b60608a015160808b01519197509550611d5281612059565b60a08a015160c08b01519195509350611d6a81612059565b8092505060e089015190509295985092959890939650565b600060208284031215611d9457600080fd5b815161174181612059565b600060208284031215611db157600080fd5b5035919050565b600060208284031215611dca57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015611e0a5781516001600160a01b031687529582019590820190600101611de5565b509495945050505050565b6001600160a01b03929092168252602082015260400190565b6000610160808352611e428184018f611dd1565b6001600160a01b039d8e166020850152604084019c909c5250506060810198909852951515608088015293881660a087015260c086019290925260e0850152610100840152151561012083015290921661014090920191909152919050565b6000610120808352611eb58184018d611dd1565b6001600160a01b039b8c166020850152604084019a909a5250506060810196909652931515608086015260a085019290925260c084015260e083015290921661010090920191909152919050565b6000610140808352611f178184018e611dd1565b6001600160a01b039c8d166020850152604084019b909b5250506060810197909752608087019590955292151560a086015260c085019190915260e084015261010083015290921661012090920191909152919050565b6000610160808352611f828184018f611dd1565b602084019d909d5250506001600160a01b03998a166040820152606081019890985260808801969096529390961660a086015290151560c085015260e084015292151561010083015261012082019290925290151561014090910152919050565b90815260200190565b600060001982141561200e57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461205657600080fd5b50565b801515811461205657600080fdfea26469706673582212200fe8471ca276d5f7b279444b382773b6e33b8105b1c1317632cb2c4b9c7efca664736f6c63430008060033a2646970667358221220b92431b544bfbec9b6e27ed1a34a1549d520022f07c50bf4fbd8d5b53d71cf7564736f6c63430008060033",
  "deployedBytecode": "0x608060405260043610620002225760003560e01c80638da5cb5b1162000123578063b7d3211011620000ad578063eb02c3011162000078578063eb02c3011462000751578063f2ae372f14620007b4578063f2fde38b14620007cb578063f887ea4014620007f0578063fbfa77cf146200082657600080fd5b8063b7d321101462000646578063be1528611462000680578063c7960d3514620006b6578063e6e6dd2f14620006db57600080fd5b8063a226b48311620000ee578063a226b4831462000595578063a397ea5414620005d0578063a4cf54a214620005f5578063b142a4b0146200062f57600080fd5b80638da5cb5b14620005065780639983ee1b14620005265780639e71527d146200054b5780639e71b0f0146200057057600080fd5b806355c32a3c11620001b157806368fc0c9a116200017c57806368fc0c9a14620004115780636c5e2fd91462000436578063715018a61462000484578063776af5ba146200049c5780637a3c4c1714620004d257600080fd5b806355c32a3c146200036857806361ef161f146200037f5780636476b83714620003b557806367e92f9114620003fa57600080fd5b806332d53b1711620001f257806332d53b1714620002d757806335180f5f1462000314578063449bd2cc146200032b57806347e0bbd0146200034357600080fd5b806230e1b514620002275780630cd790f714620002695780632d6a9923146200028b5780633264fee514620002b2575b600080fd5b3480156200023457600080fd5b506200024c620002463660046200279c565b6200085c565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200027657600080fd5b506001546200024c906001600160a01b031681565b3480156200029857600080fd5b50620002b0620002aa3660046200279c565b6200087d565b005b348015620002bf57600080fd5b50620002b0620002d13660046200229b565b6200095c565b348015620002e457600080fd5b50620002fc620002f63660046200279c565b62000988565b60408051921515835260208301919091520162000260565b620002b062000325366004620024c6565b62000acc565b3480156200033857600080fd5b50620002b062000b98565b3480156200035057600080fd5b50620002b0620003623660046200279c565b62001090565b620002b062000379366004620023a7565b62001222565b3480156200038c57600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b348015620003c257600080fd5b50620003e9620003d43660046200275f565b60066020526000908152604090205460ff1681565b604051901515815260200162000260565b620002b06200040b3660046200258e565b62001311565b3480156200041e57600080fd5b50620002b062000430366004620027d0565b620013a9565b3480156200044357600080fd5b506200047562000455366004620022c2565b600460209081526000928352604080842090915290825290205460ff1681565b60405162000260919062002bc5565b3480156200049157600080fd5b50620002b062001488565b348015620004a957600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b348015620004df57600080fd5b50620004f7620004f13660046200279c565b620014a0565b60405190815260200162000260565b3480156200051357600080fd5b506000546001600160a01b03166200024c565b3480156200053357600080fd5b50620002b062000545366004620027f8565b620015dc565b3480156200055857600080fd5b50620002b06200056a3660046200277d565b62001784565b3480156200057d57600080fd5b50620002b06200058f3660046200279c565b620017df565b348015620005a257600080fd5b50620003e9620005b43660046200279c565b600090815260036020526040902054600160a81b900460ff1690565b348015620005dd57600080fd5b50620002b0620005ef3660046200283c565b62001936565b3480156200060257600080fd5b506200024c620006143660046200229b565b6002602052600090815260409020546001600160a01b031681565b620002b06200064036600462002638565b62001afb565b3480156200065357600080fd5b506200024c620006653660046200275f565b6005602052600090815260409020546001600160a01b031681565b3480156200068d57600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b348015620006c357600080fd5b506200024c620006d53660046200279c565b62001cc6565b348015620006e857600080fd5b506200073e620006fa3660046200279c565b60036020526000908152604090208054600182015460029092015460ff808316936001600160a01b036101008504811694600160a81b900490921692908216911685565b6040516200026095949392919062002bd5565b3480156200075e57600080fd5b5062000776620007703660046200279c565b62001cd7565b604080519889526020890197909752958701949094526060860192909252608085015260a0840152151560c083015260e08201526101000162000260565b620002b0620007c53660046200258e565b62001e4b565b348015620007d857600080fd5b50620002b0620007ea3660046200229b565b62001fa5565b348015620007fd57600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156200083357600080fd5b506200024c7f000000000000000000000000000000000000000000000000000000000000000081565b600f81600481106200086d57600080fd5b01546001600160a01b0316905081565b336000908152600260205260409020546001600160a01b0316620008be5760405162461bcd60e51b8152600401620008b59062002c16565b60405180910390fd5b33600081815260026020908152604080832054858452600390925291829020600181015490549251632583ee6f60e01b815260048101949094526001600160a01b039081166024850152600160a81b90920460ff16151560448401521690632583ee6f90606401600060405180830381600087803b1580156200094057600080fd5b505af115801562000955573d6000803e3d6000fd5b5050505050565b6200096662002024565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526003602052604081205481906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916345a6f370916101008204169060ff600160a81b90910416620009f457600f546001600160a01b031662000a10565b6000868152600360205260409020600101546001600160a01b03165b6000878152600360205260409081902060018101549054915160e086901b6001600160e01b03191681526001600160a01b0394851660048201529284166024840152929092166044820152600160a81b90910460ff1615156064820152608401604080518083038186803b15801562000a8857600080fd5b505afa15801562000a9d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ac391906200272e565b91509150915091565b336000908152600260205260409020546001600160a01b031662000b045760405162461bcd60e51b8152600401620008b59062002c16565b3360008181526002602052604090819020549051636f7e879960e01b81526001600160a01b0390911691636f7e879991349162000b58918f908f908f908f908f908f908f908f908f908f90600401620029a6565b6000604051808303818588803b15801562000b7257600080fd5b505af115801562000b87573d6000803e3d6000fd5b505050505050505050505050505050565b336000908152600260205260409020546001600160a01b03161562000c145760405162461bcd60e51b815260206004820152602b60248201527f446f7070656c47616e67657220666f722074686973206164647265737320616c60448201526a1c9958591e48195e1a5cdd60aa1b6064820152608401620008b5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317d70f7c6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562000c7257600080fd5b505af115801562000c87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cad9190620027b6565b60405163fd0d101f60e01b8152600860048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fd0d101f90602401600060405180830381600087803b15801562000d1357600080fd5b505af115801562000d28573d6000803e3d6000fd5b5050505062000d366200218b565b60005b600881101562000d7e5762000d4f818462002c4d565b82826008811062000d645762000d6462002cb2565b60200201528062000d758162002c68565b91505062000d39565b5060007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846007600f307f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a90046001600160a01b031660405162000e2f90620021aa565b62000e439998979695949392919062002b14565b604051809103906000f08015801562000e60573d6000803e3d6000fd5b5033600090815260026020526040812080546001600160a01b0319166001600160a01b0384161790559091505b60088110156200108a576040518060a0016040528082600781111562000eb75762000eb762002c9c565b600781111562000ecb5762000ecb62002c9c565b8152602001836001600160a01b031681526020016004831062000ef057600062000ef3565b60015b151581526020016007836008811062000f105762000f1062002cb2565b01546001600160a01b03168152336020909101526003600062000f34848862002c4d565b8152602081019190915260400160002081518154829060ff1916600183600781111562000f655762000f6562002c9c565b02179055506020820151815460408401511515600160a81b0260ff60a81b196001600160a01b039384166101000216610100600160b01b03199092169190911717825560608301516001830180549183166001600160a01b03199283161790556080909301516002909201805492821692909316919091179091557f0000000000000000000000000000000000000000000000000000000000000000166340c10f193362001014848862002c4d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156200105b57600080fd5b505af115801562001070573d6000803e3d6000fd5b505050508080620010819062002c68565b91505062000e8d565b50505050565b336000908152600260205260409020546001600160a01b0316620010c85760405162461bcd60e51b8152600401620008b59062002c16565b3360009081526002602052604080822054905163d3bab1d160e01b81526001600160a01b0391821660048201526024810184905282917f0000000000000000000000000000000000000000000000000000000000000000169063d3bab1d1906044016101206040518083038186803b1580156200114457600080fd5b505afa15801562001159573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200117f919062002300565b50503360008181526002602052604090819020549051635997465b60e11b815260048101929092526001600160a01b0380871660248401528415156044840152606483018d9052959a5092985093909116955063b32e8cb694505060849091019150620011e99050565b600060405180830381600087803b1580156200120457600080fd5b505af115801562001219573d6000803e3d6000fd5b50505050505050565b336000908152600260205260409020546001600160a01b03166200125a5760405162461bcd60e51b8152600401620008b59062002c16565b336000818152600260205260409081902054905163c8fddadb60e01b815260048101929092526001600160a01b038a81166024840152604483018a905288811660648401526084830188905286151560a484015260c4830186905284151560e48401526101048301849052169063c8fddadb903490610124016000604051808303818588803b158015620012ed57600080fd5b505af115801562001302573d6000803e3d6000fd5b50505050505050505050505050565b336000908152600260205260409020546001600160a01b0316620013495760405162461bcd60e51b8152600401620008b59062002c16565b62001355898662002080565b336000818152600260205260409081902054905163da91dfd560e01b81526001600160a01b039091169163da91dfd591349162000b58918f908f908f908f908f908f908f908f908f908f9060040162002a1e565b336000908152600260205260409020546001600160a01b0316620013e15760405162461bcd60e51b8152600401620008b59062002c16565b33600081815260026020908152604080832054868452600390925291829020600181015490549251633436f13960e21b815260048101949094526001600160a01b039081166024850152600160a81b90920460ff16151560448401528382166064840152169063d0dbc4e490608401600060405180830381600087803b1580156200146b57600080fd5b505af115801562001480573d6000803e3d6000fd5b505050505050565b6200149262002024565b6200149e60006200213b565b565b600081815260036020526040812054600160a81b900460ff1615620015785760008281526003602052604090819020600101549051637092736960e11b81526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063e124e6d2906024015b60206040518083038186803b1580156200153757600080fd5b505afa1580156200154c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015729190620027b6565b92915050565b600082815260036020526040908190206001015490516340d3096b60e11b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000909116906381a612d6906024016200151e565b336000908152600260205260409020546001600160a01b0316620016145760405162461bcd60e51b8152600401620008b59062002c16565b3360009081526002602052604080822054905163d3bab1d160e01b81526001600160a01b0391821660048201526024810187905282917f0000000000000000000000000000000000000000000000000000000000000000169063d3bab1d1906044016101206040518083038186803b1580156200169057600080fd5b505afa158015620016a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016cb919062002300565b5050509550509450505050620016e2828262002080565b336000818152600260205260409081902054905163fc86da8960e01b815260048101929092526001600160a01b0384811660248401528315156044840152606483018990526084830188905260a4830187905285151560c4840152169063fc86da899060e401600060405180830381600087803b1580156200176357600080fd5b505af115801562001778573d6000803e3d6000fd5b50505050505050505050565b6200178e62002024565b8060066000846007811115620017a857620017a862002c9c565b6007811115620017bc57620017bc62002c9c565b81526020810191909152604001600020805460ff19169115159190911790555050565b336000908152600260205260409020546001600160a01b0316620018175760405162461bcd60e51b8152600401620008b59062002c16565b33600090815260026020526040808220549051630130197760e11b81526001600160a01b0391821660048201526024810184905282917f0000000000000000000000000000000000000000000000000000000000000000169063026032ee906044016101006040518083038186803b1580156200189357600080fd5b505afa158015620018a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018ce919062002435565b50503360008181526002602052604090819020549051633d5cab3b60e21b815260048101929092526001600160a01b0380871660248401528415156044840152606483018c905295995092975093909116945063f572acec93505060849091019050620011e9565b336000908152600260205260409020546001600160a01b03166200196e5760405162461bcd60e51b8152600401620008b59062002c16565b33600090815260026020526040808220549051630130197760e11b81526001600160a01b0391821660048201526024810188905282917f0000000000000000000000000000000000000000000000000000000000000000169063026032ee906044016101006040518083038186803b158015620019ea57600080fd5b505afa158015620019ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a25919062002435565b505033600081815260026020526040908190205490516345b5f94f60e01b81529599509297506001600160a01b039290921695506345b5f94f945062001abe9391925087918791508d908d908d908d908d906004016001600160a01b03988916815296909716602087015293151560408601526060850192909252608084015260a083015260c082015290151560e08201526101000190565b600060405180830381600087803b15801562001ad957600080fd5b505af115801562001aee573d6000803e3d6000fd5b5050505050505050505050565b336000908152600260205260409020546001600160a01b031662001b335760405162461bcd60e51b8152600401620008b59062002c16565b62001b3f898662002080565b8062001c08578a60008151811062001b5b5762001b5b62002cb2565b60209081029190910181015133600081815260029093526040928390205492516323b872dd60e01b815260048101919091526001600160a01b039283166024820152604481018d90529116906323b872dd90606401602060405180830381600087803b15801562001bcb57600080fd5b505af115801562001be0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c0691906200270e565b505b60026000336001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031663de26fdcd34338e8e8e8e8e8e8e8e8e8e8e6040518e63ffffffff1660e01b815260040162001c859c9b9a9998979695949392919062002a94565b6000604051808303818588803b15801562001c9f57600080fd5b505af115801562001cb4573d6000803e3d6000fd5b50505050505050505050505050505050565b600781600881106200086d57600080fd5b60008181526003602052604081205481908190819081908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691634a3f088d916101008204169060ff600160a81b9091041662001d4f57600f546001600160a01b031662001d6b565b60008c8152600360205260409020600101546001600160a01b03165b60008d8152600360205260409081902060018101549054915160e086901b6001600160e01b03191681526001600160a01b0394851660048201529284166024840152929092166044820152600160a81b90910460ff16151560648201526084016101006040518083038186803b15801562001de557600080fd5b505afa15801562001dfa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e2091906200288c565b809850819950829a50839b50849c50859d50869e50879f505050505050505050919395975091939597565b336000908152600260205260409020546001600160a01b031662001e835760405162461bcd60e51b8152600401620008b59062002c16565b62001e8f898662002080565b8960008151811062001ea55762001ea562002cb2565b60209081029190910181015133600081815260029093526040928390205492516323b872dd60e01b815260048101919091526001600160a01b039283166024820152604481018b90529116906323b872dd90606401602060405180830381600087803b15801562001f1557600080fd5b505af115801562001f2a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f5091906200270e565b503360008181526002602052604090819020549051634fbb66c360e01b81526001600160a01b0390911691634fbb66c391349162000b58918f908f908f908f908f908f908f908f908f908f9060040162002a1e565b62001faf62002024565b6001600160a01b038116620020165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620008b5565b62002021816200213b565b50565b6000546001600160a01b031633146200149e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620008b5565b6001600160a01b038216600090815260046020908152604080832084151584529091528120546006919060ff166007811115620020c157620020c162002c9c565b6007811115620020d557620020d562002c9c565b815260208101919091526040016000205460ff16620021375760405162461bcd60e51b815260206004820152601f60248201527f74726164696e67206f6e207468697320706169722069732073746f70706564006044820152606401620008b5565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061010001604052806008906020820280368337509192915050565b6125e88062002d0483390190565b8035620021c58162002cde565b919050565b600082601f830112620021dc57600080fd5b8135602067ffffffffffffffff80831115620021fc57620021fc62002cc8565b8260051b604051601f19603f8301168101818110848211171562002224576200222462002cc8565b604052848152838101925086840182880185018910156200224457600080fd5b600092505b8583101562002272576200225d81620021b8565b84529284019260019290920191840162002249565b50979650505050505050565b8035620021c58162002cf4565b803560088110620021c557600080fd5b600060208284031215620022ae57600080fd5b8135620022bb8162002cde565b9392505050565b60008060408385031215620022d657600080fd5b8235620022e38162002cde565b91506020830135620022f58162002cf4565b809150509250929050565b60008060008060008060008060006101208a8c0312156200232057600080fd5b89516200232d8162002cde565b60208b015160408c0151919a509850620023478162002cde565b60608b01519097506200235a8162002cde565b60808b015160a08c01519197509550620023748162002cf4565b60c08b015160e08c015191955093506200238e8162002cf4565b809250506101008a015190509295985092959850929598565b600080600080600080600080610100898b031215620023c557600080fd5b8835620023d28162002cde565b9750602089013596506040890135620023eb8162002cde565b9550606089013594506080890135620024048162002cf4565b935060a0890135925060c08901356200241d8162002cf4565b8092505060e089013590509295985092959890939650565b600080600080600080600080610100898b0312156200245357600080fd5b8851620024608162002cde565b60208a015160408b015191995097506200247a8162002cde565b60608a015160808b01519197509550620024948162002cf4565b60a08a015160c08b01519195509350620024ae8162002cf4565b8092505060e089015190509295985092959890939650565b6000806000806000806000806000806101408b8d031215620024e757600080fd5b8a3567ffffffffffffffff811115620024ff57600080fd5b6200250d8d828e01620021ca565b9a505060208b0135620025208162002cde565b985060408b0135975060608b0135965060808b0135620025408162002cf4565b955060a08b0135945060c08b0135935060e08b013592506101008b0135620025688162002cf4565b91506101208b01356200257b8162002cde565b809150509295989b9194979a5092959850565b6000806000806000806000806000806101408b8d031215620025af57600080fd5b8a3567ffffffffffffffff811115620025c757600080fd5b620025d58d828e01620021ca565b9a505060208b0135620025e88162002cde565b985060408b0135975060608b0135965060808b0135955060a08b01356200260f8162002cf4565b945060c08b0135935060e08b013592506101008b013591506101208b01356200257b8162002cde565b60008060008060008060008060008060006101608c8e0312156200265b57600080fd5b8b3567ffffffffffffffff8111156200267357600080fd5b620026818e828f01620021ca565b9b505060208c0135995060408c01356200269b8162002cde565b985060608c0135975060808c0135965060a08c0135620026bb8162002cde565b9550620026cb60c08d016200227e565b945060e08c01359350620026e36101008d016200227e565b92506101208c01359150620026fc6101408d016200227e565b90509295989b509295989b9093969950565b6000602082840312156200272157600080fd5b8151620022bb8162002cf4565b600080604083850312156200274257600080fd5b82516200274f8162002cf4565b6020939093015192949293505050565b6000602082840312156200277257600080fd5b620022bb826200228b565b600080604083850312156200279157600080fd5b620022e3836200228b565b600060208284031215620027af57600080fd5b5035919050565b600060208284031215620027c957600080fd5b5051919050565b60008060408385031215620027e457600080fd5b823591506020830135620022f58162002cde565b600080600080608085870312156200280f57600080fd5b8435935060208501359250604085013591506060850135620028318162002cf4565b939692955090935050565b600080600080600060a086880312156200285557600080fd5b8535945060208601359350604086013592506060860135915060808601356200287e8162002cf4565b809150509295509295909350565b600080600080600080600080610100898b031215620028aa57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151620024ae8162002cf4565b8060005b60048110156200108a5781546001600160a01b0316845260209093019260019182019101620028e5565b8060005b60088110156200108a5781546001600160a01b031684526020909301926001918201910162002913565b600081518084526020808501945080840160005b83811015620029785781516001600160a01b03168752958201959082019060010162002951565b509495945050505050565b60088110620029a257634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038c8116825261016060208301819052600091620029ce8483018f6200293d565b9c81166040850152606084019b909b525050608081019790975294151560a087015260c086019390935260e085019190915261010084015215156101208301529091166101409091015292915050565b6001600160a01b038c811682526101606020830181905260009162002a468483018f6200293d565b9c81166040850152606084019b909b525050608081019790975260a087019590955292151560c086015260e08501919091526101008401526101208301529091166101409091015292915050565b600060018060a01b03808f168352610180602084015262002aba61018084018f6200293d565b604084019d909d529a8b16606083015250608081019890985260a08801969096529390961660c086015290151560e08501526101008401529215156101208301526101408201929092529015156101609091015292915050565b6001600160a01b038a81168252898116602080840191909152908916604083015261034082019060608301908960005b600881101562002b635781518452928201929082019060010162002b44565b5050505062002b776101608301886200290f565b62002b87610260830187620028e1565b6001600160a01b0385166102e08301526001600160a01b0384166103008301526001600160a01b0383166103208301529a9950505050505050505050565b6020810162001572828462002983565b60a0810162002be5828862002983565b6001600160a01b03958616602083015293151560408201529184166060830152909216608090920191909152919050565b6020808252601b908201527f796f7520646f6e2774206861766520446f7070656c67616e6765720000000000604082015260600190565b6000821982111562002c635762002c6362002c86565b500190565b600060001982141562002c7f5762002c7f62002c86565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200202157600080fd5b80151581146200202157600080fdfe60a0604052600e805460ff60a01b191690553480156200001e57600080fd5b50604051620025e8380380620025e883398101604081905262000041916200036c565b600080546001600160a01b03808c166001600160a01b03199283161783556001600160601b031960608c901b1660805260018054918b16919092161790555b6008811015620002125760048110156200013357858160088110620000a957620000a9620004e1565b602002015160058260048110620000c457620000c4620004e1565b0180546001600160a01b0319166001600160a01b0392909216919091179055848160048110620000f857620000f8620004e1565b602002015160098260048110620001135762000113620004e1565b0180546001600160a01b0319166001600160a01b03929092169190911790555b868160088110620001485762000148620004e1565b602002015160026000888460088110620001665762000166620004e1565b60200201516001600160a01b03166001600160a01b031681526020019081526020016000206000600484106200019e576000620001a1565b60015b15151515815260200190815260200160002081905550600160036000898460088110620001d257620001d2620004e1565b6020020151815260200190815260200160002060006101000a81548160ff02191690831515021790555080806200020990620004b7565b91505062000080565b50600480546001600160a01b03199081166001600160a01b0394851617909155600d8054821694841694909417909355600e805490931691161790555062000510945050505050565b80516200026881620004f7565b919050565b600082601f8301126200027f57600080fd5b604051608081016001600160401b0381118282101715620002b057634e487b7160e01b600052604160045260246000fd5b604052808360808101861015620002c657600080fd5b60005b6004811015620002f6578151620002e081620004f7565b83526020928301929190910190600101620002c9565b509195945050505050565b600082601f8301126200031357600080fd5b6200031d6200047f565b808385610100860111156200033157600080fd5b60005b6008811015620003615781516200034b81620004f7565b8452602093840193919091019060010162000334565b509095945050505050565b60008060008060008060008060006103408a8c0312156200038c57600080fd5b89516200039981620004f7565b60208b0151909950620003ac81620004f7565b60408b0151909850620003bf81620004f7565b9650607f8a018b13620003d157600080fd5b620003db6200047f565b8060608c016101608d018e811115620003f357600080fd5b60005b600881101562000417578251855260209485019490920191600101620003f6565b50829950620004278f8262000301565b9850505050506200043d8b6102608c016200026d565b93506200044e6102e08b016200025b565b92506200045f6103008b016200025b565b9150620004706103208b016200025b565b90509295985092959850929598565b60405161010081016001600160401b0381118282101715620004b157634e487b7160e01b600052604160045260246000fd5b60405290565b6000600019821415620004da57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146200050d57600080fd5b50565b60805160601c61209d6200054b6000396000818161042601528181610b5301528181610bd101528181610d120152610e64015261209d6000f3fe6080604052600436106101435760003560e01c8063776af5ba116100b6578063d6ef60131161006f578063d6ef6013146103ae578063da91dfd5146103ce578063de26fdcd146103e1578063f572acec146103f4578063f887ea4014610414578063fc86da891461044857600080fd5b8063776af5ba146102fb57806391c2c4691461031b578063b32e8cb61461033b578063b7511c5b1461035b578063c8fddadb1461037b578063d0dbc4e41461038e57600080fd5b80632583ee6f116101085780632583ee6f1461025257806328f371aa1461027457806345b5f94f146102955780634fbb66c3146102b557806361ef161f146102c85780636f7e8799146102e857600080fd5b806230e1b51461014f57806306b278cb1461018c5780630cb6aaf1146101ac5780630cd790f7146101ec57806313a51b2e1461020c57600080fd5b3661014a57005b600080fd5b34801561015b57600080fd5b5061016f61016a366004611d9f565b610468565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019857600080fd5b5060045461016f906001600160a01b031681565b3480156101b857600080fd5b506101dc6101c7366004611d9f565b60036020526000908152604090205460ff1681565b6040519015158152602001610183565b3480156101f857600080fd5b50600e5461016f906001600160a01b031681565b34801561021857600080fd5b50610244610227366004611c25565b600260209081526000928352604080842090915290825290205481565b604051908152602001610183565b34801561025e57600080fd5b5061027261026d366004611748565b610488565b005b34801561028057600080fd5b50600e546101dc90600160a01b900460ff1681565b3480156102a157600080fd5b506102726102b03660046118bb565b61056b565b6102726102c3366004611aa0565b6105fb565b3480156102d457600080fd5b5060005461016f906001600160a01b031681565b6102726102f63660046119d8565b610689565b34801561030757600080fd5b5060015461016f906001600160a01b031681565b34801561032757600080fd5b50600d5461016f906001600160a01b031681565b34801561034757600080fd5b506102726103563660046117ef565b610876565b34801561036757600080fd5b50610272610376366004611d9f565b610b31565b610272610389366004611940565b610f0a565b34801561039a57600080fd5b506102726103a9366004611793565b610fae565b3480156103ba57600080fd5b5061016f6103c9366004611d9f565b61114d565b6102726103dc366004611aa0565b61115d565b6102726103ef366004611b4f565b6111aa565b34801561040057600080fd5b5061027261040f3660046117ef565b6111fb565b34801561042057600080fd5b5061016f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045457600080fd5b50610272610463366004611840565b61141c565b6009816004811061047857600080fd5b01546001600160a01b0316905081565b6104938383836114a4565b600480546001600160a01b03848116600090815260026020908152604080832087151584529091528082205490516331a9108f60e11b81529485015292911690636352211e9060240160206040518083038186803b1580156104f457600080fd5b505afa158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190611724565b6040519091506001600160a01b038216904780156108fc02916000818181858888f19350505050158015610564573d6000803e3d6000fd5b5050505050565b6105768888886114a4565b6001546040516328e5fa9560e21b81526004810187905260248101869052604481018590526064810184905282151560848201526001600160a01b039091169063a397ea549060a401600060405180830381600087803b1580156105d957600080fd5b505af11580156105ed573d6000803e3d6000fd5b505050505050505050505050565b6106068b8a876114a4565b60005460405163f2ae372f60e01b81526001600160a01b039091169063f2ae372f90349061064a908e908e908e908e908e908e908e908e908e908e90600401611f03565b6000604051808303818588803b15801561066357600080fd5b505af1158015610677573d6000803e3d6000fd5b50505050505050505050505050505050565b600480546001600160a01b038b811660009081526002602090815260408083208c151584529091528082205490516331a9108f60e11b81529485015292911690636352211e9060240160206040518083038186803b1580156106ea57600080fd5b505afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107229190611724565b90508b6001600160a01b0316816001600160a01b0316146107815760405162461bcd60e51b8152602060048201526014602482015273796f7520646f6e277420686176652061206b657960601b60448201526064015b60405180910390fd5b600e546001600160a01b031633146107e257600d546001600160a01b031633146107e25760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b21036b9b39739b2b73232b960711b6044820152606401610778565b60008054906101000a90046001600160a01b03166001600160a01b0316637be7d141348d8d8d8d8d888e8e8e8e8e6040518d63ffffffff1660e01b81526004016108369b9a99989796959493929190611e2e565b6000604051808303818588803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b5050505050505050505050505050505050565b6108818484846114a4565b60015460405163d3bab1d160e01b81526000918291829182916001600160a01b039091169063d3bab1d1906108bc9030908990600401611e15565b6101206040518083038186803b1580156108d557600080fd5b505afa1580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190611c5e565b60015460405163047e0bbd60e41b8152999d50979b50929950919750506001600160a01b03909416946347e0bbd0945061095393508a9250600401905090815260200190565b600060405180830381600087803b15801561096d57600080fd5b505af1158015610981573d6000803e3d6000fd5b5050600480546001600160a01b038b811660009081526002602090815260408083208e151584529091528082205490516331a9108f60e11b8152948501529450169150636352211e9060240160206040518083038186803b1580156109e557600080fd5b505afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190611724565b60405163a9059cbb60e01b81529091506001600160a01b0386169063a9059cbb90610a4e9084908890600401611e15565b602060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190611d82565b5060055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610ad39084908690600401611e15565b602060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b259190611d82565b50505050505050505050565b6000546040516338c74dd960e01b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000909116906338c74dd990602401600060405180830381600087803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b50506001546040516338c74dd960e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000090911692506338c74dd99150602401600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b5050505060005b6004811015610ef35760058160048110610c5057610c50612015565b015460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610c85929116908690600401611e15565b602060405180830381600087803b158015610c9f57600080fd5b505af1158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd79190611d82565b5060058160048110610ceb57610ceb612015565b015460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610d3c907f0000000000000000000000000000000000000000000000000000000000000000908690600401611e15565b602060405180830381600087803b158015610d5657600080fd5b505af1158015610d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e9190611d82565b5060098160048110610da257610da2612015565b015460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610dd7929116908690600401611e15565b602060405180830381600087803b158015610df157600080fd5b505af1158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e299190611d82565b5060098160048110610e3d57610e3d612015565b015460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610e8e907f0000000000000000000000000000000000000000000000000000000000000000908690600401611e15565b602060405180830381600087803b158015610ea857600080fd5b505af1158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee09190611d82565b5080610eeb81611fec565b915050610c34565b5050600e805460ff60a01b1916600160a01b179055565b610f158989866114a4565b6001546040516360b66f4560e11b81526001600160a01b038a81166004830152602482018a9052888116604483015260648201889052861515608483015260a4820186905284151560c48301529091169063c16cde8a90349060e4016000604051808303818588803b158015610f8a57600080fd5b505af1158015610f9e573d6000803e3d6000fd5b5050505050505050505050505050565b610fb98484846114a4565b600480546001600160a01b03858116600090815260026020908152604080832088151584529091528082205490516331a9108f60e11b81529485015292911690636352211e9060240160206040518083038186803b15801561101a57600080fd5b505afa15801561102e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110529190611724565b6040516370a0823160e01b81523060048201529091506001600160a01b0383169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561109e57600080fd5b505afa1580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190611db8565b6040518363ffffffff1660e01b81526004016110f3929190611e15565b602060405180830381600087803b15801561110d57600080fd5b505af1158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190611d82565b505050505050565b6005816004811061047857600080fd5b6111688b8a876114a4565b600054604051632dc4746360e11b81526001600160a01b0390911690635b88e8c690349061064a908e908e908d908d908d908d908d908d908d90600401611ea1565b6111b58c8a876114a4565b600154604051630b142a4b60e41b81526001600160a01b039091169063b142a4b0903490610836908f908f908f908f908f908f908f908f908f908f908f90600401611f6e565b6112068484846114a4565b600154604051630130197760e11b81526000916001600160a01b03169063026032ee906112399030908690600401611e15565b6101006040518083038186803b15801561125257600080fd5b505afa158015611266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128a9190611cfa565b6001546040516309e71b0f60e41b81529199506001600160a01b03169750639e71b0f096506112c495508994506004019250611fe3915050565b600060405180830381600087803b1580156112de57600080fd5b505af11580156112f2573d6000803e3d6000fd5b5050600480546001600160a01b0388811660009081526002602090815260408083208b151584529091528082205490516331a9108f60e11b8152948501529450169150636352211e9060240160206040518083038186803b15801561135657600080fd5b505afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190611724565b60055460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906113c19084908690600401611e15565b602060405180830381600087803b1580156113db57600080fd5b505af11580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190611d82565b50505050505050565b6114278787876114a4565b600154604051639983ee1b60e01b815260048101869052602481018590526044810184905282151560648201526001600160a01b0390911690639983ee1b90608401600060405180830381600087803b15801561148357600080fd5b505af1158015611497573d6000803e3d6000fd5b5050505050505050505050565b600480546001600160a01b0384811660009081526002602090815260408083208715158452909152908190205490516331a9108f60e11b81529384015285811692911690636352211e9060240160206040518083038186803b15801561150957600080fd5b505afa15801561151d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115419190611724565b6001600160a01b03161461158e5760405162461bcd60e51b8152602060048201526014602482015273796f7520646f6e277420686176652061206b657960601b6044820152606401610778565b6001600160a01b038216600090815260026020908152604080832084151584528252808320548352600390915290205460ff166115fb5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b6044820152606401610778565b600e546001600160a01b0316331461165c57600d546001600160a01b0316331461165c5760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b21036b9b39739b2b73232b960711b6044820152606401610778565b505050565b803561166c81612041565b919050565b600082601f83011261168257600080fd5b8135602067ffffffffffffffff8083111561169f5761169f61202b565b8260051b604051601f19603f830116810181811084821117156116c4576116c461202b565b604052848152838101925086840182880185018910156116e357600080fd5b600092505b8583101561170d576116f981611661565b8452928401926001929092019184016116e8565b50979650505050505050565b803561166c81612059565b60006020828403121561173657600080fd5b815161174181612041565b9392505050565b60008060006060848603121561175d57600080fd5b833561176881612041565b9250602084013561177881612041565b9150604084013561178881612059565b809150509250925092565b600080600080608085870312156117a957600080fd5b84356117b481612041565b935060208501356117c481612041565b925060408501356117d481612059565b915060608501356117e481612041565b939692955090935050565b6000806000806080858703121561180557600080fd5b843561181081612041565b9350602085013561182081612041565b9250604085013561183081612059565b9396929550929360600135925050565b600080600080600080600060e0888a03121561185b57600080fd5b873561186681612041565b9650602088013561187681612041565b9550604088013561188681612059565b9450606088013593506080880135925060a0880135915060c08801356118ab81612059565b8091505092959891949750929550565b600080600080600080600080610100898b0312156118d857600080fd5b88356118e381612041565b975060208901356118f381612041565b9650604089013561190381612059565b9550606089013594506080890135935060a0890135925060c0890135915060e089013561192f81612059565b809150509295985092959890939650565b60008060008060008060008060006101208a8c03121561195f57600080fd5b893561196a81612041565b985060208a013561197a81612041565b975060408a0135965060608a013561199181612041565b955060808a0135945060a08a01356119a881612059565b935060c08a0135925060e08a01356119bf81612059565b809250506101008a013590509295985092959850929598565b60008060008060008060008060008060006101608c8e0312156119fa57600080fd5b8b35611a0581612041565b9a5060208c013567ffffffffffffffff811115611a2157600080fd5b611a2d8e828f01611671565b9a505060408c0135611a3e81612041565b985060608c0135975060808c01359650611a5a60a08d01611719565b955060c08c0135945060e08c013593506101008c01359250611a7f6101208d01611719565b9150611a8e6101408d01611661565b90509295989b509295989b9093969950565b60008060008060008060008060008060006101608c8e031215611ac257600080fd5b8b35611acd81612041565b9a5060208c013567ffffffffffffffff811115611ae957600080fd5b611af58e828f01611671565b9a505060408c0135611b0681612041565b985060608c0135975060808c0135965060a08c01359550611b2960c08d01611719565b945060e08c013593506101008c013592506101208c01359150611a8e6101408d01611661565b6000806000806000806000806000806000806101808d8f031215611b7257600080fd5b611b7b8d611661565b9b5067ffffffffffffffff60208e01351115611b9657600080fd5b611ba68e60208f01358f01611671565b9a5060408d01359950611bbb60608e01611661565b985060808d0135975060a08d01359650611bd760c08e01611661565b9550611be560e08e01611719565b94506101008d01359350611bfc6101208e01611719565b92506101408d01359150611c136101608e01611719565b90509295989b509295989b509295989b565b60008060408385031215611c3857600080fd5b8235611c4381612041565b91506020830135611c5381612059565b809150509250929050565b60008060008060008060008060006101208a8c031215611c7d57600080fd5b8951611c8881612041565b60208b015160408c0151919a509850611ca081612041565b60608b0151909750611cb181612041565b60808b015160a08c01519197509550611cc981612059565b60c08b015160e08c01519195509350611ce181612059565b809250506101008a015190509295985092959850929598565b600080600080600080600080610100898b031215611d1757600080fd5b8851611d2281612041565b60208a015160408b01519199509750611d3a81612041565b60608a015160808b01519197509550611d5281612059565b60a08a015160c08b01519195509350611d6a81612059565b8092505060e089015190509295985092959890939650565b600060208284031215611d9457600080fd5b815161174181612059565b600060208284031215611db157600080fd5b5035919050565b600060208284031215611dca57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015611e0a5781516001600160a01b031687529582019590820190600101611de5565b509495945050505050565b6001600160a01b03929092168252602082015260400190565b6000610160808352611e428184018f611dd1565b6001600160a01b039d8e166020850152604084019c909c5250506060810198909852951515608088015293881660a087015260c086019290925260e0850152610100840152151561012083015290921661014090920191909152919050565b6000610120808352611eb58184018d611dd1565b6001600160a01b039b8c166020850152604084019a909a5250506060810196909652931515608086015260a085019290925260c084015260e083015290921661010090920191909152919050565b6000610140808352611f178184018e611dd1565b6001600160a01b039c8d166020850152604084019b909b5250506060810197909752608087019590955292151560a086015260c085019190915260e084015261010083015290921661012090920191909152919050565b6000610160808352611f828184018f611dd1565b602084019d909d5250506001600160a01b03998a166040820152606081019890985260808801969096529390961660a086015290151560c085015260e084015292151561010083015261012082019290925290151561014090910152919050565b90815260200190565b600060001982141561200e57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461205657600080fd5b50565b801515811461205657600080fdfea26469706673582212200fe8471ca276d5f7b279444b382773b6e33b8105b1c1317632cb2c4b9c7efca664736f6c63430008060033a2646970667358221220b92431b544bfbec9b6e27ed1a34a1549d520022f07c50bf4fbd8d5b53d71cf7564736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "currentPrice(uint256)": {
        "params": {
          "id": "position ID"
        }
      },
      "getPosition(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "getPositionDelta(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDDL_GMX(address)": {
        "params": {
          "value": "the address of DDL_GMX*"
        }
      },
      "setPermission(uint8,bool)": {
        "params": {
          "symbol": "trough name",
          "value": "true or false *"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDecreasePosition(address[],address,uint256,uint256,bool,uint256,uint256,uint256,bool,address)": {
        "notice": "used to decrease position on GMX*"
      },
      "createDoppelgangerGMX()": {
        "notice": "creates Doppelganger account for the user*"
      },
      "createIncreasePosition(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32,address)": {
        "notice": "used to increase position on GMX*"
      },
      "createIncreasePositionETH(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32,address)": {
        "notice": "used to increase position on GMX (only ETH)*"
      },
      "currentPrice(uint256)": {
        "notice": "return currentPrice for the asset*"
      },
      "getPosition(uint256)": {
        "notice": "returns getPosition by the collateral"
      },
      "getPositionDelta(uint256)": {
        "notice": "returns getPositionDelta from GMX by the collateral ID"
      },
      "setDDL_GMX(address)": {
        "notice": "set new DDL_GMX address"
      },
      "setPermission(uint8,bool)": {
        "notice": "set permissions for trading pairs"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2743,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "ddl_gmx",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2758,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "doppelgangerMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address_payable)"
      },
      {
        "astId": 2776,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "keyData",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(KeyInformation)2770_storage)"
      },
      {
        "astId": 2783,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "symbolByIndexToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_bool,t_enum(Symbols)4738))"
      },
      {
        "astId": 2789,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "indexTokenBySymbol",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_enum(Symbols)4738,t_address)"
      },
      {
        "astId": 2794,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "permissions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(Symbols)4738,t_bool)"
      },
      {
        "astId": 2798,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "indexTokenArr",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)8_storage"
      },
      {
        "astId": 2802,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "stablecoinsArray",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)4_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)4_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_address)8_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[8]",
        "numberOfBytes": "256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Symbols)4738": {
        "encoding": "inplace",
        "label": "enum IAccountManager.Symbols",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address_payable)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address payable)",
        "numberOfBytes": "32",
        "value": "t_address_payable"
      },
      "t_mapping(t_address,t_mapping(t_bool,t_enum(Symbols)4738))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bool => enum IAccountManager.Symbols))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_enum(Symbols)4738)"
      },
      "t_mapping(t_bool,t_enum(Symbols)4738)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => enum IAccountManager.Symbols)",
        "numberOfBytes": "32",
        "value": "t_enum(Symbols)4738"
      },
      "t_mapping(t_enum(Symbols)4738,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(Symbols)4738",
        "label": "mapping(enum IAccountManager.Symbols => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_enum(Symbols)4738,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(Symbols)4738",
        "label": "mapping(enum IAccountManager.Symbols => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(KeyInformation)2770_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AccountManager.KeyInformation)",
        "numberOfBytes": "32",
        "value": "t_struct(KeyInformation)2770_storage"
      },
      "t_struct(KeyInformation)2770_storage": {
        "encoding": "inplace",
        "label": "struct AccountManager.KeyInformation",
        "members": [
          {
            "astId": 2761,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Symbols)4738"
          },
          {
            "astId": 2763,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "doppelgangerContract",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2765,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "isLong",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2767,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "indexToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2769,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "user",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}