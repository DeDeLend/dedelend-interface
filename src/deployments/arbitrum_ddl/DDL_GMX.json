{
  "address": "0x47C9Ea65890A938CDd514352aa123de8c7D2154c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPositionRouter",
          "name": "_positionRouter",
          "type": "address"
        },
        {
          "internalType": "contract IAccountManager",
          "name": "_accountManager",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract IERC721",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_USDC",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ltv",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_COLLATERAL_DECIMALS",
          "type": "uint256"
        },
        {
          "internalType": "address[4]",
          "name": "_ArrIndexPrice",
          "type": "address[4]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_ArrBorderPriceCoef",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqFee",
          "type": "uint256"
        }
      ],
      "name": "ForcedExercise",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqFee",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userReturn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolReturn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqFee",
          "type": "uint256"
        }
      ],
      "name": "LiquidateByBorderPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LTV_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountManager",
      "outputs": [
        {
          "internalType": "contract IAccountManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "borderPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borderPriceCoef",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "borderPriceCoefByIndexToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceCoef",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowedByCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newBorrowTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "calculateUpcomingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "upcomingFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeSlippage",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collateralInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collateralState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collateralStateByBorderPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "currentTriggerPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isIncrease",
          "type": "bool"
        }
      ],
      "name": "gmxPositionCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "intrinsicValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLong",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "liqPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "liquidateByBorderPrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "lockCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPoolDDL",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positionInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionRouter",
      "outputs": [
        {
          "internalType": "contract IPositionRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        }
      ],
      "name": "setBorderPriceCoef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setInterestRateDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setLTV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMinBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xef7c79ac589d151cdecc17fe86bb58f48419c8d093d4812cc686aabe0737806b",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x47C9Ea65890A938CDd514352aa123de8c7D2154c",
    "transactionIndex": 4,
    "gasUsed": "15294458",
    "logsBloom": "0x
    "blockHash": "0x4f6d06578fc53de68b14bc9a516001249f6f2df51119129137e9d7fcbc4e4103",
    "transactionHash": "0xef7c79ac589d151cdecc17fe86bb58f48419c8d093d4812cc686aabe0737806b",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 49356538,
        "transactionHash": "0xef7c79ac589d151cdecc17fe86bb58f48419c8d093d4812cc686aabe0737806b",
        "address": "0x47C9Ea65890A938CDd514352aa123de8c7D2154c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x4f6d06578fc53de68b14bc9a516001249f6f2df51119129137e9d7fcbc4e4103"
      }
    ],
    "blockNumber": 49356538,
    "cumulativeGasUsed": "16360798",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb87a436B93fFE9D75c5cFA7bAcFff96430b09868",
    "0x958A149a17d05D6182FbE131b83374712edB9b49",
    "0x489ee077994B6658eAfA855C308275EAd8097C4A",
    "0xd5261cBB1c2e64c7fD767FcaD8330624Fb4FDFCE",
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
    0,
    5000,
    6,
    [
      "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
      "0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",
      "0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0"
    ],
    [
      0,
      0,
      0,
      0
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "6be0acf41c057b3a9a0e4b216e0636f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPositionRouter\",\"name\":\"_positionRouter\",\"type\":\"address\"},{\"internalType\":\"contract IAccountManager\",\"name\":\"_accountManager\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_COLLATERAL_DECIMALS\",\"type\":\"uint256\"},{\"internalType\":\"address[4]\",\"name\":\"_ArrIndexPrice\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_ArrBorderPriceCoef\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"}],\"name\":\"ForcedExercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"}],\"name\":\"LiquidateByBorderPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLATERAL_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LTV_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountManager\",\"outputs\":[{\"internalType\":\"contract IAccountManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"borderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borderPriceCoef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"borderPriceCoefByIndexToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceCoef\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowedByCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"calculateUpcomingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upcomingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSlippage\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collateralInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collateralState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collateralStateByBorderPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currentTriggerPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"}],\"name\":\"gmxPositionCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"intrinsicValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLong\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liqPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liquidateByBorderPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"lockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPoolDDL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionRouter\",\"outputs\":[{\"internalType\":\"contract IPositionRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"}],\"name\":\"setBorderPriceCoef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInterestRateDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrow(uint256,uint256)\":{\"params\":{\"amount\":\"borrow size (USDC)*\",\"id\":\"collateral ID\"}},\"calculateUpcomingFee(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"collateralInfo(uint256)\":{\"params\":{\"id\":\"collateral id*\"}},\"intrinsicValueOf(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"liquidate(uint256)\":{\"params\":{\"id\":\"position ID*\"}},\"liquidateByBorderPrice(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"lockCollateral(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"maxBorrowLimit(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256,uint256)\":{\"params\":{\"amount\":\"amount to repay (USDC)*\",\"id\":\"collateral ID\"}},\"setInterestRate(uint256)\":{\"params\":{\"value\":\"interest rate (in minutes)*\"}},\"setLTV(uint256)\":{\"params\":{\"value\":\"LTV coefficient.*\"}},\"setMinBorrowLimit(uint256)\":{\"params\":{\"value\":\"min. borrow size (USDC)*\"}},\"setPool(address)\":{\"params\":{\"value\":\"the address of the liquidity pool*\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(uint256,uint256)\":{\"notice\":\"send USDC to the user\"},\"calculateUpcomingFee(uint256)\":{\"notice\":\"used to calculate how much USDC user should pay as interest fee\"},\"collateralInfo(uint256)\":{\"notice\":\"returns the position size and the entry price by collateral ID\"},\"intrinsicValueOf(uint256)\":{\"notice\":\"calculates the intrinsic value of the collateral\"},\"liquidate(uint256)\":{\"notice\":\"used to liquidate the loan\"},\"liquidateByBorderPrice(uint256)\":{\"notice\":\"used to liquidate the loan by border price\"},\"lockCollateral(uint256)\":{\"notice\":\"used to lock the collateral (ERC-721) in DeDeLend\"},\"maxBorrowLimit(uint256)\":{\"notice\":\"calcualtes the maximum borrow size for the specific collateral\"},\"repay(uint256,uint256)\":{\"notice\":\"used to repay the user's debt\"},\"setInterestRate(uint256)\":{\"notice\":\"used to set new interest rate\"},\"setLTV(uint256)\":{\"notice\":\"used to set LTV coefficient\"},\"setMinBorrowLimit(uint256)\":{\"notice\":\"used to set the minimum borrow size\"},\"setPool(address)\":{\"notice\":\"used to connect a new liqidity pool\"},\"unlock(uint256)\":{\"notice\":\"sends the collateral token back to the user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DDL_GMX.sol\":\"DDL_GMX\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DDL.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * DeDeLend\\n * Copyright (C) 2022 DeDeLend\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IPoolDDL.sol\\\";\\n\\nabstract contract DDL is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public LTV;\\n    uint256 public LTV_DECIMALS = 10**4;\\n\\n    IERC721 public collateralToken;\\n    IERC20 public USDC;\\n\\n    uint256 public interestRate = 19025875190258801328521216;\\n    uint256 public INTEREST_RATE_DECIMALS = 10**30;\\n\\n    uint256 public minBorrowLimit;\\n    uint256 public COLLATERAL_DECIMALS;\\n\\n    IPoolDDL public pool;\\n\\n    struct BorrowedByCollateral {\\n        uint256 borrowed;\\n        uint256 newBorrowTimestamp;\\n    }\\n\\n    mapping(uint256 => BorrowedByCollateral) public borrowedByCollateral;\\n    mapping(uint256 => address) public collateralOwner;\\n\\n    event Borrow(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        address strategy,\\n        uint256 timestamp\\n    );\\n\\n    event Repay(address indexed user, uint256 indexed optionID, uint256 amount);\\n    event Liquidate(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 amount,\\n        uint256 poolProfit,\\n        uint256 liqFee\\n    );\\n    event Unlock(address indexed user, uint256 indexed optionID);\\n    event ForcedExercise(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 amount,\\n        uint256 poolProfit,\\n        uint256 liqFee\\n    );\\n    event LiquidateByBorderPrice(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 userReturn,\\n        uint256 poolReturn,\\n        uint256 liqFee\\n    );\\n\\n    constructor(\\n        IERC721 _collateralToken,\\n        IERC20 _USDC,\\n        uint256 _minBorrowLimit,\\n        uint256 _ltv,\\n        uint256 _COLLATERAL_DECIMALS\\n    ) {\\n        collateralToken = _collateralToken;\\n        USDC = _USDC;\\n        minBorrowLimit = _minBorrowLimit;\\n        LTV = _ltv;\\n        COLLATERAL_DECIMALS = 10**_COLLATERAL_DECIMALS;\\n    }\\n\\n    /**\\n     * @notice used to set LTV coefficient\\n     * @param value LTV coefficient.\\n     **/\\n    function setLTV(uint256 value) external onlyOwner {\\n        require(value <= 8000, \\\"invalid value\\\");\\n        LTV = value;\\n    }\\n\\n    /**\\n     * @notice used to set new interest rate\\n     * @param value interest rate (in minutes)\\n     **/\\n    function setInterestRate(uint256 value) external onlyOwner {\\n        interestRate = value;\\n    }\\n\\n    function setInterestRateDecimals(uint256 value) external onlyOwner {\\n        INTEREST_RATE_DECIMALS = value;\\n    }\\n\\n    /**\\n     * @notice used to set the minimum borrow size\\n     * @param value min. borrow size (USDC)\\n     **/\\n    function setMinBorrowLimit(uint256 value) external onlyOwner {\\n        minBorrowLimit = value;\\n    }\\n\\n    /**\\n     * @notice used to connect a new liqidity pool\\n     * @param value the address of the liquidity pool\\n     **/\\n    function setPool(address value) external onlyOwner {\\n        pool = IPoolDDL(value);\\n    }\\n\\n    /**\\n     * @notice used to lock the collateral (ERC-721) in DeDeLend\\n     * @param id collateral ID\\n     **/\\n    function lockCollateral(uint256 id) external {\\n        require(pool.openDeDeLend(), \\\"pauseDeDeLend\\\");\\n        require(collateralToken.ownerOf(id) == msg.sender, \\\"you not owner\\\");\\n        collateralOwner[id] = msg.sender;\\n        _lockCollateral(id, msg.sender);\\n    }\\n\\n    function _lockCollateral(uint256 id, address user) internal virtual;\\n\\n    /**\\n     * @notice calcualtes the maximum borrow size\\n     * for the specific collateral\\n     * @param id collateral ID\\n     **/\\n    function maxBorrowLimit(uint256 id) public view returns (uint256) {\\n        return (intrinsicValueOf(id) / LTV_DECIMALS) * LTV;\\n    }\\n\\n    /**\\n     * @notice send USDC to the user\\n     * @param id collateral ID\\n     * @param amount borrow size (USDC)\\n     **/\\n    function borrow(uint256 id, uint256 amount) external {\\n        require(pool.openDeDeLend(), \\\"pauseDeDeLend\\\");\\n        BorrowedByCollateral storage data = borrowedByCollateral[id];\\n        uint256 maxLimit = maxBorrowLimit(id);\\n        uint256 totalBalance = pool.getTotalBalance();\\n        require(amount >= minBorrowLimit, \\\"amount less minBorrowLimit\\\");\\n        require(amount + data.borrowed <= maxLimit, \\\"borrow is too big\\\");\\n        require(msg.sender == collateralOwner[id], \\\"you are not the owner\\\");\\n        require(\\n            amount <= totalBalance,\\n            \\\"there is not enough money in the pool\\\"\\n        );\\n        _isAvaialbleToBorrow(id);\\n        if (isLong(id)) {\\n            require(currentPrice(id) > borderPrice(id), \\\"the price is too low\\\");\\n        } else {\\n            require(\\n                currentPrice(id) < borderPrice(id),\\n                \\\"the price is too high\\\"\\n            );\\n        }\\n        uint256 upcomingFee = calculateUpcomingFee(id);\\n        borrowedByCollateral[id] = BorrowedByCollateral(\\n            amount + data.borrowed + upcomingFee,\\n            block.timestamp\\n        );\\n        pool.addTotalLocked(amount + upcomingFee);\\n        pool.send(collateralOwner[id], amount);\\n        _emitBorrow(msg.sender, id, amount, block.timestamp);\\n    }\\n\\n    function _isAvaialbleToBorrow(uint256 id) internal virtual;\\n\\n    function _emitBorrow(\\n        address user,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal virtual;\\n\\n    /**\\n     * @notice used to calculate how much USDC\\n     * user should pay as interest fee\\n     * @param id collateral ID\\n     **/\\n    function calculateUpcomingFee(uint256 id)\\n        public\\n        view\\n        returns (uint256 upcomingFee)\\n    {\\n        BorrowedByCollateral storage data = borrowedByCollateral[id];\\n        uint256 periodInMinutes = (block.timestamp - data.newBorrowTimestamp) /\\n            60;\\n        upcomingFee =\\n            ((data.borrowed / 100) * (periodInMinutes * interestRate)) /\\n            INTEREST_RATE_DECIMALS;\\n    }\\n\\n    /**\\n     * @notice used to repay the user's debt\\n     * @param id collateral ID\\n     * @param amount amount to repay (USDC)\\n     **/\\n    function repay(uint256 id, uint256 amount) external {\\n        require(borrowedByCollateral[id].borrowed > 0, \\\"option redeemed\\\");\\n        uint256 upcomingFee = calculateUpcomingFee(id);\\n        require(\\n            amount <= borrowedByCollateral[id].borrowed + upcomingFee,\\n            \\\"amount is too big\\\"\\n        );\\n        require(msg.sender == collateralOwner[id]);\\n        uint256 newBorrow = borrowedByCollateral[id].borrowed +\\n            upcomingFee -\\n            amount;\\n        pool.subTotalLocked(amount - upcomingFee);\\n        borrowedByCollateral[id] = BorrowedByCollateral(\\n            newBorrow,\\n            block.timestamp\\n        );\\n        USDC.transferFrom(collateralOwner[id], address(this), amount);\\n        USDC.transfer(address(pool), amount);\\n        emit Repay(msg.sender, id, amount);\\n    }\\n\\n    /**\\n     * @notice sends the collateral token back to the user\\n     * @param id collateral ID\\n     **/\\n    function unlock(uint256 id) public {\\n        require(borrowedByCollateral[id].borrowed == 0, \\\"loan is locked\\\");\\n        collateralToken.transferFrom(address(this), collateralOwner[id], id);\\n        emit Unlock(msg.sender, id);\\n    }\\n\\n    function isLong(uint256 id) public view virtual returns (bool);\\n\\n    function collateralState(uint256 id) public view returns (bool) {\\n        if (isLong(id)) {\\n            return currentPrice(id) <= liqPrice(id);\\n        } else {\\n            return currentPrice(id) >= liqPrice(id);\\n        }\\n    }\\n\\n    function collateralStateByBorderPrice(uint256 id)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (isLong(id)) {\\n            return currentPrice(id) <= borderPrice(id);\\n        } else {\\n            return currentPrice(id) >= borderPrice(id);\\n        }\\n    }\\n\\n    function currentPrice(uint256 id)\\n        public\\n        view\\n        virtual\\n        returns (uint256 price)\\n    {}\\n\\n    /**\\n     * @param id positon ID\\n     * @notice returns the position size and the entryPrice\\n     **/\\n    function collateralInfo(uint256 id)\\n        public\\n        view\\n        virtual\\n        returns (uint256 amount, uint256 price);\\n\\n    function borderPriceCoefByIndexToken(uint256 id)        \\n        public\\n        view\\n        virtual \\n        returns (uint256 borderPriceCoef);\\n\\n    function borderPrice(uint256 id) public view returns (uint256 price) {\\n        (, uint256 openPrice) = collateralInfo(id);\\n        uint256 priceCoef = borderPriceCoefByIndexToken(id);\\n        if (isLong(id)) {\\n            return (openPrice * (100 + priceCoef)) / 100;\\n        }\\n        return (openPrice * (100 - priceCoef)) / 100;\\n    }\\n\\n    function liqPrice(uint256 id) public view returns (uint256 price) {\\n        BorrowedByCollateral storage data = borrowedByCollateral[id];\\n        (uint256 amount, uint256 openPrice) = collateralInfo(id);\\n        if (isLong(id)) {\\n            return\\n                openPrice + ((data.borrowed * 1e6) / (amount * 1e8/openPrice)) * 120 / 100 * 100;\\n        }\\n        return\\n            openPrice - ((data.borrowed * 1e6) / (amount * 1e8/openPrice)) * 120 / 100 * 100;\\n    }\\n\\n    function currentTriggerPrice(uint256 id)\\n        public\\n        view\\n        returns (uint256 price)\\n    {\\n        if (isLong(id)) {\\n            if (borderPrice(id) > liqPrice(id)) {\\n                return borderPrice(id);\\n            }\\n            return liqPrice(id);\\n        }\\n        if (borderPrice(id) < liqPrice(id)) {\\n            return borderPrice(id);\\n        }\\n        return liqPrice(id);\\n    }\\n\\n    /**\\n     * @notice position's value\\n     * @param id position ID\\n     **/\\n    function intrinsicValueOf(uint256 id)\\n        public\\n        view\\n        virtual\\n        returns (uint256 profit);\\n}\\n\",\"keccak256\":\"0x6c802ce3e7d281d64fecc131015c07d49e00df69554320a4c8e7905846444421\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DDL_GMX.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * DeDeLend\\n * Copyright (C) 2022 DeDeLend\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * \\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.6||0.7.0;\\n\\nimport \\\"./DDL.sol\\\";\\nimport \\\"./interfaces/IAccountManager.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/ITimelock.sol\\\";\\nimport \\\"./interfaces/IPositionRouter.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"./Doppelganger.sol\\\";\\n\\ncontract DDL_GMX is DDL {\\n    IAccountManager public accountManager;\\n    IVault public vault;\\n    IPositionRouter public positionRouter;\\n    int256 public closeSlippage = 10;\\n    uint256 internal constant GMX_DECIMALS = 1e30;\\n\\n    struct PositionInfo {\\n        address indexToken;\\n        uint256 amount;\\n        uint256 openPrice;\\n        bool isLong;\\n    }\\n\\n    struct LiquidatePositionInfo {\\n        uint256 id;\\n        address liquidator;\\n        uint256 amountReturn;\\n        uint256 profit;\\n        bool isBorderPrice;\\n    }\\n\\n    mapping(uint256 => PositionInfo) public positionInfo;\\n    mapping(bytes32 => LiquidatePositionInfo) private liquidatePositionInfo;\\n    mapping(address => uint256) public borderPriceCoef;\\n\\n    constructor(\\n        IPositionRouter _positionRouter,\\n        IAccountManager _accountManager,\\n        IVault _vault,\\n        IERC721 _collateralToken,\\n        IERC20 _USDC,\\n        uint256 _minBorrowLimit,\\n        uint256 _ltv,\\n        uint256 _COLLATERAL_DECIMALS,\\n        address[4] memory _ArrIndexPrice,\\n        uint256[4] memory _ArrBorderPriceCoef\\n    )\\n        DDL(\\n            _collateralToken,\\n            _USDC,\\n            _minBorrowLimit,\\n            _ltv,\\n            _COLLATERAL_DECIMALS\\n        )\\n    {\\n        positionRouter = _positionRouter;\\n        accountManager = _accountManager;\\n        vault = _vault;\\n        for (uint256 i = 0; i < 4; i++) {\\n            borderPriceCoef[_ArrIndexPrice[i]] = _ArrBorderPriceCoef[i];\\n        }\\n    }\\n\\n    function setBorderPriceCoef(uint256 value, address indexToken) external onlyOwner {\\n        borderPriceCoef[indexToken] = value;\\n    }\\n\\n    /**\\n     * @notice takes ERC-721 (collateral) from the user and locking in DDL_GMX\\n     * @param id collateral ID\\n     * @param user user's address\\n     **/\\n    function _lockCollateral(uint256 id, address user) internal override {\\n        (IAccountManager.Symbols symbol, , bool isLong, , ) = accountManager\\n            .keyData(id);\\n        address indexToken = accountManager.indexTokenBySymbol(symbol);\\n        (uint256 size, , uint256 averagePrice, , , , , ) = accountManager\\n            .getPosition(id);\\n        collateralToken.transferFrom(msg.sender, address(this), id);\\n        positionInfo[id] = PositionInfo(indexToken, size, averagePrice, isLong);\\n    }\\n\\n    /**\\n     * @notice checks the ability to borrow USDC by collateral ID\\n     * @param id collateral ID\\n     **/\\n    function _isAvaialbleToBorrow(uint256 id) internal view override {\\n        (bool isProfit, ) = accountManager.getPositionDelta(id);\\n        require(isProfit, \\\"no profit\\\");\\n    }\\n\\n    function _emitBorrow(\\n        address user,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal override {\\n        emit Borrow(\\n            user,\\n            id,\\n            amount,\\n            positionInfo[id].indexToken,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice calculates the intrinsic value of the collateral\\n     * @param id collateral ID\\n     **/\\n    function intrinsicValueOf(uint256 id)\\n        public\\n        view\\n        override\\n        returns (uint256 delta)\\n    {\\n        (bool isProfit, uint256 profit) = accountManager.getPositionDelta(id);\\n        profit = profit / (GMX_DECIMALS / 1e6);\\n        return (isProfit ? profit : 0);\\n    }\\n\\n    /**\\n     * @notice closes position on GMX\\n     * @param id collateral id\\n     **/\\n    function _liquidateCollateral(uint256 id, bool isBorderPrice) internal {\\n        (, address doppelgangerContract, bool isLong, , ) = accountManager\\n            .keyData(id);\\n        PositionInfo memory data = positionInfo[id];\\n        (uint256 closePrice, uint256 size) = liquidateClosePrice(id);\\n        (address[] memory path, uint256 closeValue) = _preparationData(id);\\n        Doppelganger(payable(doppelgangerContract)).createDecreasePosition{\\n            value: msg.value\\n        }(\\n            address(this),\\n            path,\\n            data.indexToken,\\n            closeValue,\\n            size,\\n            data.isLong,\\n            closePrice,\\n            0,\\n            positionRouter.minExecutionFee(),\\n            false,\\n            address(this)\\n        );\\n        uint256 amountReturn = decreasePositionReturnValue(\\n            doppelgangerContract,\\n            path[0],\\n            data.indexToken,\\n            closeValue,\\n            size,\\n            isLong\\n        );\\n        if (amountReturn > 0) {\\n            if (path.length > 1) {\\n                amountReturn = _swap(path[0], path[1], amountReturn);\\n            }\\n        }\\n        informationFromCallback(\\n            doppelgangerContract,\\n            id,\\n            isBorderPrice,\\n            amountReturn\\n        );\\n    }\\n\\n    function _swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 amountIn\\n    ) internal returns (uint256) {\\n        uint256 priceIn = vault.getMinPrice(_tokenIn);\\n        uint256 priceOut = vault.getMaxPrice(_tokenOut);\\n        uint256 amountOut = (amountIn * priceIn) / priceOut;\\n        amountOut = vault.adjustForDecimals(amountOut, _tokenIn, _tokenOut);\\n\\n        uint256 usdgAmount = (amountIn * priceIn) / GMX_DECIMALS;\\n        usdgAmount = vault.adjustForDecimals(\\n            usdgAmount,\\n            _tokenIn,\\n            vault.usdg()\\n        );\\n        bool isStableSwap = vault.stableTokens(_tokenIn) && vault.stableTokens(_tokenOut);\\n        uint256 feeBasisPoints;\\n        {\\n            uint256 baseBps = isStableSwap ? vault.stableSwapFeeBasisPoints() : vault.swapFeeBasisPoints();\\n            uint256 taxBps = isStableSwap ? vault.stableTaxBasisPoints() : vault.taxBasisPoints();\\n            uint256 feesBasisPoints0 = vault.getFeeBasisPoints(_tokenIn, usdgAmount, baseBps, taxBps, true);\\n            uint256 feesBasisPoints1 = vault.getFeeBasisPoints(_tokenOut, usdgAmount, baseBps, taxBps, false);\\n            // use the higher of the two fee basis points\\n            feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\\n        }\\n\\n        uint256 amountOutAfterFees = _collectSwapFees(\\n            amountOut,\\n            feeBasisPoints\\n        );\\n        return amountOutAfterFees;\\n    }\\n\\n    function informationFromCallback(\\n        address doppelgangerContract,\\n        uint256 id,\\n        bool isBorderPrice,\\n        uint256 amountReturn\\n    ) private {\\n        uint256 index = positionRouter.decreasePositionsIndex(\\n            doppelgangerContract\\n        );\\n        bytes32 requestKey = positionRouter.getRequestKey(\\n            doppelgangerContract,\\n            index\\n        );\\n        uint256 profit = intrinsicValueOf(id);\\n        liquidatePositionInfo[requestKey] = LiquidatePositionInfo(\\n            id,\\n            msg.sender,\\n            amountReturn,\\n            profit,\\n            isBorderPrice\\n        );\\n    }\\n\\n    /**\\n     * @notice used to liquidate the loan\\n     * @param id position ID\\n     **/\\n    function liquidate(uint256 id) external payable {\\n        require(collateralState(id), \\\"invalid price\\\");\\n        require(\\n            msg.value >= positionRouter.minExecutionFee(),\\n            \\\"minExecutionFee too smal\\\"\\n        );\\n        _liquidateCollateral(id, false);\\n    }\\n\\n    function borderPriceCoefByIndexToken(uint256 id)         \\n        public\\n        view\\n        override\\n        returns (uint256 priceCoef) {\\n            return borderPriceCoef[positionInfo[id].indexToken];\\n        }\\n\\n    /**\\n     * @notice used to liquidate the loan by border price\\n     * @param id collateral ID\\n     **/\\n    function liquidateByBorderPrice(uint256 id) external payable {\\n        require(collateralStateByBorderPrice(id), \\\"invalid price\\\");\\n        require(\\n            msg.value >= positionRouter.minExecutionFee(),\\n            \\\"minExecutionFee too smal\\\"\\n        );\\n        _liquidateCollateral(id, true);\\n    }\\n\\n    function gmxPositionCallback(\\n        bytes32 positionKey,\\n        bool isExecuted,\\n        bool isIncrease\\n    ) external {\\n        require(\\n            msg.sender == address(positionRouter),\\n            \\\"msg.sender is not positionRouter\\\"\\n        );\\n        address liquidator = liquidatePositionInfo[positionKey].liquidator;\\n        if (liquidator != address(0)) {\\n            uint256 diff = 0;\\n            uint256 id = liquidatePositionInfo[positionKey].id;\\n            uint256 borrowed = borrowedByCollateral[id].borrowed;\\n            uint256 returnValue = liquidatePositionInfo[positionKey]\\n                .amountReturn;\\n            uint256 profit = liquidatePositionInfo[positionKey].profit;\\n            pool.subTotalLocked(borrowed);\\n            if (liquidatePositionInfo[positionKey].isBorderPrice) {\\n                USDC.transfer(address(pool), borrowed);\\n                USDC.transfer(\\n                    collateralOwner[id],\\n                    returnValue - (borrowed + (borrowed * 10) / 100)\\n                );\\n                USDC.transfer(liquidator, (borrowed * 10) / 100);\\n                emit LiquidateByBorderPrice(\\n                    collateralOwner[id],\\n                    id,\\n                    returnValue - (borrowed + (borrowed * 10) / 100),\\n                    borrowed,\\n                    (borrowed * 10) / 100\\n                );\\n            } else {\\n                if (profit > borrowed) {\\n                    diff = profit - borrowed;\\n                    USDC.transfer(address(pool), borrowed + (diff * 90) / 100);\\n                    USDC.transfer(liquidator, (diff * 10) / 100);\\n                    USDC.transfer(\\n                        collateralOwner[id],\\n                        returnValue -\\n                            (borrowed + (diff * 90) / 100) -\\n                            (diff * 10) /\\n                            100\\n                    );\\n                } else {\\n                    USDC.transfer(address(pool), borrowed);\\n                    USDC.transfer(collateralOwner[id], returnValue - borrowed);\\n                }\\n                emit Liquidate(\\n                    collateralOwner[id],\\n                    id,\\n                    borrowed,\\n                    (diff * 90) / 100,\\n                    (diff * 10) / 100\\n                );\\n            }\\n            collateralToken.transferFrom(\\n                address(this),\\n                collateralOwner[id],\\n                id\\n            );\\n        }\\n    }\\n\\n    function _preparationData(uint256 id)\\n        internal\\n        view\\n        returns (address[] memory path, uint256 closeValue)\\n    {\\n        (, uint256 collateral, , , , , , ) = accountManager.getPosition(id);\\n        (bool isProfit, uint256 delta) = accountManager.getPositionDelta(id);\\n        closeValue = (isProfit ? collateral : delta);\\n        if (positionInfo[id].isLong) {\\n            path = new address[](2);\\n            path[0] = positionInfo[id].indexToken;\\n            path[1] = address(USDC);\\n        } else {\\n            path = new address[](1);\\n            path[0] = address(USDC);\\n        }\\n    }\\n\\n    function liquidateClosePrice(uint256 id)\\n        internal\\n        view\\n        returns (uint256 closePrice, uint256 size)\\n    {\\n        (size, , , , , , , ) = accountManager.getPosition(id);\\n        require(size != 0, \\\"position size is null\\\");\\n        closePrice =\\n            (accountManager.currentPrice(id) / 1000) *\\n            uint256(\\n                positionInfo[id].isLong\\n                    ? int256(1000) - closeSlippage\\n                    : int256(1000) + closeSlippage\\n            );\\n    }\\n\\n    function isLong(uint256 id) public view override returns (bool) {\\n        return accountManager.isLong(id);\\n    }\\n\\n    function currentPrice(uint256 id) public view override returns (uint256) {\\n        PositionInfo memory data = positionInfo[id];\\n        if (isLong(id)) {\\n            return vault.getMaxPrice(data.indexToken) / (GMX_DECIMALS / 1e8);\\n        }\\n        return vault.getMinPrice(data.indexToken) / (GMX_DECIMALS / 1e8);\\n    }\\n\\n    /**\\n     * @notice returns the position size and the entry price by collateral ID\\n     * @param id collateral id\\n     **/\\n    function collateralInfo(uint256 id)\\n        public\\n        view\\n        override\\n        returns (uint256 amount, uint256 price)\\n    {\\n        (uint256 size, , uint256 averagePrice, , , , , ) = accountManager\\n            .getPosition(id);\\n        return (\\n            size / (GMX_DECIMALS / 1e6),\\n            averagePrice / (GMX_DECIMALS / 1e8)\\n        );\\n    }\\n\\n    function decreasePositionReturnValue(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) internal returns (uint256) {\\n        (uint256 usdOut, uint256 usdOutAfterFee) = _reduceCollateral(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong\\n        );\\n        if (usdOut > 0) {\\n            uint256 amountOutAfterFees = vault.usdToTokenMin(\\n                _collateralToken,\\n                usdOutAfterFee\\n            );\\n            return amountOutAfterFees;\\n        }\\n        return 0;\\n    }\\n\\n    function _reduceCollateral(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) private returns (uint256, uint256) {\\n        (\\n            uint256 size,\\n            uint256 collateral,\\n            uint256 averagePrice,\\n            uint256 entryFundingRate,\\n            ,\\n            ,\\n            ,\\n            uint256 lastIncreasedTime\\n        ) = vault.getPosition(_account, _collateralToken, _indexToken, _isLong);\\n        uint256 fee = _collectMarginFees(\\n            _collateralToken,\\n            _sizeDelta,\\n            size,\\n            entryFundingRate\\n        );\\n        (bool hasProfit, uint256 delta) = vault.getDelta(\\n            _indexToken,\\n            size,\\n            averagePrice,\\n            _isLong,\\n            lastIncreasedTime\\n        );\\n        uint256 adjustedDelta = (_sizeDelta * delta) / size;\\n        uint256 usdOut;\\n        if (hasProfit && adjustedDelta > 0) {\\n            usdOut = adjustedDelta;\\n        }\\n        if (!hasProfit && adjustedDelta > 0) {\\n            collateral -= adjustedDelta;\\n        }\\n        if (_collateralDelta > 0) {\\n            usdOut += _collateralDelta;\\n            collateral -= _collateralDelta;\\n        }\\n        if (size == _sizeDelta) {\\n            usdOut = usdOut + collateral;\\n        }\\n        uint256 usdOutAfterFee = usdOut;\\n        if (usdOut > fee) {\\n            usdOutAfterFee = usdOut - fee;\\n        }\\n        return (usdOut, usdOutAfterFee);\\n    }\\n\\n    function _collectMarginFees(\\n        address _collateralToken,\\n        uint256 _sizeDelta,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) private returns (uint256) {\\n        uint256 feeUsd = _getPositionFee(_sizeDelta);\\n        uint256 fundingFee = vault.getFundingFee(\\n            _collateralToken,\\n            _size,\\n            _entryFundingRate\\n        );\\n        feeUsd += fundingFee;\\n        return feeUsd;\\n    }\\n\\n    function _getPositionFee(uint256 _sizeDelta) private returns (uint256) {\\n        if (_sizeDelta == 0) {\\n            return 0;\\n        }\\n        uint256 afterFeeUsd = (_sizeDelta *\\n            (vault.BASIS_POINTS_DIVISOR() -\\n                ITimelock(vault.gov()).marginFeeBasisPoints())) /\\n            vault.BASIS_POINTS_DIVISOR();\\n        return _sizeDelta - afterFeeUsd;\\n    }\\n\\n    function _collectSwapFees(\\n        uint256 _amount,\\n        uint256 _feeBasisPoints\\n    ) private returns (uint256) {\\n        uint256 afterFeeAmount = (_amount *\\n            (vault.BASIS_POINTS_DIVISOR() - _feeBasisPoints)) /\\n            vault.BASIS_POINTS_DIVISOR();\\n        return afterFeeAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x3ea26ae71940ca0f5886d91e0c7cd2cdc4999c71b91a569ffd3f1bbb00b779b0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Doppelganger.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * DeDeLend\\n * Copyright (C) 2022 DeDeLend\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.6||0.6.12;\\n\\nimport \\\"./interfaces/IPositionRouter.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IAccountManager.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Doppelganger {\\n    using SafeERC20 for IERC20;\\n\\n    receive() external payable{}\\n\\n    IPositionRouter public positionRouter;\\n    mapping(address => mapping(bool => uint256)) public keyByIndexToken;\\n    mapping(uint256  => bool) public keys;\\n    ERC721 public GMXPT;\\n    address public immutable router;\\n    address[4] public indexTokenArray;\\n    address[4] public stablecoinsArray;\\n    address public accountManager;\\n    address public ddl_gmx;\\n    bool public isApproved = false;\\n\\n    constructor(\\n        IPositionRouter _positionRouter,\\n        address _router,\\n        uint256[8] memory keyArray,\\n        address[8] memory _indexTokenArray,\\n        address[4] memory _stablecoinsArray,\\n        address _accountManager,\\n        address _accountManagerToken,\\n        address _ddl_gmx\\n    ) {\\n        positionRouter = _positionRouter;\\n        router = _router;\\n        for (uint256 i = 0; i < 8; i++) {\\n            if (i < 4) {\\n                indexTokenArray[i] = _indexTokenArray[i];\\n                stablecoinsArray[i] = _stablecoinsArray[i];\\n            }\\n            keyByIndexToken[_indexTokenArray[i]][\\n                i < 4 ? true : false\\n            ] = keyArray[i];\\n            keys[keyArray[i]] = true; \\n        }\\n        GMXPT = ERC721(_accountManagerToken);\\n        accountManager = _accountManager;\\n        ddl_gmx = _ddl_gmx;\\n    }\\n\\n    function _checkKeyAndMsgSender(address user, address _indexToken, bool _isLong) private {\\n        require(\\n            GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]) == user,\\n            \\\"You re not the owner of the position\\\"\\n        );\\n        require(keys[keyByIndexToken[_indexToken][_isLong]], \\\"invalid key\\\");\\n        if (msg.sender != ddl_gmx) {\\n            require(msg.sender == accountManager, \\\"invalid msg.sender\\\");\\n        }\\n    }\\n\\n    function createIncreasePosition(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        positionRouter.createIncreasePosition{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createIncreasePositionETH(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        positionRouter.createIncreasePositionETH{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createDecreasePosition(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable {\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        require(keyOwner == user, \\\"You are not the owner of the position\\\");\\n        if (msg.sender != ddl_gmx) {\\n            require(msg.sender == accountManager, \\\"invalid msg.sender\\\");\\n        }\\n        positionRouter.createDecreasePosition{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            keyOwner,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            _withdrawETH,\\n            _callbackTarget\\n        );\\n    }\\n\\n    /**\\n     * @param value maxUnit256\\n     **/\\n    function approveAll(uint256 value) public {\\n        IRouter(router).approvePlugin(address(positionRouter));\\n        for (uint256 i = 0; i < 4; i++) {\\n            ERC20(indexTokenArray[i]).approve(address(positionRouter), value);\\n            ERC20(indexTokenArray[i]).approve(router, value);\\n            ERC20(stablecoinsArray[i]).approve(address(positionRouter), value);\\n            ERC20(stablecoinsArray[i]).approve(router, value);\\n        }\\n        isApproved = true;\\n    }\\n}\\n\",\"keccak256\":\"0x483a7c3a5ad23b67abc8da571ce96d510c86e320e4a42c4d71937e33328e0b4c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAccountManager.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IAccountManager {\\n    enum Symbols {\\n        ETH_USD_LONG,\\n        BTC_USD_LONG,\\n        LINK_USD_LONG,\\n        UNI_USD_LONG,\\n        ETH_USD_SHORT,\\n        BTC_USD_SHORT,\\n        LINK_USD_SHORT,\\n        UNI_USD_SHORT\\n    }\\n    function keyData(uint256 id) external returns (\\n        Symbols symbol, \\n        address doppelgangerContract, \\n        bool isLong,\\n        address indexToken,\\n        address user\\n    );\\n    function indexTokenBySymbol(Symbols symbol) external returns (address indexToken);\\n    function getPositionDelta(uint256 id) external view returns (bool isProfit, uint256 profit);\\n    function getPosition(uint256 id) external view returns (\\n        uint256 size, \\n        uint256 collateral, \\n        uint256 averagePrice, \\n        uint256 entryFundingRate, \\n        uint256 reserveAmount, \\n        uint256 realisedPnl,\\n        bool isProfit, \\n        uint256 lastIncreasedTime\\n    );\\n    function currentPrice(uint256 id) external view returns (uint256 price);\\n    function isLong(uint256 id) external view returns (bool);\\n}\",\"keccak256\":\"0xfbf4e576fedac7c10f9da573acdc382dd371c15b7e3c90c371499cb1251c9bbc\"},\"contracts/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IOrderBook {\\n\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\\n        address path0, \\n        address path1,\\n        address path2,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken, \\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function createIncreaseOrder(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap\\n    ) external payable;\\n    function cancelIncreaseOrder(uint256 _orderIndex) external;\\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\\n    function updateIncreaseOrder(uint256 _orderIndex, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external;\\n\\n    function createDecreaseOrder(\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external payable;\\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\\n    function cancelDecreaseOrder(uint256 _orderIndex) external;\\n    function updateDecreaseOrder(\\n        uint256 _orderIndex,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external;\\n\\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\\n}\\n\",\"keccak256\":\"0x00c439d23a66e4e44ec7e16dc8d46e2fe041c3ae2bbd72ce70172dd8d781c766\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolDDL.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IPoolDDL {\\n    function send(address to, uint amount) external;\\n    function getTotalBalance() external view returns (uint256 balance);\\n    function addTotalLocked(uint256 value) external;\\n    function subTotalLocked(uint256 value) external; \\n    function openDeDeLend() external view returns (bool openDeDeLend);\\n}\",\"keccak256\":\"0xc8ac2c3446c29742ebf558b0e7b67c715d00fd3db64455f83d730f72d6dbcd5c\"},\"contracts/interfaces/IPositionRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IPositionRouter {\\n    function increasePositionRequestKeysStart() external returns (uint256);\\n    function decreasePositionRequestKeysStart() external returns (uint256);\\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function executeIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function cancelIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function executeDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function cancelDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function createIncreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable;\\n    function createIncreasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable;\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable;\\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\\n    function getRequestKey(address _account, uint256 _index) external pure returns (bytes32);\\n    function decreasePositionsIndex(address _account) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x70910123732b5068f4c441f9f65aef17ee660bbf8ad17ac94f5170398dc6b826\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n    function approvePlugin(address _plugin) external;\\n}\\n\",\"keccak256\":\"0x8496939c59721c4414a6825788f56df0479e491374a8459c8a4d731577f07fae\",\"license\":\"MIT\"},\"contracts/interfaces/ITimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12 || 0.8.6;\\n\\ninterface ITimelock {\\n    function setAdmin(address _admin) external;\\n    function enableLeverage(address _vault) external;\\n    function disableLeverage(address _vault) external;\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\\n    function signalSetGov(address _target, address _gov) external;\\n    function marginFeeBasisPoints() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb0d0496b75fc5b341a032779b4dac185c039498624468bf16d96d98dca6f6f81\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12 || 0.8.6;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function adjustForDecimals(uint256 _amount, address _tokenDiv, address _tokenMul) external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function getPositionDelta(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (bool, uint256);\\n    function getPositionFee(uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _token, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function usdToTokenMin(address _token, uint256 _usdAmount) external view returns (uint256);\\n    function vaultUtils() external returns(IVaultUtils vaultUtils);\\n    function BASIS_POINTS_DIVISOR() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x28a0d0cba706c5aba7de5cff792e2bb3db0dd0171977fcc0d04ee660d5a96efc\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12 || 0.8.6;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function BASIS_POINTS_DIVISOR() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8df03708cc9172cf58802be82c595cac70b07d859e2f1817068d0843155d0804\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526127106002556a0fbce2c2bf9562000000006005556c0c9f2c9cd04674edea40000000600655600a600f553480156200003c57600080fd5b50604051620049da380380620049da8339810160408190526200005f9162000274565b86868686866200006f33620001c6565b600380546001600160a01b038088166001600160a01b031992831617909255600480549287169290911691909117905560078390556001829055620000b681600a62000412565b600881905550505050505089600e60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088600c60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600d60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060005b6004811015620001b55781816004811062000158576200015862000511565b60200201516012600085846004811062000176576200017662000511565b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080620001ac90620004dd565b91505062000139565b505050505050505050505062000540565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082601f8301126200022857600080fd5b6200023262000392565b8083856080860111156200024557600080fd5b60005b60048110156200026957815184526020938401939091019060010162000248565b509095945050505050565b6000806000806000806000806000806102008b8d0312156200029557600080fd5b8a51620002a28162000527565b60208c0151909a50620002b58162000527565b60408c0151909950620002c88162000527565b60608c0151909850620002db8162000527565b60808c0151909750620002ee8162000527565b8096505060a08b0151945060c08b0151935060e08b015192508b61011f8c01126200031857600080fd5b6200032262000392565b806101008d018e6101808f0111156200033a57600080fd5b60005b60048110156200036a578151620003548162000527565b845260209384019391909101906001016200033d565b50508093505050620003818c6101808d0162000216565b90509295989b9194979a5092959850565b604051608081016001600160401b0381118282101715620003c357634e487b7160e01b600052604160045260246000fd5b60405290565b600181815b808511156200040a578160001904821115620003ee57620003ee620004fb565b80851615620003fc57918102915b93841c9390800290620003ce565b509250929050565b600062000420838362000427565b9392505050565b6000826200043857506001620004d7565b816200044757506000620004d7565b81600181146200046057600281146200046b576200048b565b6001915050620004d7565b60ff8411156200047f576200047f620004fb565b50506001821b620004d7565b5060208310610133831016604e8410600b8410161715620004b0575081810a620004d7565b620004bc8383620003c9565b8060001904821115620004d357620004d3620004fb565b0290505b92915050565b6000600019821415620004f457620004f4620004fb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146200053d57600080fd5b50565b61448a80620005506000396000f3fe6080604052600436106102725760003560e01c80637c3a00fd1161014f578063c215ac21116100c1578063e260d7471161007a578063e260d747146107fb578063e5bad72314610811578063edf3daec14610831578063f2fde38b14610851578063fbfa77cf14610871578063fecb63571461089157600080fd5b8063c215ac2114610718578063c37077091461075b578063c57610ae1461077b578063d88c69101461079b578063d8aed145146107bb578063e2233cbd146107db57600080fd5b80639d38d064116101135780639d38d0641461064e5780639e3aa5b114610664578063a226b48314610684578063b13de266146106a4578063b2016bd4146106c4578063b3b840df146106e457600080fd5b80637c3a00fd1461055f57806389097a6a1461057557806389a30271146105f05780638da5cb5b1461061057806391c2c4691461062e57600080fd5b80634de33fda116101e857806362965d8e116101ac57806362965d8e146104ae57806363ce2008146104c457806366234ffa146104e4578063715018a6146104fa578063798816981461050f5780637a3c4c171461053f57600080fd5b80634de33fda1461040e578063587a03c21461042e5780635f84f3021461044e5780636198e3391461046e57806361ef161f1461048e57600080fd5b806324a6665e1161023a57806324a6665e1461035a578063415f12401461038f57806341f6cf4e146103a25780634437152a146103b8578063484f1371146103d85780634ddde78d146103f857600080fd5b80630ecbcdab1461027757806316f0115b146102995780631753b408146102d65780631a42621614610311578063200549ca14610324575b600080fd5b34801561028357600080fd5b5061029761029236600461415f565b6108b1565b005b3480156102a557600080fd5b506009546102b9906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102e257600080fd5b506103036102f1366004613fbd565b60126020526000908152604090205481565b6040519081526020016102cd565b61029761031f366004614116565b610d8e565b34801561033057600080fd5b506102b961033f366004614116565b600b602052600090815260409020546001600160a01b031681565b34801561036657600080fd5b5061037a610375366004614116565b610eb1565b604080519283526020830191909152016102cd565b61029761039d366004614116565b610f97565b3480156103ae57600080fd5b50610303600f5481565b3480156103c457600080fd5b506102976103d3366004613fbd565b6110b7565b3480156103e457600080fd5b506103036103f3366004614116565b6110e1565b34801561040457600080fd5b5061030360085481565b34801561041a57600080fd5b50610303610429366004614116565b61114a565b34801561043a57600080fd5b50610297610449366004614116565b6111b0565b34801561045a57600080fd5b50610297610469366004614116565b6111bd565b34801561047a57600080fd5b50610297610489366004614116565b6111ca565b34801561049a57600080fd5b50600e546102b9906001600160a01b031681565b3480156104ba57600080fd5b5061030360015481565b3480156104d057600080fd5b506102976104df36600461412f565b6112bf565b3480156104f057600080fd5b5061030360065481565b34801561050657600080fd5b506102976112e1565b34801561051b57600080fd5b5061052f61052a366004614116565b6112f5565b60405190151581526020016102cd565b34801561054b57600080fd5b5061030361055a366004614116565b611339565b34801561056b57600080fd5b5061030360055481565b34801561058157600080fd5b506105c4610590366004614116565b60106020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016102cd565b3480156105fc57600080fd5b506004546102b9906001600160a01b031681565b34801561061c57600080fd5b506000546001600160a01b03166102b9565b34801561063a57600080fd5b50600c546102b9906001600160a01b031681565b34801561065a57600080fd5b5061030360025481565b34801561067057600080fd5b5061030361067f366004614116565b61148c565b34801561069057600080fd5b5061052f61069f366004614116565b6114b7565b3480156106b057600080fd5b506102976106bf366004614116565b611534565b3480156106d057600080fd5b506003546102b9906001600160a01b031681565b3480156106f057600080fd5b5061037a6106ff366004614116565b600a602052600090815260409020805460019091015482565b34801561072457600080fd5b50610303610733366004614116565b6000908152601060209081526040808320546001600160a01b03168352601290915290205490565b34801561076757600080fd5b50610297610776366004614116565b611583565b34801561078757600080fd5b50610303610796366004614116565b611590565b3480156107a757600080fd5b506103036107b6366004614116565b6115eb565b3480156107c757600080fd5b506102976107d636600461415f565b6116db565b3480156107e757600080fd5b506102976107f6366004614116565b6119d0565b34801561080757600080fd5b5061030360075481565b34801561081d57600080fd5b5061030361082c366004614116565b611b80565b34801561083d57600080fd5b5061029761084c36600461405b565b611c37565b34801561085d57600080fd5b5061029761086c366004613fbd565b612454565b34801561087d57600080fd5b50600d546102b9906001600160a01b031681565b34801561089d57600080fd5b5061052f6108ac366004614116565b6124ca565b600960009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ff57600080fd5b505afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190613ff7565b6109785760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b60448201526064015b60405180910390fd5b6000828152600a60205260408120906109908461148c565b90506000600960009054906101000a90046001600160a01b03166001600160a01b03166312b583496040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190614042565b9050600754841015610a6e5760405162461bcd60e51b815260206004820152601a60248201527f616d6f756e74206c657373206d696e426f72726f774c696d6974000000000000604482015260640161096f565b82548290610a7c9086614356565b1115610abe5760405162461bcd60e51b8152602060048201526011602482015270626f72726f7720697320746f6f2062696760781b604482015260640161096f565b6000858152600b60205260409020546001600160a01b03163314610b1c5760405162461bcd60e51b81526020600482015260156024820152743cb7ba9030b932903737ba103a34329037bbb732b960591b604482015260640161096f565b80841115610b7a5760405162461bcd60e51b815260206004820152602560248201527f7468657265206973206e6f7420656e6f756768206d6f6e657920696e20746865604482015264081c1bdbdb60da1b606482015260840161096f565b610b83856124ec565b610b8c856114b7565b15610bec57610b9a8561114a565b610ba386611339565b11610be75760405162461bcd60e51b815260206004820152601460248201527374686520707269636520697320746f6f206c6f7760601b604482015260640161096f565b610c43565b610bf58561114a565b610bfe86611339565b10610c435760405162461bcd60e51b81526020600482015260156024820152740e8d0ca40e0e4d2c6ca40d2e640e8dede40d0d2ced605b1b604482015260640161096f565b6000610c4e866110e1565b9050604051806040016040528082866000015488610c6c9190614356565b610c769190614356565b8152426020918201526000888152600a825260409020825181559101516001909101556009546001600160a01b0316632bc355ca610cb48388614356565b6040518263ffffffff1660e01b8152600401610cd291815260200190565b600060405180830381600087803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b50506009546000898152600b602052604090819020549051633419e74d60e21b81526001600160a01b03928316945063d0679d349350610d48929091169089906004016142d4565b600060405180830381600087803b158015610d6257600080fd5b505af1158015610d76573d6000803e3d6000fd5b50505050610d86338787426125a8565b505050505050565b610d97816124ca565b610dd35760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015260640161096f565b600e60009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2157600080fd5b505afa158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e599190614042565b341015610ea35760405162461bcd60e51b81526020600482015260186024820152771b5a5b915e1958dd5d1a5bdb919959481d1bdbc81cdb585b60421b604482015260640161096f565b610eae816001612609565b50565b600c5460405163eb02c30160e01b8152600481018390526000918291829182916001600160a01b039091169063eb02c301906024016101006040518083038186803b158015610eff57600080fd5b505afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190614181565b50505050509250509150620f42406c0c9f2c9cd04674edea40000000610f5d919061436e565b610f67908361436e565b610f826305f5e1006c0c9f2c9cd04674edea4000000061436e565b610f8c908361436e565b935093505050915091565b610fa0816112f5565b610fdc5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015260640161096f565b600e60009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110629190614042565b3410156110ac5760405162461bcd60e51b81526020600482015260186024820152771b5a5b915e1958dd5d1a5bdb919959481d1bdbc81cdb585b60421b604482015260640161096f565b610eae816000612609565b6110bf61289d565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600a6020526040812060018101548290603c9061110390426143ee565b61110d919061436e565b9050600654600554826111209190614390565b835461112e9060649061436e565b6111389190614390565b611142919061436e565b949350505050565b60008061115683610eb1565b6000858152601060209081526040808320546001600160a01b0316835260129091529020549092509050611189846114b7565b156111a457606461119a8282614356565b6111389084614390565b606461119a82826143ee565b6111b861289d565b600655565b6111c561289d565b600555565b6000818152600a6020526040902054156112175760405162461bcd60e51b815260206004820152600e60248201526d1b1bd85b881a5cc81b1bd8dad95960921b604482015260640161096f565b6003546000828152600b6020526040908190205490516323b872dd60e01b81526001600160a01b03928316926323b872dd9261125d9230929091169086906004016141eb565b600060405180830381600087803b15801561127757600080fd5b505af115801561128b573d6000803e3d6000fd5b50506040518392503391507f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f190600090a350565b6112c761289d565b6001600160a01b0316600090815260126020526040902055565b6112e961289d565b6112f360006128f7565b565b6000611300826114b7565b1561131f5761130e826115eb565b61131783611339565b111592915050565b611328826115eb565b61133183611339565b101592915050565b6000818152601060209081526040808320815160808101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003015460ff161515606082015261138e836114b7565b1561143e576113ae6305f5e1006c0c9f2c9cd04674edea4000000061436e565b600d548251604051637092736960e11b81526001600160a01b03918216600482015291169063e124e6d2906024015b60206040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d9190614042565b611437919061436e565b9392505050565b6114596305f5e1006c0c9f2c9cd04674edea4000000061436e565b600d5482516040516340d3096b60e11b81526001600160a01b0391821660048201529116906381a612d6906024016113dd565b600060015460025461149d84611b80565b6114a7919061436e565b6114b19190614390565b92915050565b600c5460405163a226b48360e01b8152600481018390526000916001600160a01b03169063a226b4839060240160206040518083038186803b1580156114fc57600080fd5b505afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b19190613ff7565b61153c61289d565b611f4081111561157e5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b604482015260640161096f565b600155565b61158b61289d565b600755565b600061159b826114b7565b156115ca576115a9826115eb565b6115b28361114a565b11156115c1576114b18261114a565b6114b1826115eb565b6115d3826115eb565b6115dc8361114a565b10156115c1576114b18261114a565b6000818152600a60205260408120818061160485610eb1565b91509150611611856114b7565b1561167d57606481611627846305f5e100614390565b611631919061436e565b845461164090620f4240614390565b61164a919061436e565b611655906078614390565b61165f919061436e565b61166a906064614390565b6116749082614356565b95945050505050565b60648161168e846305f5e100614390565b611698919061436e565b84546116a790620f4240614390565b6116b1919061436e565b6116bc906078614390565b6116c6919061436e565b6116d1906064614390565b61167490826143ee565b6000828152600a60205260409020546117285760405162461bcd60e51b815260206004820152600f60248201526e1bdc1d1a5bdb881c995919595b5959608a1b604482015260640161096f565b6000611733836110e1565b6000848152600a6020526040902054909150611750908290614356565b8211156117935760405162461bcd60e51b8152602060048201526011602482015270616d6f756e7420697320746f6f2062696760781b604482015260640161096f565b6000838152600b60205260409020546001600160a01b031633146117b657600080fd5b6000838152600a602052604081205483906117d2908490614356565b6117dc91906143ee565b6009549091506001600160a01b0316631b45a68d6117fa84866143ee565b6040518263ffffffff1660e01b815260040161181891815260200190565b600060405180830381600087803b15801561183257600080fd5b505af1158015611846573d6000803e3d6000fd5b505060408051808201825284815242602080830191825260008a8152600a825284812093518455915160019093019290925560048054600b909352908390205492516323b872dd60e01b81526001600160a01b0392831695506323b872dd94506118b8939092169130918991016141eb565b602060405180830381600087803b1580156118d257600080fd5b505af11580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a9190613ff7565b506004805460095460405163a9059cbb60e01b81526001600160a01b039283169363a9059cbb9361193f9316918891016142d4565b602060405180830381600087803b15801561195957600080fd5b505af115801561196d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119919190613ff7565b50604051838152849033907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d0906020015b60405180910390a350505050565b600960009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190613ff7565b611a925760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b604482015260640161096f565b6003546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e9060240160206040518083038186803b158015611ad657600080fd5b505afa158015611aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0e9190613fda565b6001600160a01b031614611b545760405162461bcd60e51b815260206004820152600d60248201526c3cb7ba903737ba1037bbb732b960991b604482015260640161096f565b6000818152600b6020526040902080546001600160a01b03191633908117909155610eae908290612947565b600c546040516332d53b1760e01b815260048101839052600091829182916001600160a01b0316906332d53b1790602401604080518083038186803b158015611bc857600080fd5b505afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c009190614014565b9092509050611c1f620f42406c0c9f2c9cd04674edea4000000061436e565b611c29908261436e565b905081611437576000611142565b600e546001600160a01b03163314611c915760405162461bcd60e51b815260206004820181905260248201527f6d73672e73656e646572206973206e6f7420706f736974696f6e526f75746572604482015260640161096f565b6000838152601160205260409020600101546001600160a01b0316801561244e5760008481526011602081815260408084208054808652600a8452828620548a87529490935260028101546003909101546009549251631b45a68d60e01b815260048101869052939493919290916001600160a01b0390911690631b45a68d90602401600060405180830381600087803b158015611d2e57600080fd5b505af1158015611d42573d6000803e3d6000fd5b50505060008a81526011602052604090206004015460ff16159050611fe2576004805460095460405163a9059cbb60e01b81526001600160a01b039283169363a9059cbb93611d959316918891016142d4565b602060405180830381600087803b158015611daf57600080fd5b505af1158015611dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de79190613ff7565b506004546000858152600b60205260409020546001600160a01b039182169163a9059cbb91166064611e1a87600a614390565b611e24919061436e565b611e2e9087614356565b611e3890866143ee565b6040518363ffffffff1660e01b8152600401611e559291906142d4565b602060405180830381600087803b158015611e6f57600080fd5b505af1158015611e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea79190613ff7565b506004546001600160a01b031663a9059cbb876064611ec787600a614390565b611ed1919061436e565b6040518363ffffffff1660e01b8152600401611eee9291906142d4565b602060405180830381600087803b158015611f0857600080fd5b505af1158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190613ff7565b506000848152600b602052604090205484906001600160a01b03167fad7bde0b40220dccef6b876cf7594499d11d9f168fbd034338597c691a7e943d6064611f8987600a614390565b611f93919061436e565b611f9d9087614356565b611fa790866143ee565b866064611fb582600a614390565b611fbf919061436e565b6040805193845260208401929092529082015260600160405180910390a36123d0565b8281111561222057611ff483826143ee565b6004546009549196506001600160a01b039081169163a9059cbb9116606461201d89605a614390565b612027919061436e565b6120319087614356565b6040518363ffffffff1660e01b815260040161204e9291906142d4565b602060405180830381600087803b15801561206857600080fd5b505af115801561207c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a09190613ff7565b506004546001600160a01b031663a9059cbb8760646120c089600a614390565b6120ca919061436e565b6040518363ffffffff1660e01b81526004016120e79291906142d4565b602060405180830381600087803b15801561210157600080fd5b505af1158015612115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121399190613ff7565b506004546000858152600b60205260409020546001600160a01b039182169163a9059cbb9116606461216c89600a614390565b612176919061436e565b60646121838a605a614390565b61218d919061436e565b6121979088614356565b6121a190876143ee565b6121ab91906143ee565b6040518363ffffffff1660e01b81526004016121c89291906142d4565b602060405180830381600087803b1580156121e257600080fd5b505af11580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a9190613ff7565b50612347565b6004805460095460405163a9059cbb60e01b81526001600160a01b039283169363a9059cbb936122549316918891016142d4565b602060405180830381600087803b15801561226e57600080fd5b505af1158015612282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a69190613ff7565b506004546000858152600b60205260409020546001600160a01b039182169163a9059cbb91166122d686866143ee565b6040518363ffffffff1660e01b81526004016122f39291906142d4565b602060405180830381600087803b15801561230d57600080fd5b505af1158015612321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123459190613ff7565b505b6000848152600b602052604090205484906001600160a01b03167f4e91025e01b2329df1ec1067d27aafec4d1c41f682ccd794dee04321e0b1e8dc8560646123908a605a614390565b61239a919061436e565b60646123a78b600a614390565b6123b1919061436e565b6040805193845260208401929092529082015260600160405180910390a35b6003546000858152600b6020526040908190205490516323b872dd60e01b81526001600160a01b03928316926323b872dd926124169230929091169089906004016141eb565b600060405180830381600087803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b5050505050505050505b50505050565b61245c61289d565b6001600160a01b0381166124c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161096f565b610eae816128f7565b60006124d5826114b7565b156124e35761130e8261114a565b6113288261114a565b600c546040516332d53b1760e01b8152600481018390526000916001600160a01b0316906332d53b1790602401604080518083038186803b15801561253057600080fd5b505afa158015612544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125689190614014565b509050806125a45760405162461bcd60e51b81526020600482015260096024820152681b9bc81c1c9bd99a5d60ba1b604482015260640161096f565b5050565b6000838152601060209081526040918290205482518581526001600160a01b0391821692810192909252429282019290925284918616907f1fdbee5d1bd2901710e8945918b1a052ce67662661a2ccbf68420e4e430f8dab906060016119c2565b600c5460405163e6e6dd2f60e01b81526004810184905260009182916001600160a01b039091169063e6e6dd2f9060240160a060405180830381600087803b15801561265457600080fd5b505af1158015612668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268c919061409d565b50506000878152601060209081526040808320815160808101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003015460ff1615156060820152929550909350909150806126ed87612bc5565b915091506000806126fd89612d6f565b91509150866001600160a01b0316636f7e8799343085896000015186898c606001518c6000600e60009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b15801561277057600080fd5b505afa158015612784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a89190614042565b6000306040518d63ffffffff1660e01b81526004016127d19b9a9998979695949392919061420f565b6000604051808303818588803b1580156127ea57600080fd5b505af11580156127fe573d6000803e3d6000fd5b50505050506000612831888460008151811061281c5761281c61441b565b6020026020010151886000015185888c612fba565b905080156128855760018351111561288557612882836000815181106128595761285961441b565b6020026020010151846001815181106128745761287461441b565b602002602001015183613077565b90505b612891888b8b84613804565b50505050505050505050565b6000546001600160a01b031633146112f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600c5460405163e6e6dd2f60e01b81526004810184905260009182916001600160a01b039091169063e6e6dd2f9060240160a060405180830381600087803b15801561299257600080fd5b505af11580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca919061409d565b5050600c54604051630b7d321160e41b81529395509093506000926001600160a01b03909116915063b7d3211090612a069086906004016142ed565b602060405180830381600087803b158015612a2057600080fd5b505af1158015612a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a589190613fda565b600c5460405163eb02c30160e01b81526004810188905291925060009182916001600160a01b03169063eb02c301906024016101006040518083038186803b158015612aa357600080fd5b505afa158015612ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612adb9190614181565b50506003546040516323b872dd60e01b8152969850939650506001600160a01b03909216936323b872dd9350612b1b925033915030908c906004016141eb565b600060405180830381600087803b158015612b3557600080fd5b505af1158015612b49573d6000803e3d6000fd5b5050604080516080810182526001600160a01b03968716815260208082019687528183019586529715156060820190815260009b8c5260109098529920985189546001600160a01b0319169516949094178855509051600187015551600286015550516003909301805460ff1916931515939093179092555050565b600c5460405163eb02c30160e01b81526004810183905260009182916001600160a01b039091169063eb02c301906024016101006040518083038186803b158015612c0f57600080fd5b505afa158015612c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c479190614181565b5095965050508415159350612c9a925050505760405162461bcd60e51b81526020600482015260156024820152741c1bdcda5d1a5bdb881cda5e99481a5cc81b9d5b1b605a1b604482015260640161096f565b60008381526010602052604090206003015460ff16612cc757600f54612cc2906103e8614315565b612cd6565b600f54612cd6906103e86143af565b600c54604051637a3c4c1760e01b8152600481018690526103e8916001600160a01b031690637a3c4c179060240160206040518083038186803b158015612d1c57600080fd5b505afa158015612d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d549190614042565b612d5e919061436e565b612d689190614390565b9150915091565b600c5460405163eb02c30160e01b81526004810183905260609160009182916001600160a01b03169063eb02c301906024016101006040518083038186803b158015612dba57600080fd5b505afa158015612dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df29190614181565b5050600c546040516332d53b1760e01b8152600481018c90529597506000965086956001600160a01b0390911694506332d53b1793506024019150612e349050565b604080518083038186803b158015612e4b57600080fd5b505afa158015612e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e839190614014565b9150915081612e925780612e94565b825b60008781526010602052604090206003015490945060ff1615612f5157604080516002808252606082018352909160208301908036833750505060008781526010602052604081205482519297506001600160a01b031691879190612efb57612efb61441b565b6001600160a01b039283166020918202929092010152600454865191169086906001908110612f2c57612f2c61441b565b60200260200101906001600160a01b031690816001600160a01b031681525050612fb2565b6040805160018082528183019092529060208083019080368337505060045482519297506001600160a01b031691879150600090612f9157612f9161441b565b60200260200101906001600160a01b031690816001600160a01b0316815250505b505050915091565b6000806000612fcd8989898989896139a0565b9092509050811561306657600d54604051634c4ce68160e11b81526000916001600160a01b031690639899cd029061300b908c9086906004016142d4565b60206040518083038186803b15801561302357600080fd5b505afa158015613037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305b9190614042565b935061306d92505050565b6000925050505b9695505050505050565b600d546040516340d3096b60e11b81526001600160a01b03858116600483015260009283929116906381a612d69060240160206040518083038186803b1580156130c057600080fd5b505afa1580156130d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f89190614042565b600d54604051637092736960e11b81526001600160a01b0387811660048301529293506000929091169063e124e6d29060240160206040518083038186803b15801561314357600080fd5b505afa158015613157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317b9190614042565b905060008161318a8487614390565b613194919061436e565b600d54604051634215287360e01b8152600481018390526001600160a01b038a81166024830152898116604483015292935091169063421528739060640160206040518083038186803b1580156131ea57600080fd5b505afa1580156131fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132229190614042565b905060006c0c9f2c9cd04674edea4000000061323e8588614390565b613248919061436e565b600d546040805163f5b91b7b60e01b815290519293506001600160a01b039091169163421528739184918c91859163f5b91b7b91600480820192602092909190829003018186803b15801561329c57600080fd5b505afa1580156132b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d49190613fda565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b03918216602484015216604482015260640160206040518083038186803b15801561332157600080fd5b505afa158015613335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133599190614042565b600d546040516342b60b0360e01b81526001600160a01b038b81166004830152929350600092909116906342b60b039060240160206040518083038186803b1580156133a457600080fd5b505afa1580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc9190613ff7565b80156134605750600d546040516342b60b0360e01b81526001600160a01b038a81166004830152909116906342b60b039060240160206040518083038186803b15801561342857600080fd5b505afa15801561343c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134609190613ff7565b9050600080826134f557600d60009054906101000a90046001600160a01b03166001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b1580156134b857600080fd5b505afa1580156134cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f09190614042565b61357b565b600d60009054906101000a90046001600160a01b03166001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561354357600080fd5b505afa158015613557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357b9190614042565b905060008361360f57600d60009054906101000a90046001600160a01b03166001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135d257600080fd5b505afa1580156135e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360a9190614042565b613695565b600d60009054906101000a90046001600160a01b03166001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561365d57600080fd5b505afa158015613671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136959190614042565b600d5460405163c7e074c360e01b81526001600160a01b038f81166004830152602482018990526044820186905260648201849052600160848301529293506000929091169063c7e074c39060a40160206040518083038186803b1580156136fc57600080fd5b505afa158015613710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137349190614042565b600d5460405163c7e074c360e01b81526001600160a01b038f81166004830152602482018a905260448201879052606482018690526000608483018190529394509091169063c7e074c39060a40160206040518083038186803b15801561379a57600080fd5b505afa1580156137ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d29190614042565b90508082116137e157806137e3565b815b94505050505060006137f58583613bb5565b9b9a5050505050505050505050565b600e5460405163fa44457760e01b81526001600160a01b038681166004830152600092169063fa44457790602401602060405180830381600087803b15801561384c57600080fd5b505af1158015613860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138849190614042565b600e5460405163317c51ff60e11b81529192506000916001600160a01b03909116906362f8a3fe906138bc90899086906004016142d4565b60206040518083038186803b1580156138d457600080fd5b505afa1580156138e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390c9190614042565b9050600061391986611b80565b6040805160a081018252978852336020808a0191825289830197885260608a0193845297151560808a019081526000958652601190985293209651875591516001870180546001600160a01b0319166001600160a01b03909216919091179055509151600285015550516003830155516004909101805460ff191691151591909117905550565b600d54604051634a3f088d60e01b81526001600160a01b0388811660048301528781166024830152868116604483015283151560648301526000928392839283928392839283921690634a3f088d906084016101006040518083038186803b158015613a0b57600080fd5b505afa158015613a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a439190614181565b975050505094509450945094506000613a5e8d8b8886613cd2565b600d54604051635c07eaab60e01b81526001600160a01b038f81166004830152602482018a9052604482018890528c151560648301526084820186905292935060009283921690635c07eaab9060a401604080518083038186803b158015613ac557600080fd5b505afa158015613ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613afd9190614014565b9092509050600088613b0f838f614390565b613b19919061436e565b90506000838015613b2a5750600082115b15613b325750805b83158015613b405750600082115b15613b5257613b4f828a6143ee565b98505b8e15613b7157613b628f82614356565b9050613b6e8f8a6143ee565b98505b8d8a1415613b8657613b838982614356565b90505b8085811115613b9c57613b9986836143ee565b90505b909b509950505050505050505050965096945050505050565b600080600d60009054906101000a90046001600160a01b03166001600160a01b031663126082cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613c0857600080fd5b505af1158015613c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c409190614042565b600d546040805163126082cf60e01b8152905186926001600160a01b03169163126082cf9160048083019260209291908290030181600087803b158015613c8657600080fd5b505af1158015613c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbe9190614042565b613cc891906143ee565b6111389086614390565b600080613cde85613d86565b600d54604051633316e05160e21b81526001600160a01b03898116600483015260248201889052604482018790529293506000929091169063cc5b81449060640160206040518083038186803b158015613d3757600080fd5b505afa158015613d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6f9190614042565b9050613d7b8183614356565b979650505050505050565b600081613d9557506000919050565b600d546040805163126082cf60e01b815290516000926001600160a01b03169163126082cf91600480830192602092919082900301818787803b158015613ddb57600080fd5b505af1158015613def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e139190614042565b600d60009054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b158015613e6157600080fd5b505afa158015613e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e999190613fda565b6001600160a01b031663318bc6896040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613ed357600080fd5b505af1158015613ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0b9190614042565b600d60009054906101000a90046001600160a01b03166001600160a01b031663126082cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613f5b57600080fd5b505af1158015613f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f939190614042565b613f9d91906143ee565b613fa79085614390565b613fb1919061436e565b905061143781846143ee565b600060208284031215613fcf57600080fd5b813561143781614431565b600060208284031215613fec57600080fd5b815161143781614431565b60006020828403121561400957600080fd5b815161143781614446565b6000806040838503121561402757600080fd5b825161403281614446565b6020939093015192949293505050565b60006020828403121561405457600080fd5b5051919050565b60008060006060848603121561407057600080fd5b83359250602084013561408281614446565b9150604084013561409281614446565b809150509250925092565b600080600080600060a086880312156140b557600080fd5b8551600881106140c457600080fd5b60208701519095506140d581614431565b60408701519094506140e681614446565b60608701519093506140f781614431565b608087015190925061410881614431565b809150509295509295909350565b60006020828403121561412857600080fd5b5035919050565b6000806040838503121561414257600080fd5b82359150602083013561415481614431565b809150509250929050565b6000806040838503121561417257600080fd5b50508035926020909101359150565b600080600080600080600080610100898b03121561419e57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c08901516141d381614446565b8092505060e089015190509295985092959890939650565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038c8116825261016060208084018290528d51918401829052600092916101808501918f01845b8281101561425d578151851684526020938401939091019060010161423d565b5050506001600160a01b038d16604085015291506142789050565b89606083015288608083015261429260a083018915159052565b8660c08301528560e0830152846101008301526142b461012083018515159052565b6001600160a01b0383166101408301529c9b505050505050505050505050565b6001600160a01b03929092168252602082015260400190565b602081016008831061430f57634e487b7160e01b600052602160045260246000fd5b91905290565b600080821280156001600160ff1b038490038513161561433757614337614405565b600160ff1b839003841281161561435057614350614405565b50500190565b6000821982111561436957614369614405565b500190565b60008261438b57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156143aa576143aa614405565b500290565b60008083128015600160ff1b8501841216156143cd576143cd614405565b6001600160ff1b03840183138116156143e8576143e8614405565b50500390565b60008282101561440057614400614405565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610eae57600080fd5b8015158114610eae57600080fdfea2646970667358221220d0e082a8fc9bbbdd9b75c119f1299a5e679ddf259e8067aa4caf2008eca7a0e464736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c80637c3a00fd1161014f578063c215ac21116100c1578063e260d7471161007a578063e260d747146107fb578063e5bad72314610811578063edf3daec14610831578063f2fde38b14610851578063fbfa77cf14610871578063fecb63571461089157600080fd5b8063c215ac2114610718578063c37077091461075b578063c57610ae1461077b578063d88c69101461079b578063d8aed145146107bb578063e2233cbd146107db57600080fd5b80639d38d064116101135780639d38d0641461064e5780639e3aa5b114610664578063a226b48314610684578063b13de266146106a4578063b2016bd4146106c4578063b3b840df146106e457600080fd5b80637c3a00fd1461055f57806389097a6a1461057557806389a30271146105f05780638da5cb5b1461061057806391c2c4691461062e57600080fd5b80634de33fda116101e857806362965d8e116101ac57806362965d8e146104ae57806363ce2008146104c457806366234ffa146104e4578063715018a6146104fa578063798816981461050f5780637a3c4c171461053f57600080fd5b80634de33fda1461040e578063587a03c21461042e5780635f84f3021461044e5780636198e3391461046e57806361ef161f1461048e57600080fd5b806324a6665e1161023a57806324a6665e1461035a578063415f12401461038f57806341f6cf4e146103a25780634437152a146103b8578063484f1371146103d85780634ddde78d146103f857600080fd5b80630ecbcdab1461027757806316f0115b146102995780631753b408146102d65780631a42621614610311578063200549ca14610324575b600080fd5b34801561028357600080fd5b5061029761029236600461415f565b6108b1565b005b3480156102a557600080fd5b506009546102b9906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102e257600080fd5b506103036102f1366004613fbd565b60126020526000908152604090205481565b6040519081526020016102cd565b61029761031f366004614116565b610d8e565b34801561033057600080fd5b506102b961033f366004614116565b600b602052600090815260409020546001600160a01b031681565b34801561036657600080fd5b5061037a610375366004614116565b610eb1565b604080519283526020830191909152016102cd565b61029761039d366004614116565b610f97565b3480156103ae57600080fd5b50610303600f5481565b3480156103c457600080fd5b506102976103d3366004613fbd565b6110b7565b3480156103e457600080fd5b506103036103f3366004614116565b6110e1565b34801561040457600080fd5b5061030360085481565b34801561041a57600080fd5b50610303610429366004614116565b61114a565b34801561043a57600080fd5b50610297610449366004614116565b6111b0565b34801561045a57600080fd5b50610297610469366004614116565b6111bd565b34801561047a57600080fd5b50610297610489366004614116565b6111ca565b34801561049a57600080fd5b50600e546102b9906001600160a01b031681565b3480156104ba57600080fd5b5061030360015481565b3480156104d057600080fd5b506102976104df36600461412f565b6112bf565b3480156104f057600080fd5b5061030360065481565b34801561050657600080fd5b506102976112e1565b34801561051b57600080fd5b5061052f61052a366004614116565b6112f5565b60405190151581526020016102cd565b34801561054b57600080fd5b5061030361055a366004614116565b611339565b34801561056b57600080fd5b5061030360055481565b34801561058157600080fd5b506105c4610590366004614116565b60106020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016102cd565b3480156105fc57600080fd5b506004546102b9906001600160a01b031681565b34801561061c57600080fd5b506000546001600160a01b03166102b9565b34801561063a57600080fd5b50600c546102b9906001600160a01b031681565b34801561065a57600080fd5b5061030360025481565b34801561067057600080fd5b5061030361067f366004614116565b61148c565b34801561069057600080fd5b5061052f61069f366004614116565b6114b7565b3480156106b057600080fd5b506102976106bf366004614116565b611534565b3480156106d057600080fd5b506003546102b9906001600160a01b031681565b3480156106f057600080fd5b5061037a6106ff366004614116565b600a602052600090815260409020805460019091015482565b34801561072457600080fd5b50610303610733366004614116565b6000908152601060209081526040808320546001600160a01b03168352601290915290205490565b34801561076757600080fd5b50610297610776366004614116565b611583565b34801561078757600080fd5b50610303610796366004614116565b611590565b3480156107a757600080fd5b506103036107b6366004614116565b6115eb565b3480156107c757600080fd5b506102976107d636600461415f565b6116db565b3480156107e757600080fd5b506102976107f6366004614116565b6119d0565b34801561080757600080fd5b5061030360075481565b34801561081d57600080fd5b5061030361082c366004614116565b611b80565b34801561083d57600080fd5b5061029761084c36600461405b565b611c37565b34801561085d57600080fd5b5061029761086c366004613fbd565b612454565b34801561087d57600080fd5b50600d546102b9906001600160a01b031681565b34801561089d57600080fd5b5061052f6108ac366004614116565b6124ca565b600960009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ff57600080fd5b505afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190613ff7565b6109785760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b60448201526064015b60405180910390fd5b6000828152600a60205260408120906109908461148c565b90506000600960009054906101000a90046001600160a01b03166001600160a01b03166312b583496040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190614042565b9050600754841015610a6e5760405162461bcd60e51b815260206004820152601a60248201527f616d6f756e74206c657373206d696e426f72726f774c696d6974000000000000604482015260640161096f565b82548290610a7c9086614356565b1115610abe5760405162461bcd60e51b8152602060048201526011602482015270626f72726f7720697320746f6f2062696760781b604482015260640161096f565b6000858152600b60205260409020546001600160a01b03163314610b1c5760405162461bcd60e51b81526020600482015260156024820152743cb7ba9030b932903737ba103a34329037bbb732b960591b604482015260640161096f565b80841115610b7a5760405162461bcd60e51b815260206004820152602560248201527f7468657265206973206e6f7420656e6f756768206d6f6e657920696e20746865604482015264081c1bdbdb60da1b606482015260840161096f565b610b83856124ec565b610b8c856114b7565b15610bec57610b9a8561114a565b610ba386611339565b11610be75760405162461bcd60e51b815260206004820152601460248201527374686520707269636520697320746f6f206c6f7760601b604482015260640161096f565b610c43565b610bf58561114a565b610bfe86611339565b10610c435760405162461bcd60e51b81526020600482015260156024820152740e8d0ca40e0e4d2c6ca40d2e640e8dede40d0d2ced605b1b604482015260640161096f565b6000610c4e866110e1565b9050604051806040016040528082866000015488610c6c9190614356565b610c769190614356565b8152426020918201526000888152600a825260409020825181559101516001909101556009546001600160a01b0316632bc355ca610cb48388614356565b6040518263ffffffff1660e01b8152600401610cd291815260200190565b600060405180830381600087803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b50506009546000898152600b602052604090819020549051633419e74d60e21b81526001600160a01b03928316945063d0679d349350610d48929091169089906004016142d4565b600060405180830381600087803b158015610d6257600080fd5b505af1158015610d76573d6000803e3d6000fd5b50505050610d86338787426125a8565b505050505050565b610d97816124ca565b610dd35760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015260640161096f565b600e60009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2157600080fd5b505afa158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e599190614042565b341015610ea35760405162461bcd60e51b81526020600482015260186024820152771b5a5b915e1958dd5d1a5bdb919959481d1bdbc81cdb585b60421b604482015260640161096f565b610eae816001612609565b50565b600c5460405163eb02c30160e01b8152600481018390526000918291829182916001600160a01b039091169063eb02c301906024016101006040518083038186803b158015610eff57600080fd5b505afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190614181565b50505050509250509150620f42406c0c9f2c9cd04674edea40000000610f5d919061436e565b610f67908361436e565b610f826305f5e1006c0c9f2c9cd04674edea4000000061436e565b610f8c908361436e565b935093505050915091565b610fa0816112f5565b610fdc5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015260640161096f565b600e60009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110629190614042565b3410156110ac5760405162461bcd60e51b81526020600482015260186024820152771b5a5b915e1958dd5d1a5bdb919959481d1bdbc81cdb585b60421b604482015260640161096f565b610eae816000612609565b6110bf61289d565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600a6020526040812060018101548290603c9061110390426143ee565b61110d919061436e565b9050600654600554826111209190614390565b835461112e9060649061436e565b6111389190614390565b611142919061436e565b949350505050565b60008061115683610eb1565b6000858152601060209081526040808320546001600160a01b0316835260129091529020549092509050611189846114b7565b156111a457606461119a8282614356565b6111389084614390565b606461119a82826143ee565b6111b861289d565b600655565b6111c561289d565b600555565b6000818152600a6020526040902054156112175760405162461bcd60e51b815260206004820152600e60248201526d1b1bd85b881a5cc81b1bd8dad95960921b604482015260640161096f565b6003546000828152600b6020526040908190205490516323b872dd60e01b81526001600160a01b03928316926323b872dd9261125d9230929091169086906004016141eb565b600060405180830381600087803b15801561127757600080fd5b505af115801561128b573d6000803e3d6000fd5b50506040518392503391507f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f190600090a350565b6112c761289d565b6001600160a01b0316600090815260126020526040902055565b6112e961289d565b6112f360006128f7565b565b6000611300826114b7565b1561131f5761130e826115eb565b61131783611339565b111592915050565b611328826115eb565b61133183611339565b101592915050565b6000818152601060209081526040808320815160808101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003015460ff161515606082015261138e836114b7565b1561143e576113ae6305f5e1006c0c9f2c9cd04674edea4000000061436e565b600d548251604051637092736960e11b81526001600160a01b03918216600482015291169063e124e6d2906024015b60206040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d9190614042565b611437919061436e565b9392505050565b6114596305f5e1006c0c9f2c9cd04674edea4000000061436e565b600d5482516040516340d3096b60e11b81526001600160a01b0391821660048201529116906381a612d6906024016113dd565b600060015460025461149d84611b80565b6114a7919061436e565b6114b19190614390565b92915050565b600c5460405163a226b48360e01b8152600481018390526000916001600160a01b03169063a226b4839060240160206040518083038186803b1580156114fc57600080fd5b505afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b19190613ff7565b61153c61289d565b611f4081111561157e5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b604482015260640161096f565b600155565b61158b61289d565b600755565b600061159b826114b7565b156115ca576115a9826115eb565b6115b28361114a565b11156115c1576114b18261114a565b6114b1826115eb565b6115d3826115eb565b6115dc8361114a565b10156115c1576114b18261114a565b6000818152600a60205260408120818061160485610eb1565b91509150611611856114b7565b1561167d57606481611627846305f5e100614390565b611631919061436e565b845461164090620f4240614390565b61164a919061436e565b611655906078614390565b61165f919061436e565b61166a906064614390565b6116749082614356565b95945050505050565b60648161168e846305f5e100614390565b611698919061436e565b84546116a790620f4240614390565b6116b1919061436e565b6116bc906078614390565b6116c6919061436e565b6116d1906064614390565b61167490826143ee565b6000828152600a60205260409020546117285760405162461bcd60e51b815260206004820152600f60248201526e1bdc1d1a5bdb881c995919595b5959608a1b604482015260640161096f565b6000611733836110e1565b6000848152600a6020526040902054909150611750908290614356565b8211156117935760405162461bcd60e51b8152602060048201526011602482015270616d6f756e7420697320746f6f2062696760781b604482015260640161096f565b6000838152600b60205260409020546001600160a01b031633146117b657600080fd5b6000838152600a602052604081205483906117d2908490614356565b6117dc91906143ee565b6009549091506001600160a01b0316631b45a68d6117fa84866143ee565b6040518263ffffffff1660e01b815260040161181891815260200190565b600060405180830381600087803b15801561183257600080fd5b505af1158015611846573d6000803e3d6000fd5b505060408051808201825284815242602080830191825260008a8152600a825284812093518455915160019093019290925560048054600b909352908390205492516323b872dd60e01b81526001600160a01b0392831695506323b872dd94506118b8939092169130918991016141eb565b602060405180830381600087803b1580156118d257600080fd5b505af11580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a9190613ff7565b506004805460095460405163a9059cbb60e01b81526001600160a01b039283169363a9059cbb9361193f9316918891016142d4565b602060405180830381600087803b15801561195957600080fd5b505af115801561196d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119919190613ff7565b50604051838152849033907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d0906020015b60405180910390a350505050565b600960009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190613ff7565b611a925760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b604482015260640161096f565b6003546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e9060240160206040518083038186803b158015611ad657600080fd5b505afa158015611aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0e9190613fda565b6001600160a01b031614611b545760405162461bcd60e51b815260206004820152600d60248201526c3cb7ba903737ba1037bbb732b960991b604482015260640161096f565b6000818152600b6020526040902080546001600160a01b03191633908117909155610eae908290612947565b600c546040516332d53b1760e01b815260048101839052600091829182916001600160a01b0316906332d53b1790602401604080518083038186803b158015611bc857600080fd5b505afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c009190614014565b9092509050611c1f620f42406c0c9f2c9cd04674edea4000000061436e565b611c29908261436e565b905081611437576000611142565b600e546001600160a01b03163314611c915760405162461bcd60e51b815260206004820181905260248201527f6d73672e73656e646572206973206e6f7420706f736974696f6e526f75746572604482015260640161096f565b6000838152601160205260409020600101546001600160a01b0316801561244e5760008481526011602081815260408084208054808652600a8452828620548a87529490935260028101546003909101546009549251631b45a68d60e01b815260048101869052939493919290916001600160a01b0390911690631b45a68d90602401600060405180830381600087803b158015611d2e57600080fd5b505af1158015611d42573d6000803e3d6000fd5b50505060008a81526011602052604090206004015460ff16159050611fe2576004805460095460405163a9059cbb60e01b81526001600160a01b039283169363a9059cbb93611d959316918891016142d4565b602060405180830381600087803b158015611daf57600080fd5b505af1158015611dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de79190613ff7565b506004546000858152600b60205260409020546001600160a01b039182169163a9059cbb91166064611e1a87600a614390565b611e24919061436e565b611e2e9087614356565b611e3890866143ee565b6040518363ffffffff1660e01b8152600401611e559291906142d4565b602060405180830381600087803b158015611e6f57600080fd5b505af1158015611e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea79190613ff7565b506004546001600160a01b031663a9059cbb876064611ec787600a614390565b611ed1919061436e565b6040518363ffffffff1660e01b8152600401611eee9291906142d4565b602060405180830381600087803b158015611f0857600080fd5b505af1158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190613ff7565b506000848152600b602052604090205484906001600160a01b03167fad7bde0b40220dccef6b876cf7594499d11d9f168fbd034338597c691a7e943d6064611f8987600a614390565b611f93919061436e565b611f9d9087614356565b611fa790866143ee565b866064611fb582600a614390565b611fbf919061436e565b6040805193845260208401929092529082015260600160405180910390a36123d0565b8281111561222057611ff483826143ee565b6004546009549196506001600160a01b039081169163a9059cbb9116606461201d89605a614390565b612027919061436e565b6120319087614356565b6040518363ffffffff1660e01b815260040161204e9291906142d4565b602060405180830381600087803b15801561206857600080fd5b505af115801561207c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a09190613ff7565b506004546001600160a01b031663a9059cbb8760646120c089600a614390565b6120ca919061436e565b6040518363ffffffff1660e01b81526004016120e79291906142d4565b602060405180830381600087803b15801561210157600080fd5b505af1158015612115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121399190613ff7565b506004546000858152600b60205260409020546001600160a01b039182169163a9059cbb9116606461216c89600a614390565b612176919061436e565b60646121838a605a614390565b61218d919061436e565b6121979088614356565b6121a190876143ee565b6121ab91906143ee565b6040518363ffffffff1660e01b81526004016121c89291906142d4565b602060405180830381600087803b1580156121e257600080fd5b505af11580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a9190613ff7565b50612347565b6004805460095460405163a9059cbb60e01b81526001600160a01b039283169363a9059cbb936122549316918891016142d4565b602060405180830381600087803b15801561226e57600080fd5b505af1158015612282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a69190613ff7565b506004546000858152600b60205260409020546001600160a01b039182169163a9059cbb91166122d686866143ee565b6040518363ffffffff1660e01b81526004016122f39291906142d4565b602060405180830381600087803b15801561230d57600080fd5b505af1158015612321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123459190613ff7565b505b6000848152600b602052604090205484906001600160a01b03167f4e91025e01b2329df1ec1067d27aafec4d1c41f682ccd794dee04321e0b1e8dc8560646123908a605a614390565b61239a919061436e565b60646123a78b600a614390565b6123b1919061436e565b6040805193845260208401929092529082015260600160405180910390a35b6003546000858152600b6020526040908190205490516323b872dd60e01b81526001600160a01b03928316926323b872dd926124169230929091169089906004016141eb565b600060405180830381600087803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b5050505050505050505b50505050565b61245c61289d565b6001600160a01b0381166124c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161096f565b610eae816128f7565b60006124d5826114b7565b156124e35761130e8261114a565b6113288261114a565b600c546040516332d53b1760e01b8152600481018390526000916001600160a01b0316906332d53b1790602401604080518083038186803b15801561253057600080fd5b505afa158015612544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125689190614014565b509050806125a45760405162461bcd60e51b81526020600482015260096024820152681b9bc81c1c9bd99a5d60ba1b604482015260640161096f565b5050565b6000838152601060209081526040918290205482518581526001600160a01b0391821692810192909252429282019290925284918616907f1fdbee5d1bd2901710e8945918b1a052ce67662661a2ccbf68420e4e430f8dab906060016119c2565b600c5460405163e6e6dd2f60e01b81526004810184905260009182916001600160a01b039091169063e6e6dd2f9060240160a060405180830381600087803b15801561265457600080fd5b505af1158015612668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268c919061409d565b50506000878152601060209081526040808320815160808101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003015460ff1615156060820152929550909350909150806126ed87612bc5565b915091506000806126fd89612d6f565b91509150866001600160a01b0316636f7e8799343085896000015186898c606001518c6000600e60009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b15801561277057600080fd5b505afa158015612784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a89190614042565b6000306040518d63ffffffff1660e01b81526004016127d19b9a9998979695949392919061420f565b6000604051808303818588803b1580156127ea57600080fd5b505af11580156127fe573d6000803e3d6000fd5b50505050506000612831888460008151811061281c5761281c61441b565b6020026020010151886000015185888c612fba565b905080156128855760018351111561288557612882836000815181106128595761285961441b565b6020026020010151846001815181106128745761287461441b565b602002602001015183613077565b90505b612891888b8b84613804565b50505050505050505050565b6000546001600160a01b031633146112f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600c5460405163e6e6dd2f60e01b81526004810184905260009182916001600160a01b039091169063e6e6dd2f9060240160a060405180830381600087803b15801561299257600080fd5b505af11580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca919061409d565b5050600c54604051630b7d321160e41b81529395509093506000926001600160a01b03909116915063b7d3211090612a069086906004016142ed565b602060405180830381600087803b158015612a2057600080fd5b505af1158015612a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a589190613fda565b600c5460405163eb02c30160e01b81526004810188905291925060009182916001600160a01b03169063eb02c301906024016101006040518083038186803b158015612aa357600080fd5b505afa158015612ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612adb9190614181565b50506003546040516323b872dd60e01b8152969850939650506001600160a01b03909216936323b872dd9350612b1b925033915030908c906004016141eb565b600060405180830381600087803b158015612b3557600080fd5b505af1158015612b49573d6000803e3d6000fd5b5050604080516080810182526001600160a01b03968716815260208082019687528183019586529715156060820190815260009b8c5260109098529920985189546001600160a01b0319169516949094178855509051600187015551600286015550516003909301805460ff1916931515939093179092555050565b600c5460405163eb02c30160e01b81526004810183905260009182916001600160a01b039091169063eb02c301906024016101006040518083038186803b158015612c0f57600080fd5b505afa158015612c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c479190614181565b5095965050508415159350612c9a925050505760405162461bcd60e51b81526020600482015260156024820152741c1bdcda5d1a5bdb881cda5e99481a5cc81b9d5b1b605a1b604482015260640161096f565b60008381526010602052604090206003015460ff16612cc757600f54612cc2906103e8614315565b612cd6565b600f54612cd6906103e86143af565b600c54604051637a3c4c1760e01b8152600481018690526103e8916001600160a01b031690637a3c4c179060240160206040518083038186803b158015612d1c57600080fd5b505afa158015612d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d549190614042565b612d5e919061436e565b612d689190614390565b9150915091565b600c5460405163eb02c30160e01b81526004810183905260609160009182916001600160a01b03169063eb02c301906024016101006040518083038186803b158015612dba57600080fd5b505afa158015612dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df29190614181565b5050600c546040516332d53b1760e01b8152600481018c90529597506000965086956001600160a01b0390911694506332d53b1793506024019150612e349050565b604080518083038186803b158015612e4b57600080fd5b505afa158015612e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e839190614014565b9150915081612e925780612e94565b825b60008781526010602052604090206003015490945060ff1615612f5157604080516002808252606082018352909160208301908036833750505060008781526010602052604081205482519297506001600160a01b031691879190612efb57612efb61441b565b6001600160a01b039283166020918202929092010152600454865191169086906001908110612f2c57612f2c61441b565b60200260200101906001600160a01b031690816001600160a01b031681525050612fb2565b6040805160018082528183019092529060208083019080368337505060045482519297506001600160a01b031691879150600090612f9157612f9161441b565b60200260200101906001600160a01b031690816001600160a01b0316815250505b505050915091565b6000806000612fcd8989898989896139a0565b9092509050811561306657600d54604051634c4ce68160e11b81526000916001600160a01b031690639899cd029061300b908c9086906004016142d4565b60206040518083038186803b15801561302357600080fd5b505afa158015613037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305b9190614042565b935061306d92505050565b6000925050505b9695505050505050565b600d546040516340d3096b60e11b81526001600160a01b03858116600483015260009283929116906381a612d69060240160206040518083038186803b1580156130c057600080fd5b505afa1580156130d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f89190614042565b600d54604051637092736960e11b81526001600160a01b0387811660048301529293506000929091169063e124e6d29060240160206040518083038186803b15801561314357600080fd5b505afa158015613157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317b9190614042565b905060008161318a8487614390565b613194919061436e565b600d54604051634215287360e01b8152600481018390526001600160a01b038a81166024830152898116604483015292935091169063421528739060640160206040518083038186803b1580156131ea57600080fd5b505afa1580156131fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132229190614042565b905060006c0c9f2c9cd04674edea4000000061323e8588614390565b613248919061436e565b600d546040805163f5b91b7b60e01b815290519293506001600160a01b039091169163421528739184918c91859163f5b91b7b91600480820192602092909190829003018186803b15801561329c57600080fd5b505afa1580156132b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d49190613fda565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b03918216602484015216604482015260640160206040518083038186803b15801561332157600080fd5b505afa158015613335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133599190614042565b600d546040516342b60b0360e01b81526001600160a01b038b81166004830152929350600092909116906342b60b039060240160206040518083038186803b1580156133a457600080fd5b505afa1580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc9190613ff7565b80156134605750600d546040516342b60b0360e01b81526001600160a01b038a81166004830152909116906342b60b039060240160206040518083038186803b15801561342857600080fd5b505afa15801561343c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134609190613ff7565b9050600080826134f557600d60009054906101000a90046001600160a01b03166001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b1580156134b857600080fd5b505afa1580156134cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f09190614042565b61357b565b600d60009054906101000a90046001600160a01b03166001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561354357600080fd5b505afa158015613557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357b9190614042565b905060008361360f57600d60009054906101000a90046001600160a01b03166001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135d257600080fd5b505afa1580156135e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360a9190614042565b613695565b600d60009054906101000a90046001600160a01b03166001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561365d57600080fd5b505afa158015613671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136959190614042565b600d5460405163c7e074c360e01b81526001600160a01b038f81166004830152602482018990526044820186905260648201849052600160848301529293506000929091169063c7e074c39060a40160206040518083038186803b1580156136fc57600080fd5b505afa158015613710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137349190614042565b600d5460405163c7e074c360e01b81526001600160a01b038f81166004830152602482018a905260448201879052606482018690526000608483018190529394509091169063c7e074c39060a40160206040518083038186803b15801561379a57600080fd5b505afa1580156137ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d29190614042565b90508082116137e157806137e3565b815b94505050505060006137f58583613bb5565b9b9a5050505050505050505050565b600e5460405163fa44457760e01b81526001600160a01b038681166004830152600092169063fa44457790602401602060405180830381600087803b15801561384c57600080fd5b505af1158015613860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138849190614042565b600e5460405163317c51ff60e11b81529192506000916001600160a01b03909116906362f8a3fe906138bc90899086906004016142d4565b60206040518083038186803b1580156138d457600080fd5b505afa1580156138e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390c9190614042565b9050600061391986611b80565b6040805160a081018252978852336020808a0191825289830197885260608a0193845297151560808a019081526000958652601190985293209651875591516001870180546001600160a01b0319166001600160a01b03909216919091179055509151600285015550516003830155516004909101805460ff191691151591909117905550565b600d54604051634a3f088d60e01b81526001600160a01b0388811660048301528781166024830152868116604483015283151560648301526000928392839283928392839283921690634a3f088d906084016101006040518083038186803b158015613a0b57600080fd5b505afa158015613a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a439190614181565b975050505094509450945094506000613a5e8d8b8886613cd2565b600d54604051635c07eaab60e01b81526001600160a01b038f81166004830152602482018a9052604482018890528c151560648301526084820186905292935060009283921690635c07eaab9060a401604080518083038186803b158015613ac557600080fd5b505afa158015613ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613afd9190614014565b9092509050600088613b0f838f614390565b613b19919061436e565b90506000838015613b2a5750600082115b15613b325750805b83158015613b405750600082115b15613b5257613b4f828a6143ee565b98505b8e15613b7157613b628f82614356565b9050613b6e8f8a6143ee565b98505b8d8a1415613b8657613b838982614356565b90505b8085811115613b9c57613b9986836143ee565b90505b909b509950505050505050505050965096945050505050565b600080600d60009054906101000a90046001600160a01b03166001600160a01b031663126082cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613c0857600080fd5b505af1158015613c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c409190614042565b600d546040805163126082cf60e01b8152905186926001600160a01b03169163126082cf9160048083019260209291908290030181600087803b158015613c8657600080fd5b505af1158015613c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbe9190614042565b613cc891906143ee565b6111389086614390565b600080613cde85613d86565b600d54604051633316e05160e21b81526001600160a01b03898116600483015260248201889052604482018790529293506000929091169063cc5b81449060640160206040518083038186803b158015613d3757600080fd5b505afa158015613d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6f9190614042565b9050613d7b8183614356565b979650505050505050565b600081613d9557506000919050565b600d546040805163126082cf60e01b815290516000926001600160a01b03169163126082cf91600480830192602092919082900301818787803b158015613ddb57600080fd5b505af1158015613def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e139190614042565b600d60009054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b158015613e6157600080fd5b505afa158015613e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e999190613fda565b6001600160a01b031663318bc6896040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613ed357600080fd5b505af1158015613ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0b9190614042565b600d60009054906101000a90046001600160a01b03166001600160a01b031663126082cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613f5b57600080fd5b505af1158015613f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f939190614042565b613f9d91906143ee565b613fa79085614390565b613fb1919061436e565b905061143781846143ee565b600060208284031215613fcf57600080fd5b813561143781614431565b600060208284031215613fec57600080fd5b815161143781614431565b60006020828403121561400957600080fd5b815161143781614446565b6000806040838503121561402757600080fd5b825161403281614446565b6020939093015192949293505050565b60006020828403121561405457600080fd5b5051919050565b60008060006060848603121561407057600080fd5b83359250602084013561408281614446565b9150604084013561409281614446565b809150509250925092565b600080600080600060a086880312156140b557600080fd5b8551600881106140c457600080fd5b60208701519095506140d581614431565b60408701519094506140e681614446565b60608701519093506140f781614431565b608087015190925061410881614431565b809150509295509295909350565b60006020828403121561412857600080fd5b5035919050565b6000806040838503121561414257600080fd5b82359150602083013561415481614431565b809150509250929050565b6000806040838503121561417257600080fd5b50508035926020909101359150565b600080600080600080600080610100898b03121561419e57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c08901516141d381614446565b8092505060e089015190509295985092959890939650565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038c8116825261016060208084018290528d51918401829052600092916101808501918f01845b8281101561425d578151851684526020938401939091019060010161423d565b5050506001600160a01b038d16604085015291506142789050565b89606083015288608083015261429260a083018915159052565b8660c08301528560e0830152846101008301526142b461012083018515159052565b6001600160a01b0383166101408301529c9b505050505050505050505050565b6001600160a01b03929092168252602082015260400190565b602081016008831061430f57634e487b7160e01b600052602160045260246000fd5b91905290565b600080821280156001600160ff1b038490038513161561433757614337614405565b600160ff1b839003841281161561435057614350614405565b50500190565b6000821982111561436957614369614405565b500190565b60008261438b57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156143aa576143aa614405565b500290565b60008083128015600160ff1b8501841216156143cd576143cd614405565b6001600160ff1b03840183138116156143e8576143e8614405565b50500390565b60008282101561440057614400614405565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610eae57600080fd5b8015158114610eae57600080fdfea2646970667358221220d0e082a8fc9bbbdd9b75c119f1299a5e679ddf259e8067aa4caf2008eca7a0e464736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "borrow(uint256,uint256)": {
        "params": {
          "amount": "borrow size (USDC)*",
          "id": "collateral ID"
        }
      },
      "calculateUpcomingFee(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "collateralInfo(uint256)": {
        "params": {
          "id": "collateral id*"
        }
      },
      "intrinsicValueOf(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "liquidate(uint256)": {
        "params": {
          "id": "position ID*"
        }
      },
      "liquidateByBorderPrice(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "lockCollateral(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "maxBorrowLimit(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256,uint256)": {
        "params": {
          "amount": "amount to repay (USDC)*",
          "id": "collateral ID"
        }
      },
      "setInterestRate(uint256)": {
        "params": {
          "value": "interest rate (in minutes)*"
        }
      },
      "setLTV(uint256)": {
        "params": {
          "value": "LTV coefficient.*"
        }
      },
      "setMinBorrowLimit(uint256)": {
        "params": {
          "value": "min. borrow size (USDC)*"
        }
      },
      "setPool(address)": {
        "params": {
          "value": "the address of the liquidity pool*"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(uint256,uint256)": {
        "notice": "send USDC to the user"
      },
      "calculateUpcomingFee(uint256)": {
        "notice": "used to calculate how much USDC user should pay as interest fee"
      },
      "collateralInfo(uint256)": {
        "notice": "returns the position size and the entry price by collateral ID"
      },
      "intrinsicValueOf(uint256)": {
        "notice": "calculates the intrinsic value of the collateral"
      },
      "liquidate(uint256)": {
        "notice": "used to liquidate the loan"
      },
      "liquidateByBorderPrice(uint256)": {
        "notice": "used to liquidate the loan by border price"
      },
      "lockCollateral(uint256)": {
        "notice": "used to lock the collateral (ERC-721) in DeDeLend"
      },
      "maxBorrowLimit(uint256)": {
        "notice": "calcualtes the maximum borrow size for the specific collateral"
      },
      "repay(uint256,uint256)": {
        "notice": "used to repay the user's debt"
      },
      "setInterestRate(uint256)": {
        "notice": "used to set new interest rate"
      },
      "setLTV(uint256)": {
        "notice": "used to set LTV coefficient"
      },
      "setMinBorrowLimit(uint256)": {
        "notice": "used to set the minimum borrow size"
      },
      "setPool(address)": {
        "notice": "used to connect a new liqidity pool"
      },
      "unlock(uint256)": {
        "notice": "sends the collateral token back to the user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3667,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "LTV",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3672,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "LTV_DECIMALS",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3675,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "collateralToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC721)2180"
      },
      {
        "astId": 3678,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "USDC",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)777"
      },
      {
        "astId": 3681,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "interestRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3686,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "INTEREST_RATE_DECIMALS",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3688,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3690,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "COLLATERAL_DECIMALS",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3693,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "pool",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IPoolDDL)6772"
      },
      {
        "astId": 3703,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "borrowedByCollateral",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(BorrowedByCollateral)3698_storage)"
      },
      {
        "astId": 3707,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "collateralOwner",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4570,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "accountManager",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IAccountManager)6566"
      },
      {
        "astId": 4573,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "vault",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IVault)7709"
      },
      {
        "astId": 4576,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "positionRouter",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IPositionRouter)6920"
      },
      {
        "astId": 4579,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "closeSlippage",
        "offset": 0,
        "slot": "15",
        "type": "t_int256"
      },
      {
        "astId": 4607,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "positionInfo",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(PositionInfo)4591_storage)"
      },
      {
        "astId": 4612,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "liquidatePositionInfo",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_struct(LiquidatePositionInfo)4602_storage)"
      },
      {
        "astId": 4616,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "borderPriceCoef",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccountManager)6566": {
        "encoding": "inplace",
        "label": "contract IAccountManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)777": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)2180": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolDDL)6772": {
        "encoding": "inplace",
        "label": "contract IPoolDDL",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionRouter)6920": {
        "encoding": "inplace",
        "label": "contract IPositionRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)7709": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(LiquidatePositionInfo)4602_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DDL_GMX.LiquidatePositionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LiquidatePositionInfo)4602_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(BorrowedByCollateral)3698_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DDL.BorrowedByCollateral)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowedByCollateral)3698_storage"
      },
      "t_mapping(t_uint256,t_struct(PositionInfo)4591_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DDL_GMX.PositionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PositionInfo)4591_storage"
      },
      "t_struct(BorrowedByCollateral)3698_storage": {
        "encoding": "inplace",
        "label": "struct DDL.BorrowedByCollateral",
        "members": [
          {
            "astId": 3695,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "borrowed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3697,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "newBorrowTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LiquidatePositionInfo)4602_storage": {
        "encoding": "inplace",
        "label": "struct DDL_GMX.LiquidatePositionInfo",
        "members": [
          {
            "astId": 4593,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4595,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "liquidator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4597,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "amountReturn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4599,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "profit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4601,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "isBorderPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PositionInfo)4591_storage": {
        "encoding": "inplace",
        "label": "struct DDL_GMX.PositionInfo",
        "members": [
          {
            "astId": 4584,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "indexToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4586,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4588,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "openPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4590,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "isLong",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}