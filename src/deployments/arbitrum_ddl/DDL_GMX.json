{
  "address": "0x4b2af2d7437EDa58f568DCb6E67feA160D376bE7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOrderBook",
          "name": "_orderBook",
          "type": "address"
        },
        {
          "internalType": "contract IPositionRouter",
          "name": "_positionRouter",
          "type": "address"
        },
        {
          "internalType": "contract IAccountManager",
          "name": "_accountManager",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract IERC721",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_USDC",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ltv",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_COLLATERAL_DECIMALS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_PriorLiqPriceCoef",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqFee",
          "type": "uint256"
        }
      ],
      "name": "ForcedExercise",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqFee",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userReturn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolReturn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqFee",
          "type": "uint256"
        }
      ],
      "name": "LiquidateByBorderPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BorderPriceCoef",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LTV_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountManager",
      "outputs": [
        {
          "internalType": "contract IAccountManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "borderPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowedByCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newBorrowTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "calculateUpcomingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "upcomingFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeSlippage",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collateralInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collateralState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collateralStateByBorderPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "currentBorderPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isIncrease",
          "type": "bool"
        }
      ],
      "name": "gmxPositionCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "intrinsicValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLong",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "liqPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "liquidateByBorderPrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "lockCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "contract IOrderBook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPoolDDL",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positionInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionRouter",
      "outputs": [
        {
          "internalType": "contract IPositionRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setInterestRateDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setLTV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMinBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x278fa40ef48ed61dd3eabe29553486e87249c3b24621187501c2798772509537",
  "receipt": {
    "to": null,
    "from": "0x0641bc55DDAb3b9636e82CbF87EDE3c3c533039d",
    "contractAddress": "0x4b2af2d7437EDa58f568DCb6E67feA160D376bE7",
    "transactionIndex": 1,
    "gasUsed": "8808330",
    "logsBloom": "0x
    "blockHash": "0x299f187c4f32f4662b29af7b84e52761d1d657a4da3be805c2695d73b6931fbc",
    "transactionHash": "0x278fa40ef48ed61dd3eabe29553486e87249c3b24621187501c2798772509537",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 40990292,
        "transactionHash": "0x278fa40ef48ed61dd3eabe29553486e87249c3b24621187501c2798772509537",
        "address": "0x4b2af2d7437EDa58f568DCb6E67feA160D376bE7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000641bc55ddab3b9636e82cbf87ede3c3c533039d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x299f187c4f32f4662b29af7b84e52761d1d657a4da3be805c2695d73b6931fbc"
      }
    ],
    "blockNumber": 40990292,
    "cumulativeGasUsed": "8808330",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x09f77e8a13de9a35a7231028187e9fd5db8a2acb",
    "0xb87a436B93fFE9D75c5cFA7bAcFff96430b09868",
    "0x2CBb4B9E98928B278475f7E9C07EB34DA42a53bC",
    "0x489ee077994B6658eAfA855C308275EAd8097C4A",
    "0x9efA34A3C8978A2FA768FE17AAC9FcC56642d0Ab",
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
    0,
    9000,
    6,
    4
  ],
  "numDeployments": 1,
  "solcInputHash": "15a3c77194be24949bc17ac3bcf20b73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOrderBook\",\"name\":\"_orderBook\",\"type\":\"address\"},{\"internalType\":\"contract IPositionRouter\",\"name\":\"_positionRouter\",\"type\":\"address\"},{\"internalType\":\"contract IAccountManager\",\"name\":\"_accountManager\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_COLLATERAL_DECIMALS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PriorLiqPriceCoef\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"}],\"name\":\"ForcedExercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"}],\"name\":\"LiquidateByBorderPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BorderPriceCoef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LTV_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountManager\",\"outputs\":[{\"internalType\":\"contract IAccountManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"borderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowedByCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"calculateUpcomingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upcomingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSlippage\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collateralInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collateralState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collateralStateByBorderPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currentBorderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"}],\"name\":\"gmxPositionCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"intrinsicValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLong\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liqPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liquidateByBorderPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"lockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"contract IOrderBook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPoolDDL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionRouter\",\"outputs\":[{\"internalType\":\"contract IPositionRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInterestRateDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrow(uint256,uint256)\":{\"params\":{\"amount\":\"borrow size (USDC)*\",\"id\":\"collateral ID\"}},\"calculateUpcomingFee(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"collateralInfo(uint256)\":{\"params\":{\"id\":\"collateral id*\"}},\"intrinsicValueOf(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"liquidate(uint256)\":{\"params\":{\"id\":\"position ID*\"}},\"liquidateByBorderPrice(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"lockCollateral(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"maxBorrowLimit(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256,uint256)\":{\"params\":{\"amount\":\"amount to repay (USDC)*\",\"id\":\"collateral ID\"}},\"setInterestRate(uint256)\":{\"params\":{\"value\":\"interest rate (in minutes)*\"}},\"setLTV(uint256)\":{\"params\":{\"value\":\"LTV coefficient.*\"}},\"setMinBorrowLimit(uint256)\":{\"params\":{\"value\":\"min. borrow size (USDC)*\"}},\"setPool(address)\":{\"params\":{\"value\":\"the address of the liquidity pool*\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(uint256,uint256)\":{\"notice\":\"send USDC to the user\"},\"calculateUpcomingFee(uint256)\":{\"notice\":\"used to calculate how much USDC user should pay as interest fee\"},\"collateralInfo(uint256)\":{\"notice\":\"returns the position size and the entry price by collateral ID\"},\"intrinsicValueOf(uint256)\":{\"notice\":\"calculates the intrinsic value of the collateral\"},\"liquidate(uint256)\":{\"notice\":\"used to liquidate the loan\"},\"liquidateByBorderPrice(uint256)\":{\"notice\":\"used to liquidate the loan by border price\"},\"lockCollateral(uint256)\":{\"notice\":\"used to lock the collateral (ERC-721) in DeDeLend\"},\"maxBorrowLimit(uint256)\":{\"notice\":\"calcualtes the maximum borrow size for the specific collateral\"},\"repay(uint256,uint256)\":{\"notice\":\"used to repay the user's debt\"},\"setInterestRate(uint256)\":{\"notice\":\"used to set new interest rate\"},\"setLTV(uint256)\":{\"notice\":\"used to set LTV coefficient\"},\"setMinBorrowLimit(uint256)\":{\"notice\":\"used to set the minimum borrow size\"},\"setPool(address)\":{\"notice\":\"used to connect a new liqidity pool\"},\"unlock(uint256)\":{\"notice\":\"sends the collateral token back to the user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DDL_GMX.sol\":\"DDL_GMX\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DDL.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IPoolDDL.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract DDL is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public LTV;\\n    uint256 public LTV_DECIMALS = 10**4;\\n\\n    IERC721 public collateralToken;\\n    IERC20 public USDC;\\n\\n    uint256 public interestRate = 19025875190258754083880960;\\n    uint256 public INTEREST_RATE_DECIMALS = 10**30;\\n\\n    uint256 public minBorrowLimit;\\n    uint256 public COLLATERAL_DECIMALS;\\n\\n    uint256 public BorderPriceCoef;\\n\\n    IPoolDDL public pool;\\n\\n    struct BorrowedByCollateral {\\n        uint256 borrowed;\\n        uint256 newBorrowTimestamp;\\n    }\\n\\n    mapping(uint256 => BorrowedByCollateral) public borrowedByCollateral;\\n    mapping(uint256 => address) public collateralOwner;\\n\\n    event Borrow(\\n        address indexed user,\\n        uint256 indexed id,\\n        uint256 amount,\\n        address strategy,\\n        uint256 timestamp\\n    );\\n    // discuss about strategy\\n\\n    event Repay(address indexed user, uint256 indexed optionID, uint256 amount);\\n    event Liquidate(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 amount,\\n        uint256 poolProfit,\\n        uint256 liqFee\\n    );\\n    event Unlock(address indexed user, uint256 indexed optionID);\\n    event ForcedExercise(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 amount,\\n        uint256 poolProfit,\\n        uint256 liqFee\\n    );\\n    event LiquidateByBorderPrice(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 userReturn,\\n        uint256 poolReturn,\\n        uint256 liqFee\\n    );\\n\\n    constructor(\\n        IERC721 _collateralToken,\\n        IERC20 _USDC,\\n        uint256 _minBorrowLimit,\\n        uint256 _ltv,\\n        uint256 _COLLATERAL_DECIMALS,\\n        uint256 _BorderPriceCoef\\n    ) {\\n        collateralToken = _collateralToken;\\n        USDC = _USDC;\\n        minBorrowLimit = _minBorrowLimit;\\n        LTV = _ltv;\\n        COLLATERAL_DECIMALS = 10**_COLLATERAL_DECIMALS;\\n        BorderPriceCoef = _BorderPriceCoef;\\n    }\\n\\n    /**\\n     * @notice used to set LTV coefficient\\n     * @param value LTV coefficient.\\n     **/\\n    function setLTV(uint256 value) external onlyOwner {\\n        require(value <= 8000, \\\"invalid value\\\");\\n        LTV = value;\\n    }\\n\\n    /**\\n     * @notice used to set new interest rate\\n     * @param value interest rate (in minutes)\\n     **/\\n    function setInterestRate(uint256 value) external onlyOwner {\\n        interestRate = value;\\n    }\\n\\n    function setInterestRateDecimals(uint256 value) external onlyOwner {\\n        INTEREST_RATE_DECIMALS = value;\\n    }\\n\\n    /**\\n     * @notice used to set the minimum borrow size\\n     * @param value min. borrow size (USDC)\\n     **/\\n    function setMinBorrowLimit(uint256 value) external onlyOwner {\\n        minBorrowLimit = value;\\n    }\\n\\n    /**\\n     * @notice used to connect a new liqidity pool\\n     * @param value the address of the liquidity pool\\n     **/\\n    function setPool(address value) external onlyOwner {\\n        pool = IPoolDDL(value);\\n    }\\n\\n    /**\\n     * @notice used to lock the collateral (ERC-721) in DeDeLend\\n     * @param id collateral ID\\n     **/\\n    function lockCollateral(uint256 id) external {\\n        require(pool.openDeDeLend(), \\\"pauseDeDeLend\\\");\\n        require(collateralToken.ownerOf(id) == msg.sender, \\\"you not owner\\\");\\n        collateralOwner[id] = msg.sender;\\n        _lockCollateral(id, msg.sender);\\n    }\\n\\n    function _lockCollateral(uint256 id, address user) internal virtual;\\n\\n    /**\\n     * @notice calcualtes the maximum borrow size\\n     * for the specific collateral\\n     * @param id collateral ID\\n     **/\\n    function maxBorrowLimit(uint256 id) public view returns (uint256) {\\n        return (intrinsicValueOf(id) / LTV_DECIMALS) * LTV;\\n    }\\n\\n    /**\\n     * @notice send USDC to the user\\n     * @param id collateral ID\\n     * @param amount borrow size (USDC)\\n     **/\\n    function borrow(uint256 id, uint256 amount) external {\\n        require(pool.openDeDeLend(), \\\"pauseDeDeLend\\\");\\n        BorrowedByCollateral storage data = borrowedByCollateral[id];\\n        uint256 maxLimit = maxBorrowLimit(id);\\n        uint256 totalBalance = pool.getTotalBalance();\\n        require(amount >= minBorrowLimit, \\\"amount less minBorrowLimit\\\");\\n        require(amount + data.borrowed <= maxLimit, \\\"borrow is too big\\\");\\n        require(msg.sender == collateralOwner[id], \\\"you are not the owner\\\");\\n        require(\\n            amount <= totalBalance,\\n            \\\"there is not enough money in the pool\\\"\\n        );\\n        _isAvaialbleToBorrow(id);\\n        if (isLong(id)) {\\n            require(currentPrice(id) > borderPrice(id), \\\"the price is too low\\\");\\n        } else {\\n            require(\\n                currentPrice(id) < borderPrice(id),\\n                \\\"the price is too high\\\"\\n            );\\n        }\\n        uint256 upcomingFee = calculateUpcomingFee(id);\\n        borrowedByCollateral[id] = BorrowedByCollateral(\\n            amount + data.borrowed + upcomingFee,\\n            block.timestamp\\n        );\\n        pool.addTotalLocked(amount + upcomingFee);\\n        pool.send(collateralOwner[id], amount);\\n        _emitBorrow(msg.sender, id, amount, block.timestamp);\\n    }\\n\\n    function _isAvaialbleToBorrow(uint256 id) internal virtual;\\n\\n    function _emitBorrow(\\n        address user,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal virtual;\\n\\n    // /**\\n    //  * @notice used to liquidate the loan\\n    //  * @param id position ID\\n    //  **/\\n    // function liquidate(uint256 id) external {\\n    //     require(collateralState(id), \\\"invalid price\\\");\\n    //     BorrowedByCollateral storage data = borrowedByCollateral[id];\\n    //     uint256 profit = intrinsicValueOf(id);\\n    //     _liquidateCollateral(id);\\n    //     uint256 diff = 0;\\n    //     pool.subTotalLocked(data.borrowed);\\n    //     if (profit > data.borrowed) {\\n    //         diff = profit - data.borrowed;\\n    //         USDC.transfer(address(pool), data.borrowed + (diff * 90) / 100);\\n    //         USDC.transfer(msg.sender, (diff * 10) / 100);\\n    //     } else {\\n    //         USDC.transfer(address(pool), profit);\\n    //     }\\n    //     emit Liquidate(\\n    //         collateralOwner[id],\\n    //         id,\\n    //         data.borrowed,\\n    //         (diff * 90) / 100,\\n    //         (diff * 10) / 100\\n    //     );\\n    // }\\n\\n    // function _liquidateCollateral(uint256 id) internal virtual;\\n\\n\\n    // /**\\n    //  * @notice used to liquidate the loan by border price\\n    //  * @param id collateral ID\\n    //  **/\\n    // function liquidateByBorderPrice(uint256 id) external {\\n    //     require(collateralStateByBorderPrice(id), \\\"invalid price\\\");\\n    //     BorrowedByCollateral storage data = borrowedByCollateral[id];\\n    //     uint256 profit = intrinsicValueOf(id);\\n    //     _liquidateCollateral(id);\\n    //     pool.subTotalLocked(data.borrowed);\\n    //     USDC.transfer(address(pool), data.borrowed);\\n    //     USDC.transfer(\\n    //         collateralOwner[id],\\n    //         profit - (data.borrowed + (data.borrowed * 10) / 100)\\n    //     );\\n    //     USDC.transfer(msg.sender, (data.borrowed * 10) / 100);\\n    //     emit LiquidateByBorderPrice(\\n    //         collateralOwner[id],\\n    //         id,\\n    //         profit - (data.borrowed + (data.borrowed * 10) / 100),\\n    //         data.borrowed,\\n    //         (data.borrowed * 10) / 100\\n    //     );\\n    // }\\n\\n    /**\\n     * @notice used to calculate how much USDC\\n     * user should pay as interest fee\\n     * @param id collateral ID\\n     **/\\n    function calculateUpcomingFee(uint256 id)\\n        public\\n        view\\n        returns (uint256 upcomingFee)\\n    {\\n        BorrowedByCollateral storage data = borrowedByCollateral[id];\\n        uint256 periodInMinutes = (block.timestamp - data.newBorrowTimestamp) /\\n            60;\\n        upcomingFee =\\n            ((data.borrowed / 100) * (periodInMinutes * interestRate)) /\\n            INTEREST_RATE_DECIMALS;\\n    }\\n\\n    /**\\n     * @notice used to repay the user's debt\\n     * @param id collateral ID\\n     * @param amount amount to repay (USDC)\\n     **/\\n    function repay(uint256 id, uint256 amount) external {\\n        require(borrowedByCollateral[id].borrowed > 0, \\\"option redeemed\\\");\\n        uint256 upcomingFee = calculateUpcomingFee(id);\\n        require(\\n            amount <= borrowedByCollateral[id].borrowed + upcomingFee,\\n            \\\"too much amount\\\"\\n        );\\n        require(msg.sender == collateralOwner[id]);\\n        uint256 newBorrow = borrowedByCollateral[id].borrowed +\\n            upcomingFee -\\n            amount;\\n        pool.subTotalLocked(amount - upcomingFee);\\n        borrowedByCollateral[id] = BorrowedByCollateral(\\n            newBorrow,\\n            block.timestamp\\n        );\\n        USDC.transferFrom(collateralOwner[id], address(this), amount);\\n        USDC.transfer(address(pool), amount);\\n        emit Repay(msg.sender, id, amount);\\n    }\\n\\n    /**\\n     * @notice sends the collateral token back to the user\\n     * @param id collateral ID\\n     **/\\n    function unlock(uint256 id) external {\\n        require(borrowedByCollateral[id].borrowed == 0, \\\"loan is blocked\\\");\\n        collateralToken.transferFrom(address(this), collateralOwner[id], id);\\n        emit Unlock(msg.sender, id);\\n    }\\n\\n    function isLong(uint256 id) public view virtual returns (bool);\\n\\n    function collateralState(uint256 id) public view returns (bool) {\\n        if (isLong(id)) {\\n            return currentPrice(id) <= liqPrice(id);\\n        } else {\\n            return currentPrice(id) >= liqPrice(id);\\n        }\\n    }\\n\\n    function collateralStateByBorderPrice(uint256 id)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (isLong(id)) {\\n            return currentPrice(id) <= borderPrice(id);\\n        } else {\\n            return currentPrice(id) >= borderPrice(id);\\n        }\\n    }\\n\\n    function currentPrice(uint256 id)\\n        public\\n        view\\n        virtual\\n        returns (uint256 price)\\n    {}\\n\\n    /**\\n     * @param id positon ID\\n     * @notice returns position size and entryPrice\\n     **/\\n    function collateralInfo(uint256 id)\\n        public\\n        view\\n        virtual\\n        returns (uint256 amount, uint256 price);\\n\\n    function borderPrice(uint256 id) public view returns (uint256 price) {\\n        (, uint256 openPrice) = collateralInfo(id);\\n        if (isLong(id)) {\\n            return (openPrice * (100 + BorderPriceCoef)) / 100;\\n        }\\n        return (openPrice * (100 - BorderPriceCoef)) / 100;\\n    }\\n\\n    function liqPrice(uint256 id) public view returns (uint256 price) {\\n        BorrowedByCollateral storage data = borrowedByCollateral[id];\\n        (uint256 amount, uint256 openPrice) = collateralInfo(id);\\n        console.log(\\\"liqPrice\\\", data.borrowed, openPrice, (data.borrowed * COLLATERAL_DECIMALS));\\n        console.log(amount, (data.borrowed * COLLATERAL_DECIMALS)/amount);\\n        if (isLong(id)) {\\n            return\\n                openPrice +\\n                ((data.borrowed * COLLATERAL_DECIMALS) / (amount)) *\\n                120;\\n        }\\n        return\\n            openPrice -\\n            ((data.borrowed * COLLATERAL_DECIMALS) / (amount)) *\\n            120;\\n    }\\n\\n    function currentBorderPrice(uint256 id)\\n        public\\n        view\\n        returns (uint256 price)\\n    {\\n        if (isLong(id)) {\\n            if (borderPrice(id) > liqPrice(id)) {\\n                return borderPrice(id);\\n            }\\n            return liqPrice(id);\\n        }\\n        if (borderPrice(id) < liqPrice(id)) {\\n            return borderPrice(id);\\n        }\\n        return liqPrice(id);\\n    }\\n\\n    /**\\n     * @notice position's value\\n     * @param id position ID\\n     **/\\n    function intrinsicValueOf(uint256 id)\\n        public\\n        view\\n        virtual\\n        returns (uint256 profit);\\n}\\n\",\"keccak256\":\"0xd2c27be2b1f386ff58bfe6f4c201d5af1669ec75067175960c3b111c1ba33a56\"},\"contracts/DDL_GMX.sol\":{\"content\":\"pragma solidity 0.8.6||0.7.0;\\n\\nimport \\\"./DDL.sol\\\";\\nimport \\\"./interfaces/IAccountManager.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IPositionRouter.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"./Doppelganger.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract DDL_GMX is DDL {\\n    IAccountManager public accountManager;\\n    IVault public vault;\\n    IOrderBook public orderBook;\\n    IPositionRouter public positionRouter;\\n    int256 public closeSlippage = 10;\\n    uint256 internal constant GMX_DECIMALS = 1e30;\\n\\n    struct PositionInfo {\\n        address indexToken;\\n        uint256 amount;\\n        uint256 openPrice;\\n        bool isLong;\\n    }\\n\\n    struct LiquidatePositionInfo {\\n        uint256 id;\\n        address liquidator;\\n        uint256 profit;\\n        bool isBorderPrice;        \\n    }\\n\\n    mapping(uint256 => PositionInfo) public positionInfo;\\n    mapping(bytes32 => LiquidatePositionInfo) private liquidatePositionInfo;\\n\\n    constructor(\\n        IOrderBook _orderBook,\\n        IPositionRouter _positionRouter,\\n        IAccountManager _accountManager,\\n        IVault _vault,\\n        IERC721 _collateralToken,\\n        IERC20 _USDC,\\n        uint256 _minBorrowLimit,\\n        uint256 _ltv,\\n        uint256 _COLLATERAL_DECIMALS,\\n        uint256 _PriorLiqPriceCoef\\n    )\\n        DDL(\\n            _collateralToken,\\n            _USDC,\\n            _minBorrowLimit,\\n            _ltv,\\n            _COLLATERAL_DECIMALS,\\n            _PriorLiqPriceCoef\\n        )\\n    {\\n        orderBook = _orderBook;\\n        positionRouter = _positionRouter;\\n        accountManager = _accountManager;\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @notice takes ERC-721 (collateral) from the user and locking in DDL_GMX\\n     * @param id collateral ID\\n     * @param user user's address\\n     **/\\n    function _lockCollateral(uint256 id, address user) internal override {\\n        (IAccountManager.Symbols symbol, , bool isLong, , ) = accountManager.keyData(id);\\n        address indexToken = accountManager.indexTokenBySymbol(symbol);\\n        (uint256 size, , uint256 averagePrice, , , , ,) = accountManager\\n            .getPosition(id);\\n        collateralToken.transferFrom(msg.sender, address(this), id);\\n        positionInfo[id] = PositionInfo(indexToken, size, averagePrice, isLong);\\n    }\\n\\n    /**\\n     * @notice check the ability to get borrow USDC by collateral ID\\n     * @param id collateral ID\\n     **/\\n    function _isAvaialbleToBorrow(uint256 id) internal override {\\n        (bool isProfit, ) = accountManager.getPositionDelta(id);\\n        require(isProfit, \\\"no profit\\\");\\n    }\\n\\n    function _emitBorrow(\\n        address user,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 timestamp\\n    ) internal override {\\n        emit Borrow(\\n            user,\\n            id,\\n            amount,\\n            positionInfo[id].indexToken,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice calculates the intrinsic value of the collateral\\n     * @param id collateral ID\\n     **/\\n    function intrinsicValueOf(uint256 id)\\n        public\\n        view\\n        override\\n        returns (uint256 delta)\\n    {\\n        (bool isProfit, uint256 profit) = accountManager.getPositionDelta(id);\\n        profit = profit / (GMX_DECIMALS / 1e6);\\n        return (isProfit ? profit : 0);\\n    }\\n\\n    /**\\n     * @notice closes position on GMX\\n     * @param id collateral id\\n     **/\\n    function _liquidateCollateral(uint256 id, bool isBorderPrice) internal {\\n        (, address doppelgangerContract, , , ) = accountManager.keyData(id);\\n        PositionInfo memory data = positionInfo[id];\\n        (uint256 closePrice, uint256 size) = liquidateClosePrice(id);\\n        (\\n            address[] memory path,\\n            uint256 minOut,\\n            uint256 closeValue\\n        ) = _preparationData(id);\\n        informationFromCallback(doppelgangerContract, id, isBorderPrice);\\n        Doppelganger(payable(doppelgangerContract)).createDecreasePosition{value: msg.value}(\\n            address(this),\\n            path,\\n            data.indexToken,\\n            closeValue,\\n            size,\\n            data.isLong,\\n            closePrice,\\n            minOut,\\n            positionRouter.minExecutionFee(),\\n            false,\\n            address(this)\\n        );\\n    }\\n\\n    function informationFromCallback(address doppelgangerContract, uint256 id, bool isBorderPrice) private {\\n        uint256 index = positionRouter.decreasePositionsIndex(doppelgangerContract);\\n        bytes32 requestKey = positionRouter.getRequestKey(doppelgangerContract, index);\\n        uint256 profit = intrinsicValueOf(id);\\n        // console.log(\\\"profit\\\", profit);\\n        liquidatePositionInfo[requestKey] = LiquidatePositionInfo(\\n            id,\\n            msg.sender,\\n            profit,\\n            isBorderPrice\\n        );\\n    }\\n\\n     /**\\n     * @notice used to liquidate the loan\\n     * @param id position ID\\n     **/\\n    function liquidate(uint256 id) external payable {\\n        require(collateralState(id), \\\"invalid price\\\");\\n        require(msg.value >= positionRouter.minExecutionFee(), \\\"minExecutionFee too smal\\\");\\n        _liquidateCollateral(id, false);\\n    }\\n\\n    /**\\n     * @notice used to liquidate the loan by border price\\n     * @param id collateral ID\\n     **/\\n     function liquidateByBorderPrice(uint256 id) external payable {\\n        require(collateralStateByBorderPrice(id), \\\"invalid price\\\");\\n        require(msg.value >= positionRouter.minExecutionFee(), \\\"minExecutionFee too smal\\\");\\n        _liquidateCollateral(id, true);\\n    }\\n\\n    function gmxPositionCallback(bytes32 positionKey, bool isExecuted, bool isIncrease) external {\\n        // console.log(\\\"=> gmxPositionCallback\\\", isIncrease);\\n        require(msg.sender == address(positionRouter), \\\"msg.sender is not positionRouter\\\");\\n        // require(!isIncrease, \\\"invalid type\\\");\\n        // console.log(\\\"USDC\\\", USDC.balanceOf(address(this)));\\n        uint256 diff = 0;\\n        uint256 id = liquidatePositionInfo[positionKey].id;\\n        uint256 borrowed = borrowedByCollateral[id].borrowed;\\n        uint256 profit = liquidatePositionInfo[positionKey].profit;\\n        address liquidator = liquidatePositionInfo[positionKey].liquidator;\\n        pool.subTotalLocked(borrowed);\\n        if (liquidatePositionInfo[positionKey].isBorderPrice) {\\n            USDC.transfer(address(pool), borrowed);\\n            USDC.transfer(\\n                collateralOwner[id],\\n                profit - (borrowed + (borrowed * 10) / 100)\\n            );\\n            USDC.transfer(liquidator, (borrowed * 10) / 100);\\n            emit LiquidateByBorderPrice(\\n                collateralOwner[id],\\n                id,\\n                profit - (borrowed + (borrowed * 10) / 100),\\n                borrowed,\\n                (borrowed * 10) / 100\\n            );\\n        } else {\\n            if (profit > borrowed) {\\n                diff = profit - borrowed;\\n                USDC.transfer(address(pool), borrowed + (diff * 90) / 100);\\n                USDC.transfer(liquidator, (diff * 10) / 100);\\n            } else {\\n                USDC.transfer(address(pool), profit);\\n            }\\n            emit Liquidate(\\n                collateralOwner[id],\\n                id,\\n                borrowed,\\n                (diff * 90) / 100,\\n                (diff * 10) / 100\\n            );\\n        }\\n    }\\n\\n    function _preparationData(uint256 id)\\n        internal\\n        returns (\\n            address[] memory path,\\n            uint256 minOut,\\n            uint256 closeValue\\n        )\\n    {\\n        (, uint256 collateral, , , , , , ) = accountManager.getPosition(id);\\n        (bool isProfit, uint256 delta) = accountManager.getPositionDelta(id);\\n        closeValue = (isProfit ? collateral : delta);\\n        if (positionInfo[id].isLong) {\\n            path = new address[](2);\\n            path[0] = positionInfo[id].indexToken;\\n            path[1] = address(USDC);\\n            minOut = (closeValue * 99) / 100;\\n        } else {\\n            path = new address[](1);\\n            path[0] = address(USDC);\\n            minOut = 0;\\n        }\\n    }\\n\\n    function liquidateClosePrice(uint256 id) internal returns (uint256 closePrice, uint256 size) {\\n        (uint256 size, , , , , , , ) = accountManager.getPosition(id);\\n        require(size != 0, \\\"position size is null\\\");\\n        closePrice = (accountManager.currentPrice(id) / 1000) *  \\n            uint256(\\n                positionInfo[id].isLong\\n                    ? int256(1000) - closeSlippage\\n                    : int256(1000) + closeSlippage\\n            );\\n    }\\n\\n    function isLong(uint256 id) public view override returns (bool) {\\n        return accountManager.isLong(id);\\n    }\\n\\n    function currentPrice(uint256 id) public view override returns (uint256) {\\n        PositionInfo memory data = positionInfo[id];\\n        if (isLong(id)) {\\n            return vault.getMaxPrice(data.indexToken)/(GMX_DECIMALS/COLLATERAL_DECIMALS);\\n        }\\n        return vault.getMinPrice(data.indexToken)/(GMX_DECIMALS/COLLATERAL_DECIMALS);\\n    }\\n\\n    /**\\n     * @notice returns the position size and the entry price by collateral ID\\n     * @param id collateral id\\n     **/\\n    function collateralInfo(uint256 id)\\n        public\\n        view\\n        override\\n        returns (uint256 amount, uint256 price)\\n    {\\n        (uint256 size, , uint256 averagePrice, , , , ,) = accountManager\\n            .getPosition(id);\\n        return (size/(GMX_DECIMALS/COLLATERAL_DECIMALS), averagePrice/(GMX_DECIMALS/COLLATERAL_DECIMALS));\\n    }\\n}\\n\",\"keccak256\":\"0x08af0cba313fddfddf26ce009da648f6058a126b0e7aad326f45c27d11d2b458\"},\"contracts/Doppelganger.sol\":{\"content\":\"pragma solidity 0.8.6||0.6.12;\\n\\nimport \\\"./interfaces/IPositionRouter.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"./interfaces/IAccountManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Doppelganger {\\n    using SafeERC20 for IERC20;\\n\\n    receive() external payable{}\\n\\n    IPositionRouter public positionRouter;\\n    IOrderBook public orderBook;\\n    mapping(address => mapping(bool => uint256)) public keyByIndexToken;\\n    mapping(uint256  => bool) public keys;\\n    ERC721 public GMXPT;\\n    address public immutable router;\\n    address[4] public indexTokenArray;\\n    address[4] public stablecoinsArray;\\n    address public accountManager;\\n    address public ddl_gmx;\\n    bool public isApproved = false;\\n\\n    constructor(\\n        IPositionRouter _positionRouter,\\n        address _router,\\n        IOrderBook _orderBook,\\n        uint256[8] memory keyArray,\\n        address[8] memory _indexTokenArray,\\n        address[4] memory _stablecoinsArray,\\n        address _accountManager,\\n        address _accountManagerToken,\\n        address _ddl_gmx\\n    ) {\\n        positionRouter = _positionRouter;\\n        router = _router;\\n        orderBook = _orderBook;\\n        for (uint256 i = 0; i < 8; i++) {\\n            if (i < 4) {\\n                indexTokenArray[i] = _indexTokenArray[i];\\n                stablecoinsArray[i] = _stablecoinsArray[i];\\n            }\\n            keyByIndexToken[_indexTokenArray[i]][\\n                i < 4 ? true : false\\n            ] = keyArray[i];\\n            keys[keyArray[i]] = true; \\n        }\\n        GMXPT = ERC721(_accountManagerToken);\\n        accountManager = _accountManager;\\n        ddl_gmx = _ddl_gmx;\\n    }\\n\\n    function _checkKeyAndMsgSender(address user, address _indexToken, bool _isLong) private {\\n        require(\\n            GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]) == user,\\n            \\\"you don't have a key\\\"\\n        );\\n        require(keys[keyByIndexToken[_indexToken][_isLong]], \\\"invalid key\\\");\\n        if (msg.sender != ddl_gmx) {\\n            require(msg.sender == accountManager, \\\"invalid msg.sender\\\");\\n        }\\n    }\\n\\n    function createIncreasePosition(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        positionRouter.createIncreasePosition{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createIncreasePositionETH(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        positionRouter.createIncreasePositionETH{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createDecreasePosition(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable {\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        require(keyOwner == user, \\\"you don't have a key\\\");\\n        if (msg.sender != ddl_gmx) {\\n            require(msg.sender == accountManager, \\\"invalid msg.sender\\\");\\n        }\\n        positionRouter.createDecreasePosition{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            keyOwner,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            _withdrawETH,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createIncreaseOrder(\\n        address user,\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        orderBook.createIncreaseOrder{value: msg.value}(\\n            _path,\\n            _amountIn,\\n            _indexToken,\\n            _minOut,\\n            _sizeDelta,\\n            _collateralToken,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee,\\n            _shouldWrap\\n        );\\n    }\\n\\n    function updateIncreaseOrder(\\n        address user, \\n        address _indexToken, \\n        bool _isLong, \\n        uint256 _orderIndex, \\n        uint256 _sizeDelta, \\n        uint256 _triggerPrice, \\n        bool _triggerAboveThreshold\\n    ) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        orderBook.updateIncreaseOrder(_orderIndex, _sizeDelta, _triggerPrice, _triggerAboveThreshold);\\n    }\\n\\n    function cancelIncreaseOrder(address user, address _indexToken, bool _isLong, uint256 _orderIndex) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        (\\n            address purchaseToken, \\n            uint256 purchaseTokenAmount,\\n            ,\\n            ,\\n            ,\\n            bool isLong,\\n            ,\\n            ,\\n            uint256 executionFee\\n        ) = orderBook.getIncreaseOrder(address(this), _orderIndex);\\n        orderBook.cancelIncreaseOrder(_orderIndex);\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        ERC20(purchaseToken).transfer(\\n            keyOwner,\\n            purchaseTokenAmount\\n        );\\n        ERC20(indexTokenArray[0]).transfer(\\n            keyOwner,\\n            executionFee\\n        );\\n    }\\n\\n    function createDecreaseOrder(\\n        address user,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        orderBook.createDecreaseOrder{value: msg.value}(\\n            _indexToken,\\n            _sizeDelta,\\n            _collateralToken,\\n            _collateralDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n\\n    function withdrawLiquidity(address user, address _indexToken, bool _isLong, address tokenAddress) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        ERC20(tokenAddress).transfer(\\n            keyOwner,\\n            ERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    function withdrawLiquidityETH(address user, address _indexToken, bool _isLong) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        payable(keyOwner).transfer(address(this).balance);\\n    }\\n\\n    function cancelDecreaseOrder(address user, address _indexToken, bool _isLong, uint256 _orderIndex) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        (\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint256 executionFee\\n        ) = orderBook.getDecreaseOrder(address(this), _orderIndex);\\n        orderBook.cancelDecreaseOrder(_orderIndex);\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        ERC20(indexTokenArray[0]).transfer(\\n            keyOwner,\\n            executionFee\\n        );\\n    }\\n\\n    function updateDecreaseOrder(\\n        address user, \\n        address _indexToken, \\n        bool _isLong, \\n        uint256 _orderIndex,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        orderBook.updateDecreaseOrder(\\n            _orderIndex,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n\\n    /**\\n     * @param value maxUnit256\\n     **/\\n    function approveAll(uint256 value) public {\\n        IRouter(router).approvePlugin(address(positionRouter));\\n        IRouter(router).approvePlugin(address(orderBook));\\n        for (uint256 i = 0; i < 4; i++) {\\n            ERC20(indexTokenArray[i]).approve(address(positionRouter), value);\\n            ERC20(indexTokenArray[i]).approve(router, value);\\n            ERC20(stablecoinsArray[i]).approve(address(positionRouter), value);\\n            ERC20(stablecoinsArray[i]).approve(router, value);\\n        }\\n        isApproved = true;\\n    }\\n}\\n\",\"keccak256\":\"0xcc684c2770b30b9c72d0f64235fd946bfb95c029479cc52ddb7ae1109afe65ed\"},\"contracts/interfaces/IAccountManager.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IAccountManager {\\n    enum Symbols {\\n        ETH_USD_LONG,\\n        BTC_USD_LONG,\\n        LINK_USD_LONG,\\n        UNI_USD_LONG,\\n        ETH_USD_SHORT,\\n        BTC_USD_SHORT,\\n        LINK_USD_SHORT,\\n        UNI_USD_SHORT\\n    }\\n    function keyData(uint256 id) external returns (\\n        Symbols symbol, \\n        address doppelgangerContract, \\n        bool isLong,\\n        address indexToken,\\n        address user\\n    );\\n    function indexTokenBySymbol(Symbols symbol) external returns (address indexToken);\\n    function getPositionDelta(uint256 id) external view returns (bool isProfit, uint256 profit);\\n    function getPosition(uint256 id) external view returns (\\n        uint256 size, \\n        uint256 collateral, \\n        uint256 averagePrice, \\n        uint256 entryFundingRate, \\n        uint256 reserveAmount, \\n        uint256 realisedPnl,\\n        bool isProfit, \\n        uint256 lastIncreasedTime\\n    );\\n    function currentPrice(uint256 id) external view returns (uint256 price);\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable;\\n\\n    function isLong(uint256 id) external view returns (bool);\\n}\",\"keccak256\":\"0x23d7f1ca73ab5ee05f121c70722ef40a9330c25ef9d193de24e9da32a3b32559\"},\"contracts/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IOrderBook {\\n\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\\n        address path0, \\n        address path1,\\n        address path2,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken, \\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function createIncreaseOrder(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap\\n    ) external payable;\\n    function cancelIncreaseOrder(uint256 _orderIndex) external;\\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\\n    function updateIncreaseOrder(uint256 _orderIndex, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external;\\n\\n    function createDecreaseOrder(\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external payable;\\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\\n    function cancelDecreaseOrder(uint256 _orderIndex) external;\\n    function updateDecreaseOrder(\\n        uint256 _orderIndex,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external;\\n\\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\\n}\\n\",\"keccak256\":\"0x00c439d23a66e4e44ec7e16dc8d46e2fe041c3ae2bbd72ce70172dd8d781c766\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolDDL.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IPoolDDL {\\n    function send(address to, uint amount) external;\\n    function getTotalBalance() external view returns (uint256 balance);\\n    function addTotalLocked(uint256 value) external;\\n    function subTotalLocked(uint256 value) external; \\n    function openDeDeLend() external view returns (bool openDeDeLend);\\n}\",\"keccak256\":\"0xc8ac2c3446c29742ebf558b0e7b67c715d00fd3db64455f83d730f72d6dbcd5c\"},\"contracts/interfaces/IPositionRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IPositionRouter {\\n    function increasePositionRequestKeysStart() external returns (uint256);\\n    function decreasePositionRequestKeysStart() external returns (uint256);\\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function executeIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function cancelIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function executeDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function cancelDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function createIncreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable;\\n    function createIncreasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable;\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable;\\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\\n    function getRequestKey(address _account, uint256 _index) external pure returns (bytes32);\\n    function decreasePositionsIndex(address _account) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x70910123732b5068f4c441f9f65aef17ee660bbf8ad17ac94f5170398dc6b826\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n    function approvePlugin(address _plugin) external;\\n}\\n\",\"keccak256\":\"0x8496939c59721c4414a6825788f56df0479e491374a8459c8a4d731577f07fae\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12 || 0.8.6;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function getPositionDelta(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0xcbc0ac4af00aa8e19477deae52816a379849b934f3c53421a2df6aafa14034b0\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12 || 0.8.6;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfe7570540294503e8fca49c9f0c78731fb495b59dc1b88ef8396482cebbbba94\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526127106002556a0fbce2c2bf9557000000006005556c0c9f2c9cd04674edea40000000600655600a6011553480156200003c57600080fd5b5060405162003784380380620037848339810160408190526200005f9162000173565b858585858585620000703362000123565b600380546001600160a01b038089166001600160a01b031992831617909255600480549288169290911691909117905560078490556001839055620000b782600a6200027a565b6008556009555050600f80546001600160a01b039e8f166001600160a01b031991821617909155601080549d8f169d82169d909d17909c555050600d8054998c16998b16999099179098555050600e805495909816949096169390931790955550620003749350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806000806000806000806101408b8d0312156200019457600080fd5b8a51620001a1816200035b565b60208c0151909a50620001b4816200035b565b60408c0151909950620001c7816200035b565b60608c0151909850620001da816200035b565b60808c0151909750620001ed816200035b565b60a08c015190965062000200816200035b565b8095505060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b600181815b808511156200027257816000190482111562000256576200025662000345565b808516156200026457918102915b93841c939080029062000236565b509250929050565b60006200028883836200028f565b9392505050565b600082620002a0575060016200033f565b81620002af575060006200033f565b8160018114620002c85760028114620002d357620002f3565b60019150506200033f565b60ff841115620002e757620002e762000345565b50506001821b6200033f565b5060208310610133831016604e8410600b841016171562000318575081810a6200033f565b62000324838362000231565b80600019048211156200033b576200033b62000345565b0290505b92915050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146200037157600080fd5b50565b61340080620003846000396000f3fe6080604052600436106102675760003560e01c80637c3a00fd11610144578063c3707709116100b6578063e5bad7231161007a578063e5bad7231461078c578063edf3daec146107ac578063f2fde38b146107cc578063fbfa77cf146107ec578063fe651d1c1461080c578063fecb63571461082c57600080fd5b8063c3707709146106f6578063d88c691014610716578063d8aed14514610736578063e2233cbd14610756578063e260d7471461077657600080fd5b80639d38d064116101085780639d38d0641461062c5780639e3aa5b114610642578063a226b48314610662578063b13de26614610682578063b2016bd4146106a2578063b3b840df146106c257600080fd5b80637c3a00fd1461053d57806389097a6a1461055357806389a30271146105ce5780638da5cb5b146105ee57806391c2c4691461060c57600080fd5b80634de33fda116101dd57806362965d8e116101a157806362965d8e1461048c57806366234ffa146104a2578063715018a6146104b8578063776af5ba146104cd57806379881698146104ed5780637a3c4c171461051d57600080fd5b80634de33fda146103ec578063587a03c21461040c5780635f84f3021461042c5780636198e3391461044c57806361ef161f1461046c57600080fd5b806324a6665e1161022f57806324a6665e14610338578063415f12401461036d57806341f6cf4e146103805780634437152a14610396578063484f1371146103b65780634ddde78d146103d657600080fd5b80630ecbcdab1461026c57806316f0115b1461028e57806317582981146102cb5780631a426216146102ef578063200549ca14610302575b600080fd5b34801561027857600080fd5b5061028c6102873660046130a9565b61084c565b005b34801561029a57600080fd5b50600a546102ae906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d757600080fd5b506102e160095481565b6040519081526020016102c2565b61028c6102fd366004613090565b610d28565b34801561030e57600080fd5b506102ae61031d366004613090565b600c602052600090815260409020546001600160a01b031681565b34801561034457600080fd5b50610358610353366004613090565b610e4b565b604080519283526020830191909152016102c2565b61028c61037b366004613090565b610f2f565b34801561038c57600080fd5b506102e160115481565b3480156103a257600080fd5b5061028c6103b1366004612f37565b61104f565b3480156103c257600080fd5b506102e16103d1366004613090565b611079565b3480156103e257600080fd5b506102e160085481565b3480156103f857600080fd5b506102e1610407366004613090565b6110e2565b34801561041857600080fd5b5061028c610427366004613090565b61113c565b34801561043857600080fd5b5061028c610447366004613090565b611149565b34801561045857600080fd5b5061028c610467366004613090565b611156565b34801561047857600080fd5b506010546102ae906001600160a01b031681565b34801561049857600080fd5b506102e160015481565b3480156104ae57600080fd5b506102e160065481565b3480156104c457600080fd5b5061028c61124f565b3480156104d957600080fd5b50600f546102ae906001600160a01b031681565b3480156104f957600080fd5b5061050d610508366004613090565b611263565b60405190151581526020016102c2565b34801561052957600080fd5b506102e1610538366004613090565b6112a7565b34801561054957600080fd5b506102e160055481565b34801561055f57600080fd5b506105a261056e366004613090565b60126020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016102c2565b3480156105da57600080fd5b506004546102ae906001600160a01b031681565b3480156105fa57600080fd5b506000546001600160a01b03166102ae565b34801561061857600080fd5b50600d546102ae906001600160a01b031681565b34801561063857600080fd5b506102e160025481565b34801561064e57600080fd5b506102e161065d366004613090565b6113e7565b34801561066e57600080fd5b5061050d61067d366004613090565b611412565b34801561068e57600080fd5b5061028c61069d366004613090565b61148f565b3480156106ae57600080fd5b506003546102ae906001600160a01b031681565b3480156106ce57600080fd5b506103586106dd366004613090565b600b602052600090815260409020805460019091015482565b34801561070257600080fd5b5061028c610711366004613090565b6114de565b34801561072257600080fd5b506102e1610731366004613090565b6114eb565b34801561074257600080fd5b5061028c6107513660046130a9565b6115e4565b34801561076257600080fd5b5061028c610771366004613090565b6118e2565b34801561078257600080fd5b506102e160075481565b34801561079857600080fd5b506102e16107a7366004613090565b611a92565b3480156107b857600080fd5b5061028c6107c7366004612fd5565b611b49565b3480156107d857600080fd5b5061028c6107e7366004612f37565b612190565b3480156107f857600080fd5b50600e546102ae906001600160a01b031681565b34801561081857600080fd5b506102e1610827366004613090565b612206565b34801561083857600080fd5b5061050d610847366004613090565b612261565b600a60009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d29190612f71565b6109135760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b60448201526064015b60405180910390fd5b6000828152600b602052604081209061092b846113e7565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b03166312b583496040518163ffffffff1660e01b815260040160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190612fbc565b9050600754841015610a095760405162461bcd60e51b815260206004820152601a60248201527f616d6f756e74206c657373206d696e426f72726f774c696d6974000000000000604482015260640161090a565b82548290610a1790866132cc565b1115610a595760405162461bcd60e51b8152602060048201526011602482015270626f72726f7720697320746f6f2062696760781b604482015260640161090a565b6000858152600c60205260409020546001600160a01b03163314610ab75760405162461bcd60e51b81526020600482015260156024820152743cb7ba9030b932903737ba103a34329037bbb732b960591b604482015260640161090a565b80841115610b155760405162461bcd60e51b815260206004820152602560248201527f7468657265206973206e6f7420656e6f756768206d6f6e657920696e20746865604482015264081c1bdbdb60da1b606482015260840161090a565b610b1e85612283565b610b2785611412565b15610b8757610b35856110e2565b610b3e866112a7565b11610b825760405162461bcd60e51b815260206004820152601460248201527374686520707269636520697320746f6f206c6f7760601b604482015260640161090a565b610bde565b610b90856110e2565b610b99866112a7565b10610bde5760405162461bcd60e51b81526020600482015260156024820152740e8d0ca40e0e4d2c6ca40d2e640e8dede40d0d2ced605b1b604482015260640161090a565b6000610be986611079565b9050604051806040016040528082866000015488610c0791906132cc565b610c1191906132cc565b8152426020918201526000888152600b82526040902082518155910151600190910155600a546001600160a01b0316632bc355ca610c4f83886132cc565b6040518263ffffffff1660e01b8152600401610c6d91815260200190565b600060405180830381600087803b158015610c8757600080fd5b505af1158015610c9b573d6000803e3d6000fd5b5050600a546000898152600c602052604090819020549051633419e74d60e21b81526001600160a01b039182166004820152602481018a90529116925063d0679d349150604401600060405180830381600087803b158015610cfc57600080fd5b505af1158015610d10573d6000803e3d6000fd5b50505050610d203387874261233f565b505050505050565b610d3181612261565b610d6d5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015260640161090a565b601060009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b158015610dbb57600080fd5b505afa158015610dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df39190612fbc565b341015610e3d5760405162461bcd60e51b81526020600482015260186024820152771b5a5b915e1958dd5d1a5bdb919959481d1bdbc81cdb585b60421b604482015260640161090a565b610e488160016123a0565b50565b600d5460405163eb02c30160e01b8152600481018390526000918291829182916001600160a01b039091169063eb02c301906024016101006040518083038186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed191906130cb565b505050505092505091506008546c0c9f2c9cd04674edea40000000610ef691906132e4565b610f0090836132e4565b600854610f1a906c0c9f2c9cd04674edea400000006132e4565b610f2490836132e4565b935093505050915091565b610f3881611263565b610f745760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015260640161090a565b601060009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa9190612fbc565b3410156110445760405162461bcd60e51b81526020600482015260186024820152771b5a5b915e1958dd5d1a5bdb919959481d1bdbc81cdb585b60421b604482015260640161090a565b610e488160006123a0565b6110576125ad565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600b6020526040812060018101548290603c9061109b9042613364565b6110a591906132e4565b9050600654600554826110b89190613306565b83546110c6906064906132e4565b6110d09190613306565b6110da91906132e4565b949350505050565b6000806110ee83610e4b565b9150506110fa83611412565b1561112b576064600954606461111091906132cc565b61111a9083613306565b61112491906132e4565b9392505050565b606460095460646111109190613364565b6111446125ad565b600655565b6111516125ad565b600555565b6000818152600b6020526040902054156111a45760405162461bcd60e51b815260206004820152600f60248201526e1b1bd85b881a5cc8189b1bd8dad959608a1b604482015260640161090a565b6003546000828152600c6020526040908190205490516323b872dd60e01b81523060048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401600060405180830381600087803b15801561120757600080fd5b505af115801561121b573d6000803e3d6000fd5b50506040518392503391507f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f190600090a350565b6112576125ad565b6112616000612607565b565b600061126e82611412565b1561128d5761127c826114eb565b611285836112a7565b111592915050565b611296826114eb565b61129f836112a7565b101592915050565b6000818152601260209081526040808320815160808101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003015460ff16151560608201526112fc83611412565b1561139a5760085461131b906c0c9f2c9cd04674edea400000006132e4565b600e548251604051637092736960e11b81526001600160a01b03918216600482015291169063e124e6d2906024015b60206040518083038186803b15801561136257600080fd5b505afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111a9190612fbc565b6008546113b4906c0c9f2c9cd04674edea400000006132e4565b600e5482516040516340d3096b60e11b81526001600160a01b0391821660048201529116906381a612d69060240161134a565b60006001546002546113f884611a92565b61140291906132e4565b61140c9190613306565b92915050565b600d5460405163a226b48360e01b8152600481018390526000916001600160a01b03169063a226b4839060240160206040518083038186803b15801561145757600080fd5b505afa15801561146b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c9190612f71565b6114976125ad565b611f408111156114d95760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b604482015260640161090a565b600155565b6114e66125ad565b600755565b6000818152600b60205260408120818061150485610e4b565b91509150611549604051806040016040528060088152602001676c6971507269636560c01b81525084600001548360085487600001546115449190613306565b612657565b61156f828360085486600001546115609190613306565b61156a91906132e4565b6126a6565b61157885611412565b156115b5576008548354839161158d91613306565b61159791906132e4565b6115a2906078613306565b6115ac90826132cc565b95945050505050565b600854835483916115c591613306565b6115cf91906132e4565b6115da906078613306565b6115ac9082613364565b6000828152600b60205260409020546116315760405162461bcd60e51b815260206004820152600f60248201526e1bdc1d1a5bdb881c995919595b5959608a1b604482015260640161090a565b600061163c83611079565b6000848152600b60205260409020549091506116599082906132cc565b82111561169a5760405162461bcd60e51b815260206004820152600f60248201526e1d1bdbc81b5d58da08185b5bdd5b9d608a1b604482015260640161090a565b6000838152600c60205260409020546001600160a01b031633146116bd57600080fd5b6000838152600b602052604081205483906116d99084906132cc565b6116e39190613364565b600a549091506001600160a01b0316631b45a68d6117018486613364565b6040518263ffffffff1660e01b815260040161171f91815260200190565b600060405180830381600087803b15801561173957600080fd5b505af115801561174d573d6000803e3d6000fd5b505060408051808201825284815242602080830191825260008a8152600b825284812093518455915160019093019290925560048054600c909352908390205492516323b872dd60e01b81526001600160a01b039384169181019190915230602482015260448101889052911692506323b872dd9150606401602060405180830381600087803b1580156117e057600080fd5b505af11580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118189190612f71565b5060048054600a5460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301869052169063a9059cbb90604401602060405180830381600087803b15801561186b57600080fd5b505af115801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a39190612f71565b50604051838152849033907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d0906020015b60405180910390a350505050565b600a60009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561193057600080fd5b505afa158015611944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119689190612f71565b6119a45760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b604482015260640161090a565b6003546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156119e857600080fd5b505afa1580156119fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a209190612f54565b6001600160a01b031614611a665760405162461bcd60e51b815260206004820152600d60248201526c3cb7ba903737ba1037bbb732b960991b604482015260640161090a565b6000818152600c6020526040902080546001600160a01b03191633908117909155610e489082906126ed565b600d546040516332d53b1760e01b815260048101839052600091829182916001600160a01b0316906332d53b1790602401604080518083038186803b158015611ada57600080fd5b505afa158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b129190612f8e565b9092509050611b31620f42406c0c9f2c9cd04674edea400000006132e4565b611b3b90826132e4565b9050816111245760006110da565b6010546001600160a01b03163314611ba35760405162461bcd60e51b815260206004820181905260248201527f6d73672e73656e646572206973206e6f7420706f736974696f6e526f75746572604482015260640161090a565b60008381526013602081815260408084208054808652600b845282862054898752949093526002810154600190910154600a549251631b45a68d60e01b81526004810186905293949391926001600160a01b0391821692911690631b45a68d90602401600060405180830381600087803b158015611c2057600080fd5b505af1158015611c34573d6000803e3d6000fd5b50505060008981526013602052604090206003015460ff16159050611ef65760048054600a5460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301869052169063a9059cbb90604401602060405180830381600087803b158015611ca557600080fd5b505af1158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190612f71565b506004546000858152600c60205260409020546001600160a01b039182169163a9059cbb91166064611d1087600a613306565b611d1a91906132e4565b611d2490876132cc565b611d2e9086613364565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611d7457600080fd5b505af1158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dac9190612f71565b506004546001600160a01b031663a9059cbb826064611dcc87600a613306565b611dd691906132e4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611e1c57600080fd5b505af1158015611e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e549190612f71565b506000848152600c602052604090205484906001600160a01b03167fad7bde0b40220dccef6b876cf7594499d11d9f168fbd034338597c691a7e943d6064611e9d87600a613306565b611ea791906132e4565b611eb190876132cc565b611ebb9086613364565b866064611ec982600a613306565b611ed391906132e4565b6040805193845260208401929092529082015260600160405180910390a3612186565b8282111561207157611f088383613364565b600454600a549196506001600160a01b039081169163a9059cbb91166064611f3189605a613306565b611f3b91906132e4565b611f4590876132cc565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611f8b57600080fd5b505af1158015611f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc39190612f71565b506004546001600160a01b031663a9059cbb826064611fe389600a613306565b611fed91906132e4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561203357600080fd5b505af1158015612047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206b9190612f71565b506120fd565b60048054600a5460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301859052169063a9059cbb90604401602060405180830381600087803b1580156120c357600080fd5b505af11580156120d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fb9190612f71565b505b6000848152600c602052604090205484906001600160a01b03167f4e91025e01b2329df1ec1067d27aafec4d1c41f682ccd794dee04321e0b1e8dc8560646121468a605a613306565b61215091906132e4565b606461215d8b600a613306565b61216791906132e4565b6040805193845260208401929092529082015260600160405180910390a35b5050505050505050565b6121986125ad565b6001600160a01b0381166121fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161090a565b610e4881612607565b600061221182611412565b156122405761221f826114eb565b612228836110e2565b11156122375761140c826110e2565b61140c826114eb565b612249826114eb565b612252836110e2565b10156122375761140c826110e2565b600061226c82611412565b1561227a5761127c826110e2565b611296826110e2565b600d546040516332d53b1760e01b8152600481018390526000916001600160a01b0316906332d53b1790602401604080518083038186803b1580156122c757600080fd5b505afa1580156122db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ff9190612f8e565b5090508061233b5760405162461bcd60e51b81526020600482015260096024820152681b9bc81c1c9bd99a5d60ba1b604482015260640161090a565b5050565b6000838152601260209081526040918290205482518581526001600160a01b0391821692810192909252429282019290925284918616907f1fdbee5d1bd2901710e8945918b1a052ce67662661a2ccbf68420e4e430f8dab906060016118d4565b600d5460405163e6e6dd2f60e01b8152600481018490526000916001600160a01b03169063e6e6dd2f9060240160a060405180830381600087803b1580156123e757600080fd5b505af11580156123fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241f9190613017565b5050506000858152601260209081526040808320815160808101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003015460ff16151560608201529193509091508061247e86612976565b91509150600080600061249089612b20565b9250925092506124a1878a8a612d86565b866001600160a01b0316636f7e87993430868a60000151868a8d606001518d8b601060009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b15801561250f57600080fd5b505afa158015612523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125479190612fbc565b6000306040518d63ffffffff1660e01b81526004016125709b9a99989796959493929190613135565b6000604051808303818588803b15801561258957600080fd5b505af115801561259d573d6000803e3d6000fd5b5050505050505050505050505050565b6000546001600160a01b031633146112615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161090a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6126a0848484846040516024016126719493929190613222565b60408051601f198184030181529190526020810180516001600160e01b031663a7a8785360e01b179052612f16565b50505050565b604051602481018390526044810182905261233b9060640160408051601f198184030181529190526020810180516001600160e01b0316637b3338ad60e11b179052612f16565b600d5460405163e6e6dd2f60e01b81526004810184905260009182916001600160a01b039091169063e6e6dd2f9060240160a060405180830381600087803b15801561273857600080fd5b505af115801561274c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127709190613017565b5050600d54604051630b7d321160e41b81529395509093506000926001600160a01b03909116915063b7d32110906127ac9086906004016131fa565b602060405180830381600087803b1580156127c657600080fd5b505af11580156127da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fe9190612f54565b600d5460405163eb02c30160e01b81526004810188905291925060009182916001600160a01b03169063eb02c301906024016101006040518083038186803b15801561284957600080fd5b505afa15801561285d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288191906130cb565b50506003546040516323b872dd60e01b8152336004820152306024820152604481018f9052969850939650506001600160a01b03909216936323b872dd935060640191506128cc9050565b600060405180830381600087803b1580156128e657600080fd5b505af11580156128fa573d6000803e3d6000fd5b5050604080516080810182526001600160a01b03968716815260208082019687528183019586529715156060820190815260009b8c5260129098529920985189546001600160a01b0319169516949094178855509051600187015551600286015550516003909301805460ff1916931515939093179092555050565b600d5460405163eb02c30160e01b815260048101839052600091829182916001600160a01b03169063eb02c301906024016101006040518083038186803b1580156129c057600080fd5b505afa1580156129d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f891906130cb565b5050505050505090508060001415612a4a5760405162461bcd60e51b81526020600482015260156024820152741c1bdcda5d1a5bdb881cda5e99481a5cc81b9d5b1b605a1b604482015260640161090a565b60008481526012602052604090206003015460ff16612a7757601154612a72906103e861328b565b612a86565b601154612a86906103e8613325565b600d54604051637a3c4c1760e01b8152600481018790526103e8916001600160a01b031690637a3c4c179060240160206040518083038186803b158015612acc57600080fd5b505afa158015612ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b049190612fbc565b612b0e91906132e4565b612b189190613306565b925050915091565b600d5460405163eb02c30160e01b815260048101839052606091600091829182916001600160a01b039091169063eb02c301906024016101006040518083038186803b158015612b6f57600080fd5b505afa158015612b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba791906130cb565b5050600d546040516332d53b1760e01b8152600481018d90529597506000965086956001600160a01b0390911694506332d53b1793506024019150612be99050565b604080518083038186803b158015612c0057600080fd5b505afa158015612c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c389190612f8e565b9150915081612c475780612c49565b825b60008881526012602052604090206003015490945060ff1615612d1757604080516002808252606082018352909160208301908036833750505060008881526012602052604081205482519298506001600160a01b031691889190612cb057612cb0613391565b6001600160a01b039283166020918202929092010152600454875191169087906001908110612ce157612ce1613391565b6001600160a01b03909216602092830291909101909101526064612d06856063613306565b612d1091906132e4565b9450612d7c565b6040805160018082528183019092529060208083019080368337505060045482519298506001600160a01b031691889150600090612d5757612d57613391565b60200260200101906001600160a01b031690816001600160a01b031681525050600094505b5050509193909250565b60105460405163fa44457760e01b81526001600160a01b038581166004830152600092169063fa44457790602401602060405180830381600087803b158015612dce57600080fd5b505af1158015612de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e069190612fbc565b60105460405163317c51ff60e11b81526001600160a01b03878116600483015260248201849052929350600092909116906362f8a3fe9060440160206040518083038186803b158015612e5857600080fd5b505afa158015612e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e909190612fbc565b90506000612e9d85611a92565b60408051608081018252968752336020808901918252888301938452961515606089019081526000958652601390975293209551865591516001860180546001600160a01b0319166001600160a01b039092169190911790555051600284015550516003909101805460ff191691151591909117905550565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600060208284031215612f4957600080fd5b8135611124816133a7565b600060208284031215612f6657600080fd5b8151611124816133a7565b600060208284031215612f8357600080fd5b8151611124816133bc565b60008060408385031215612fa157600080fd5b8251612fac816133bc565b6020939093015192949293505050565b600060208284031215612fce57600080fd5b5051919050565b600080600060608486031215612fea57600080fd5b833592506020840135612ffc816133bc565b9150604084013561300c816133bc565b809150509250925092565b600080600080600060a0868803121561302f57600080fd5b85516008811061303e57600080fd5b602087015190955061304f816133a7565b6040870151909450613060816133bc565b6060870151909350613071816133a7565b6080870151909250613082816133a7565b809150509295509295909350565b6000602082840312156130a257600080fd5b5035919050565b600080604083850312156130bc57600080fd5b50508035926020909101359150565b600080600080600080600080610100898b0312156130e857600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c089015161311d816133bc565b8092505060e089015190509295985092959890939650565b6001600160a01b038c8116825261016060208084018290528d51918401829052600092916101808501918f01845b828110156131835781518516845260209384019390910190600101613163565b5050506001600160a01b038d166040850152915061319e9050565b8960608301528860808301526131b860a083018915159052565b8660c08301528560e0830152846101008301526131da61012083018515159052565b6001600160a01b0383166101408301529c9b505050505050505050505050565b602081016008831061321c57634e487b7160e01b600052602160045260246000fd5b91905290565b608081526000855180608084015260005b8181101561325057602081890181015160a0868401015201613233565b8181111561326257600060a083860101525b506020830195909552506040810192909252606082015260a0601f909201601f19160101919050565b600080821280156001600160ff1b03849003851316156132ad576132ad61337b565b600160ff1b83900384128116156132c6576132c661337b565b50500190565b600082198211156132df576132df61337b565b500190565b60008261330157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156133205761332061337b565b500290565b60008083128015600160ff1b8501841216156133435761334361337b565b6001600160ff1b038401831381161561335e5761335e61337b565b50500390565b6000828210156133765761337661337b565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610e4857600080fd5b8015158114610e4857600080fdfea264697066735822122033e8bd936a9a6f1b2bd3f8f1149be2660ba1847a6ab143d40e90484de3312f0964736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102675760003560e01c80637c3a00fd11610144578063c3707709116100b6578063e5bad7231161007a578063e5bad7231461078c578063edf3daec146107ac578063f2fde38b146107cc578063fbfa77cf146107ec578063fe651d1c1461080c578063fecb63571461082c57600080fd5b8063c3707709146106f6578063d88c691014610716578063d8aed14514610736578063e2233cbd14610756578063e260d7471461077657600080fd5b80639d38d064116101085780639d38d0641461062c5780639e3aa5b114610642578063a226b48314610662578063b13de26614610682578063b2016bd4146106a2578063b3b840df146106c257600080fd5b80637c3a00fd1461053d57806389097a6a1461055357806389a30271146105ce5780638da5cb5b146105ee57806391c2c4691461060c57600080fd5b80634de33fda116101dd57806362965d8e116101a157806362965d8e1461048c57806366234ffa146104a2578063715018a6146104b8578063776af5ba146104cd57806379881698146104ed5780637a3c4c171461051d57600080fd5b80634de33fda146103ec578063587a03c21461040c5780635f84f3021461042c5780636198e3391461044c57806361ef161f1461046c57600080fd5b806324a6665e1161022f57806324a6665e14610338578063415f12401461036d57806341f6cf4e146103805780634437152a14610396578063484f1371146103b65780634ddde78d146103d657600080fd5b80630ecbcdab1461026c57806316f0115b1461028e57806317582981146102cb5780631a426216146102ef578063200549ca14610302575b600080fd5b34801561027857600080fd5b5061028c6102873660046130a9565b61084c565b005b34801561029a57600080fd5b50600a546102ae906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d757600080fd5b506102e160095481565b6040519081526020016102c2565b61028c6102fd366004613090565b610d28565b34801561030e57600080fd5b506102ae61031d366004613090565b600c602052600090815260409020546001600160a01b031681565b34801561034457600080fd5b50610358610353366004613090565b610e4b565b604080519283526020830191909152016102c2565b61028c61037b366004613090565b610f2f565b34801561038c57600080fd5b506102e160115481565b3480156103a257600080fd5b5061028c6103b1366004612f37565b61104f565b3480156103c257600080fd5b506102e16103d1366004613090565b611079565b3480156103e257600080fd5b506102e160085481565b3480156103f857600080fd5b506102e1610407366004613090565b6110e2565b34801561041857600080fd5b5061028c610427366004613090565b61113c565b34801561043857600080fd5b5061028c610447366004613090565b611149565b34801561045857600080fd5b5061028c610467366004613090565b611156565b34801561047857600080fd5b506010546102ae906001600160a01b031681565b34801561049857600080fd5b506102e160015481565b3480156104ae57600080fd5b506102e160065481565b3480156104c457600080fd5b5061028c61124f565b3480156104d957600080fd5b50600f546102ae906001600160a01b031681565b3480156104f957600080fd5b5061050d610508366004613090565b611263565b60405190151581526020016102c2565b34801561052957600080fd5b506102e1610538366004613090565b6112a7565b34801561054957600080fd5b506102e160055481565b34801561055f57600080fd5b506105a261056e366004613090565b60126020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b604080516001600160a01b039095168552602085019390935291830152151560608201526080016102c2565b3480156105da57600080fd5b506004546102ae906001600160a01b031681565b3480156105fa57600080fd5b506000546001600160a01b03166102ae565b34801561061857600080fd5b50600d546102ae906001600160a01b031681565b34801561063857600080fd5b506102e160025481565b34801561064e57600080fd5b506102e161065d366004613090565b6113e7565b34801561066e57600080fd5b5061050d61067d366004613090565b611412565b34801561068e57600080fd5b5061028c61069d366004613090565b61148f565b3480156106ae57600080fd5b506003546102ae906001600160a01b031681565b3480156106ce57600080fd5b506103586106dd366004613090565b600b602052600090815260409020805460019091015482565b34801561070257600080fd5b5061028c610711366004613090565b6114de565b34801561072257600080fd5b506102e1610731366004613090565b6114eb565b34801561074257600080fd5b5061028c6107513660046130a9565b6115e4565b34801561076257600080fd5b5061028c610771366004613090565b6118e2565b34801561078257600080fd5b506102e160075481565b34801561079857600080fd5b506102e16107a7366004613090565b611a92565b3480156107b857600080fd5b5061028c6107c7366004612fd5565b611b49565b3480156107d857600080fd5b5061028c6107e7366004612f37565b612190565b3480156107f857600080fd5b50600e546102ae906001600160a01b031681565b34801561081857600080fd5b506102e1610827366004613090565b612206565b34801561083857600080fd5b5061050d610847366004613090565b612261565b600a60009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d29190612f71565b6109135760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b60448201526064015b60405180910390fd5b6000828152600b602052604081209061092b846113e7565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b03166312b583496040518163ffffffff1660e01b815260040160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190612fbc565b9050600754841015610a095760405162461bcd60e51b815260206004820152601a60248201527f616d6f756e74206c657373206d696e426f72726f774c696d6974000000000000604482015260640161090a565b82548290610a1790866132cc565b1115610a595760405162461bcd60e51b8152602060048201526011602482015270626f72726f7720697320746f6f2062696760781b604482015260640161090a565b6000858152600c60205260409020546001600160a01b03163314610ab75760405162461bcd60e51b81526020600482015260156024820152743cb7ba9030b932903737ba103a34329037bbb732b960591b604482015260640161090a565b80841115610b155760405162461bcd60e51b815260206004820152602560248201527f7468657265206973206e6f7420656e6f756768206d6f6e657920696e20746865604482015264081c1bdbdb60da1b606482015260840161090a565b610b1e85612283565b610b2785611412565b15610b8757610b35856110e2565b610b3e866112a7565b11610b825760405162461bcd60e51b815260206004820152601460248201527374686520707269636520697320746f6f206c6f7760601b604482015260640161090a565b610bde565b610b90856110e2565b610b99866112a7565b10610bde5760405162461bcd60e51b81526020600482015260156024820152740e8d0ca40e0e4d2c6ca40d2e640e8dede40d0d2ced605b1b604482015260640161090a565b6000610be986611079565b9050604051806040016040528082866000015488610c0791906132cc565b610c1191906132cc565b8152426020918201526000888152600b82526040902082518155910151600190910155600a546001600160a01b0316632bc355ca610c4f83886132cc565b6040518263ffffffff1660e01b8152600401610c6d91815260200190565b600060405180830381600087803b158015610c8757600080fd5b505af1158015610c9b573d6000803e3d6000fd5b5050600a546000898152600c602052604090819020549051633419e74d60e21b81526001600160a01b039182166004820152602481018a90529116925063d0679d349150604401600060405180830381600087803b158015610cfc57600080fd5b505af1158015610d10573d6000803e3d6000fd5b50505050610d203387874261233f565b505050505050565b610d3181612261565b610d6d5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015260640161090a565b601060009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b158015610dbb57600080fd5b505afa158015610dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df39190612fbc565b341015610e3d5760405162461bcd60e51b81526020600482015260186024820152771b5a5b915e1958dd5d1a5bdb919959481d1bdbc81cdb585b60421b604482015260640161090a565b610e488160016123a0565b50565b600d5460405163eb02c30160e01b8152600481018390526000918291829182916001600160a01b039091169063eb02c301906024016101006040518083038186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed191906130cb565b505050505092505091506008546c0c9f2c9cd04674edea40000000610ef691906132e4565b610f0090836132e4565b600854610f1a906c0c9f2c9cd04674edea400000006132e4565b610f2490836132e4565b935093505050915091565b610f3881611263565b610f745760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015260640161090a565b601060009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa9190612fbc565b3410156110445760405162461bcd60e51b81526020600482015260186024820152771b5a5b915e1958dd5d1a5bdb919959481d1bdbc81cdb585b60421b604482015260640161090a565b610e488160006123a0565b6110576125ad565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600b6020526040812060018101548290603c9061109b9042613364565b6110a591906132e4565b9050600654600554826110b89190613306565b83546110c6906064906132e4565b6110d09190613306565b6110da91906132e4565b949350505050565b6000806110ee83610e4b565b9150506110fa83611412565b1561112b576064600954606461111091906132cc565b61111a9083613306565b61112491906132e4565b9392505050565b606460095460646111109190613364565b6111446125ad565b600655565b6111516125ad565b600555565b6000818152600b6020526040902054156111a45760405162461bcd60e51b815260206004820152600f60248201526e1b1bd85b881a5cc8189b1bd8dad959608a1b604482015260640161090a565b6003546000828152600c6020526040908190205490516323b872dd60e01b81523060048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401600060405180830381600087803b15801561120757600080fd5b505af115801561121b573d6000803e3d6000fd5b50506040518392503391507f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f190600090a350565b6112576125ad565b6112616000612607565b565b600061126e82611412565b1561128d5761127c826114eb565b611285836112a7565b111592915050565b611296826114eb565b61129f836112a7565b101592915050565b6000818152601260209081526040808320815160808101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003015460ff16151560608201526112fc83611412565b1561139a5760085461131b906c0c9f2c9cd04674edea400000006132e4565b600e548251604051637092736960e11b81526001600160a01b03918216600482015291169063e124e6d2906024015b60206040518083038186803b15801561136257600080fd5b505afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111a9190612fbc565b6008546113b4906c0c9f2c9cd04674edea400000006132e4565b600e5482516040516340d3096b60e11b81526001600160a01b0391821660048201529116906381a612d69060240161134a565b60006001546002546113f884611a92565b61140291906132e4565b61140c9190613306565b92915050565b600d5460405163a226b48360e01b8152600481018390526000916001600160a01b03169063a226b4839060240160206040518083038186803b15801561145757600080fd5b505afa15801561146b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c9190612f71565b6114976125ad565b611f408111156114d95760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b604482015260640161090a565b600155565b6114e66125ad565b600755565b6000818152600b60205260408120818061150485610e4b565b91509150611549604051806040016040528060088152602001676c6971507269636560c01b81525084600001548360085487600001546115449190613306565b612657565b61156f828360085486600001546115609190613306565b61156a91906132e4565b6126a6565b61157885611412565b156115b5576008548354839161158d91613306565b61159791906132e4565b6115a2906078613306565b6115ac90826132cc565b95945050505050565b600854835483916115c591613306565b6115cf91906132e4565b6115da906078613306565b6115ac9082613364565b6000828152600b60205260409020546116315760405162461bcd60e51b815260206004820152600f60248201526e1bdc1d1a5bdb881c995919595b5959608a1b604482015260640161090a565b600061163c83611079565b6000848152600b60205260409020549091506116599082906132cc565b82111561169a5760405162461bcd60e51b815260206004820152600f60248201526e1d1bdbc81b5d58da08185b5bdd5b9d608a1b604482015260640161090a565b6000838152600c60205260409020546001600160a01b031633146116bd57600080fd5b6000838152600b602052604081205483906116d99084906132cc565b6116e39190613364565b600a549091506001600160a01b0316631b45a68d6117018486613364565b6040518263ffffffff1660e01b815260040161171f91815260200190565b600060405180830381600087803b15801561173957600080fd5b505af115801561174d573d6000803e3d6000fd5b505060408051808201825284815242602080830191825260008a8152600b825284812093518455915160019093019290925560048054600c909352908390205492516323b872dd60e01b81526001600160a01b039384169181019190915230602482015260448101889052911692506323b872dd9150606401602060405180830381600087803b1580156117e057600080fd5b505af11580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118189190612f71565b5060048054600a5460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301869052169063a9059cbb90604401602060405180830381600087803b15801561186b57600080fd5b505af115801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a39190612f71565b50604051838152849033907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d0906020015b60405180910390a350505050565b600a60009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561193057600080fd5b505afa158015611944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119689190612f71565b6119a45760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b604482015260640161090a565b6003546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156119e857600080fd5b505afa1580156119fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a209190612f54565b6001600160a01b031614611a665760405162461bcd60e51b815260206004820152600d60248201526c3cb7ba903737ba1037bbb732b960991b604482015260640161090a565b6000818152600c6020526040902080546001600160a01b03191633908117909155610e489082906126ed565b600d546040516332d53b1760e01b815260048101839052600091829182916001600160a01b0316906332d53b1790602401604080518083038186803b158015611ada57600080fd5b505afa158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b129190612f8e565b9092509050611b31620f42406c0c9f2c9cd04674edea400000006132e4565b611b3b90826132e4565b9050816111245760006110da565b6010546001600160a01b03163314611ba35760405162461bcd60e51b815260206004820181905260248201527f6d73672e73656e646572206973206e6f7420706f736974696f6e526f75746572604482015260640161090a565b60008381526013602081815260408084208054808652600b845282862054898752949093526002810154600190910154600a549251631b45a68d60e01b81526004810186905293949391926001600160a01b0391821692911690631b45a68d90602401600060405180830381600087803b158015611c2057600080fd5b505af1158015611c34573d6000803e3d6000fd5b50505060008981526013602052604090206003015460ff16159050611ef65760048054600a5460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301869052169063a9059cbb90604401602060405180830381600087803b158015611ca557600080fd5b505af1158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190612f71565b506004546000858152600c60205260409020546001600160a01b039182169163a9059cbb91166064611d1087600a613306565b611d1a91906132e4565b611d2490876132cc565b611d2e9086613364565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611d7457600080fd5b505af1158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dac9190612f71565b506004546001600160a01b031663a9059cbb826064611dcc87600a613306565b611dd691906132e4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611e1c57600080fd5b505af1158015611e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e549190612f71565b506000848152600c602052604090205484906001600160a01b03167fad7bde0b40220dccef6b876cf7594499d11d9f168fbd034338597c691a7e943d6064611e9d87600a613306565b611ea791906132e4565b611eb190876132cc565b611ebb9086613364565b866064611ec982600a613306565b611ed391906132e4565b6040805193845260208401929092529082015260600160405180910390a3612186565b8282111561207157611f088383613364565b600454600a549196506001600160a01b039081169163a9059cbb91166064611f3189605a613306565b611f3b91906132e4565b611f4590876132cc565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611f8b57600080fd5b505af1158015611f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc39190612f71565b506004546001600160a01b031663a9059cbb826064611fe389600a613306565b611fed91906132e4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561203357600080fd5b505af1158015612047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206b9190612f71565b506120fd565b60048054600a5460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301859052169063a9059cbb90604401602060405180830381600087803b1580156120c357600080fd5b505af11580156120d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fb9190612f71565b505b6000848152600c602052604090205484906001600160a01b03167f4e91025e01b2329df1ec1067d27aafec4d1c41f682ccd794dee04321e0b1e8dc8560646121468a605a613306565b61215091906132e4565b606461215d8b600a613306565b61216791906132e4565b6040805193845260208401929092529082015260600160405180910390a35b5050505050505050565b6121986125ad565b6001600160a01b0381166121fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161090a565b610e4881612607565b600061221182611412565b156122405761221f826114eb565b612228836110e2565b11156122375761140c826110e2565b61140c826114eb565b612249826114eb565b612252836110e2565b10156122375761140c826110e2565b600061226c82611412565b1561227a5761127c826110e2565b611296826110e2565b600d546040516332d53b1760e01b8152600481018390526000916001600160a01b0316906332d53b1790602401604080518083038186803b1580156122c757600080fd5b505afa1580156122db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ff9190612f8e565b5090508061233b5760405162461bcd60e51b81526020600482015260096024820152681b9bc81c1c9bd99a5d60ba1b604482015260640161090a565b5050565b6000838152601260209081526040918290205482518581526001600160a01b0391821692810192909252429282019290925284918616907f1fdbee5d1bd2901710e8945918b1a052ce67662661a2ccbf68420e4e430f8dab906060016118d4565b600d5460405163e6e6dd2f60e01b8152600481018490526000916001600160a01b03169063e6e6dd2f9060240160a060405180830381600087803b1580156123e757600080fd5b505af11580156123fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241f9190613017565b5050506000858152601260209081526040808320815160808101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003015460ff16151560608201529193509091508061247e86612976565b91509150600080600061249089612b20565b9250925092506124a1878a8a612d86565b866001600160a01b0316636f7e87993430868a60000151868a8d606001518d8b601060009054906101000a90046001600160a01b03166001600160a01b03166363ae21036040518163ffffffff1660e01b815260040160206040518083038186803b15801561250f57600080fd5b505afa158015612523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125479190612fbc565b6000306040518d63ffffffff1660e01b81526004016125709b9a99989796959493929190613135565b6000604051808303818588803b15801561258957600080fd5b505af115801561259d573d6000803e3d6000fd5b5050505050505050505050505050565b6000546001600160a01b031633146112615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161090a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6126a0848484846040516024016126719493929190613222565b60408051601f198184030181529190526020810180516001600160e01b031663a7a8785360e01b179052612f16565b50505050565b604051602481018390526044810182905261233b9060640160408051601f198184030181529190526020810180516001600160e01b0316637b3338ad60e11b179052612f16565b600d5460405163e6e6dd2f60e01b81526004810184905260009182916001600160a01b039091169063e6e6dd2f9060240160a060405180830381600087803b15801561273857600080fd5b505af115801561274c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127709190613017565b5050600d54604051630b7d321160e41b81529395509093506000926001600160a01b03909116915063b7d32110906127ac9086906004016131fa565b602060405180830381600087803b1580156127c657600080fd5b505af11580156127da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fe9190612f54565b600d5460405163eb02c30160e01b81526004810188905291925060009182916001600160a01b03169063eb02c301906024016101006040518083038186803b15801561284957600080fd5b505afa15801561285d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288191906130cb565b50506003546040516323b872dd60e01b8152336004820152306024820152604481018f9052969850939650506001600160a01b03909216936323b872dd935060640191506128cc9050565b600060405180830381600087803b1580156128e657600080fd5b505af11580156128fa573d6000803e3d6000fd5b5050604080516080810182526001600160a01b03968716815260208082019687528183019586529715156060820190815260009b8c5260129098529920985189546001600160a01b0319169516949094178855509051600187015551600286015550516003909301805460ff1916931515939093179092555050565b600d5460405163eb02c30160e01b815260048101839052600091829182916001600160a01b03169063eb02c301906024016101006040518083038186803b1580156129c057600080fd5b505afa1580156129d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f891906130cb565b5050505050505090508060001415612a4a5760405162461bcd60e51b81526020600482015260156024820152741c1bdcda5d1a5bdb881cda5e99481a5cc81b9d5b1b605a1b604482015260640161090a565b60008481526012602052604090206003015460ff16612a7757601154612a72906103e861328b565b612a86565b601154612a86906103e8613325565b600d54604051637a3c4c1760e01b8152600481018790526103e8916001600160a01b031690637a3c4c179060240160206040518083038186803b158015612acc57600080fd5b505afa158015612ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b049190612fbc565b612b0e91906132e4565b612b189190613306565b925050915091565b600d5460405163eb02c30160e01b815260048101839052606091600091829182916001600160a01b039091169063eb02c301906024016101006040518083038186803b158015612b6f57600080fd5b505afa158015612b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba791906130cb565b5050600d546040516332d53b1760e01b8152600481018d90529597506000965086956001600160a01b0390911694506332d53b1793506024019150612be99050565b604080518083038186803b158015612c0057600080fd5b505afa158015612c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c389190612f8e565b9150915081612c475780612c49565b825b60008881526012602052604090206003015490945060ff1615612d1757604080516002808252606082018352909160208301908036833750505060008881526012602052604081205482519298506001600160a01b031691889190612cb057612cb0613391565b6001600160a01b039283166020918202929092010152600454875191169087906001908110612ce157612ce1613391565b6001600160a01b03909216602092830291909101909101526064612d06856063613306565b612d1091906132e4565b9450612d7c565b6040805160018082528183019092529060208083019080368337505060045482519298506001600160a01b031691889150600090612d5757612d57613391565b60200260200101906001600160a01b031690816001600160a01b031681525050600094505b5050509193909250565b60105460405163fa44457760e01b81526001600160a01b038581166004830152600092169063fa44457790602401602060405180830381600087803b158015612dce57600080fd5b505af1158015612de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e069190612fbc565b60105460405163317c51ff60e11b81526001600160a01b03878116600483015260248201849052929350600092909116906362f8a3fe9060440160206040518083038186803b158015612e5857600080fd5b505afa158015612e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e909190612fbc565b90506000612e9d85611a92565b60408051608081018252968752336020808901918252888301938452961515606089019081526000958652601390975293209551865591516001860180546001600160a01b0319166001600160a01b039092169190911790555051600284015550516003909101805460ff191691151591909117905550565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600060208284031215612f4957600080fd5b8135611124816133a7565b600060208284031215612f6657600080fd5b8151611124816133a7565b600060208284031215612f8357600080fd5b8151611124816133bc565b60008060408385031215612fa157600080fd5b8251612fac816133bc565b6020939093015192949293505050565b600060208284031215612fce57600080fd5b5051919050565b600080600060608486031215612fea57600080fd5b833592506020840135612ffc816133bc565b9150604084013561300c816133bc565b809150509250925092565b600080600080600060a0868803121561302f57600080fd5b85516008811061303e57600080fd5b602087015190955061304f816133a7565b6040870151909450613060816133bc565b6060870151909350613071816133a7565b6080870151909250613082816133a7565b809150509295509295909350565b6000602082840312156130a257600080fd5b5035919050565b600080604083850312156130bc57600080fd5b50508035926020909101359150565b600080600080600080600080610100898b0312156130e857600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c089015161311d816133bc565b8092505060e089015190509295985092959890939650565b6001600160a01b038c8116825261016060208084018290528d51918401829052600092916101808501918f01845b828110156131835781518516845260209384019390910190600101613163565b5050506001600160a01b038d166040850152915061319e9050565b8960608301528860808301526131b860a083018915159052565b8660c08301528560e0830152846101008301526131da61012083018515159052565b6001600160a01b0383166101408301529c9b505050505050505050505050565b602081016008831061321c57634e487b7160e01b600052602160045260246000fd5b91905290565b608081526000855180608084015260005b8181101561325057602081890181015160a0868401015201613233565b8181111561326257600060a083860101525b506020830195909552506040810192909252606082015260a0601f909201601f19160101919050565b600080821280156001600160ff1b03849003851316156132ad576132ad61337b565b600160ff1b83900384128116156132c6576132c661337b565b50500190565b600082198211156132df576132df61337b565b500190565b60008261330157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156133205761332061337b565b500290565b60008083128015600160ff1b8501841216156133435761334361337b565b6001600160ff1b038401831381161561335e5761335e61337b565b50500390565b6000828210156133765761337661337b565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610e4857600080fd5b8015158114610e4857600080fdfea264697066735822122033e8bd936a9a6f1b2bd3f8f1149be2660ba1847a6ab143d40e90484de3312f0964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "borrow(uint256,uint256)": {
        "params": {
          "amount": "borrow size (USDC)*",
          "id": "collateral ID"
        }
      },
      "calculateUpcomingFee(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "collateralInfo(uint256)": {
        "params": {
          "id": "collateral id*"
        }
      },
      "intrinsicValueOf(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "liquidate(uint256)": {
        "params": {
          "id": "position ID*"
        }
      },
      "liquidateByBorderPrice(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "lockCollateral(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "maxBorrowLimit(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256,uint256)": {
        "params": {
          "amount": "amount to repay (USDC)*",
          "id": "collateral ID"
        }
      },
      "setInterestRate(uint256)": {
        "params": {
          "value": "interest rate (in minutes)*"
        }
      },
      "setLTV(uint256)": {
        "params": {
          "value": "LTV coefficient.*"
        }
      },
      "setMinBorrowLimit(uint256)": {
        "params": {
          "value": "min. borrow size (USDC)*"
        }
      },
      "setPool(address)": {
        "params": {
          "value": "the address of the liquidity pool*"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(uint256,uint256)": {
        "notice": "send USDC to the user"
      },
      "calculateUpcomingFee(uint256)": {
        "notice": "used to calculate how much USDC user should pay as interest fee"
      },
      "collateralInfo(uint256)": {
        "notice": "returns the position size and the entry price by collateral ID"
      },
      "intrinsicValueOf(uint256)": {
        "notice": "calculates the intrinsic value of the collateral"
      },
      "liquidate(uint256)": {
        "notice": "used to liquidate the loan"
      },
      "liquidateByBorderPrice(uint256)": {
        "notice": "used to liquidate the loan by border price"
      },
      "lockCollateral(uint256)": {
        "notice": "used to lock the collateral (ERC-721) in DeDeLend"
      },
      "maxBorrowLimit(uint256)": {
        "notice": "calcualtes the maximum borrow size for the specific collateral"
      },
      "repay(uint256,uint256)": {
        "notice": "used to repay the user's debt"
      },
      "setInterestRate(uint256)": {
        "notice": "used to set new interest rate"
      },
      "setLTV(uint256)": {
        "notice": "used to set LTV coefficient"
      },
      "setMinBorrowLimit(uint256)": {
        "notice": "used to set the minimum borrow size"
      },
      "setPool(address)": {
        "notice": "used to connect a new liqidity pool"
      },
      "unlock(uint256)": {
        "notice": "sends the collateral token back to the user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3790,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "LTV",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3795,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "LTV_DECIMALS",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3798,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "collateralToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC721)2101"
      },
      {
        "astId": 3801,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "USDC",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)776"
      },
      {
        "astId": 3804,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "interestRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3809,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "INTEREST_RATE_DECIMALS",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3811,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3813,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "COLLATERAL_DECIMALS",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3815,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "BorderPriceCoef",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3818,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "pool",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IPoolDDL)6753"
      },
      {
        "astId": 3828,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "borrowedByCollateral",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(BorrowedByCollateral)3823_storage)"
      },
      {
        "astId": 3832,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "collateralOwner",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4699,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "accountManager",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IAccountManager)6537"
      },
      {
        "astId": 4702,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "vault",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IVault)7604"
      },
      {
        "astId": 4705,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "orderBook",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IOrderBook)6723"
      },
      {
        "astId": 4708,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "positionRouter",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IPositionRouter)6901"
      },
      {
        "astId": 4711,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "closeSlippage",
        "offset": 0,
        "slot": "17",
        "type": "t_int256"
      },
      {
        "astId": 4737,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "positionInfo",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(PositionInfo)4723_storage)"
      },
      {
        "astId": 4742,
        "contract": "contracts/DDL_GMX.sol:DDL_GMX",
        "label": "liquidatePositionInfo",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_struct(LiquidatePositionInfo)4732_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccountManager)6537": {
        "encoding": "inplace",
        "label": "contract IAccountManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)776": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)2101": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IOrderBook)6723": {
        "encoding": "inplace",
        "label": "contract IOrderBook",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolDDL)6753": {
        "encoding": "inplace",
        "label": "contract IPoolDDL",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionRouter)6901": {
        "encoding": "inplace",
        "label": "contract IPositionRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)7604": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(LiquidatePositionInfo)4732_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DDL_GMX.LiquidatePositionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LiquidatePositionInfo)4732_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(BorrowedByCollateral)3823_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DDL.BorrowedByCollateral)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowedByCollateral)3823_storage"
      },
      "t_mapping(t_uint256,t_struct(PositionInfo)4723_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DDL_GMX.PositionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PositionInfo)4723_storage"
      },
      "t_struct(BorrowedByCollateral)3823_storage": {
        "encoding": "inplace",
        "label": "struct DDL.BorrowedByCollateral",
        "members": [
          {
            "astId": 3820,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "borrowed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3822,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "newBorrowTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LiquidatePositionInfo)4732_storage": {
        "encoding": "inplace",
        "label": "struct DDL_GMX.LiquidatePositionInfo",
        "members": [
          {
            "astId": 4725,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4727,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "liquidator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4729,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "profit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4731,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "isBorderPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PositionInfo)4723_storage": {
        "encoding": "inplace",
        "label": "struct DDL_GMX.PositionInfo",
        "members": [
          {
            "astId": 4716,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "indexToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4718,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4720,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "openPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4722,
            "contract": "contracts/DDL_GMX.sol:DDL_GMX",
            "label": "isLong",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}